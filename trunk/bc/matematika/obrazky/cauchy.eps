%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cauchy.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Karel Bilek
%%CreationDate: 8/25/11
%%BoundingBox: 0 0 545 470
%%HiResBoundingBox: 0 0 544.5586 469.0586
%%CropBox: 0 0 544.5586 469.0586
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2011-08-25T04:58:45+02:00</xap:CreateDate>
         <xap:ModifyDate>2011-08-25T04:58:45+02:00</xap:ModifyDate>
         <xap:MetadataDate>2011-08-25T04:58:45+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>224</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA4AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq4kAVOwHU4q8+1785/Iul+YrbTl1hNQkMFx62naXG+o3Hrh4REpS1WVkPEybNQePbFUk&#xA;1r8yfMsuoWGt6N5E1sQ2pa3uZdU+raZG8VyVVaiWVpVpJwO8eKp5/if855vhi8jafa13D3OthqDw&#xA;ZYrRt/kxxVr/ABb+ccQHrfl9az02Y22uQliQOqrNbxCh93xVafzbv7Cv+IvJHmDSwv8AeXEFvFqV&#xA;uo8TJZSTNT/YYqnfln8z/wAv/M0v1fRddtbm86fUWYwXQI8baYRzD/gMVZRirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVS7TdWN3fajZSRejPYSqvGvLnFIgaOToPtbintiqY4q7FXYq7FXYq7FXYq7F&#xA;VsssUUTyyuscUalpJGIVVVRUkk7AAYq87ufzWvtduZdO/LbSv8RTRMYp9enc2+iwODQ/6RQvcle6&#xA;wKf9bFVq/lHe6+RP+YnmC68w8tzotqW0/SU2+z6ELepNx/mlkNfDtirI9O8v6Doev6daaNp1tptq&#xA;LG9/c2kKQoaTWnUIFriqd6rp8Oo6bc2M393cxtGT4chsw9wd8VQflbUJr3RYGuf97bctbXgPUTQH&#xA;g9fnTl9OKptirsVSHzR5C8meaYfS8waNa6jtRZpYx6yf8Y5l4yofdWGKsSk8jfmF5VHreRvMD6pY&#xA;R7ny15idrlCo/Ytr8f6RFtsok5r9GKpt5V/NPSdW1P8Aw/rNpP5a82KKtoeo8VaUDq9nOv7q6TY7&#xA;xmu24GKs1xV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksf1b/cd5l03UxtBfA6bd+HJjzt2/4Oq/TirIMV&#xA;dirsVdirsVdirsVSDzn540DyhpqXmqyO0tw/o6fp9uhlu7uc/Zht4V+J3JI9h3IGKsOt/I/mnz7K&#xA;mpfmK31HQ6iSy8j2krelQUKtqc6cfrD1/wB1r+7Hvvir0u0s7SytYrSzgjtrWBQkNvCqxxoo6KqK&#xA;AAB4DFVXFUquf+Uq07/mBvv+T1piqa4qx+0H6N83XVr9m21iIXcHh9YhASZR7shVsVZBirsVdirs&#xA;VSTzb5M8uebNLOna7ZrcxKwkt5QSk8Eo3WWCVaPG6kfaU/hirCLbzR5k/Li8h0rzxdvq3lKd1h0v&#xA;zm6/vbdmNEg1ULtvsFuAOJ/boSaKvUVZWUMpDKwqrDcEHuMVbxV2KuxV2KuxV2KuxV2KuxV2Kpd5&#xA;i0w6not1ZoeMzpyt36FZUPOM19nUYqu0HUxqmj2l9Ti80Y9Vf5ZF+GRfocEYqj8VdirsVdirsVYx&#xA;588+WHlOwhJhfUda1F/q+iaJb0NxeXBH2V/lReskh2UfQCqlfkf8v7y21FvN3nCZNT87XakGRam2&#xA;0+F/+PSxRtkVRs0n2nNSTvirO8VdirsVSq5/5SrTv+YG+/5PWmKpriqQ+cYZE06LVYFLXGkSrdqB&#xA;1aNfhmT5GItiqdwzRzQpNEwaORQ6MOhVhUHFV+KuxV2KuxVQvrGyv7KexvoEubO5Rori3lUOjo4o&#xA;ysp2IIxV5lolze/lh5gtfK2pzSXHkPV5RB5X1KZi76fct9nTbiQjeN/+Pd2NRTgfZV6pirsVdirs&#xA;VdirsVdirsVdirsVdirH9FP6P8xappJ2iuSNSsx7SnjOv0SCtPfFWQYq7FXYq7FUn83eatI8q+Xr&#xA;zXdWkKWloleCCsksjHjHDEv7TyOQqjxxVi/5d+UdWkv5vPfnCMf4u1WPhb2VS0elWBPKOyir+3+1&#xA;M9Pibbp1VegYq7FXYq7FUquf+Uq07/mBvv8Ak9aYqmuKtSRpJG0bgMjgqynoQdiMVSHye7wWdxo8&#xA;xJm0iZrdSerQH44G+mMgfRiqf4q7FXYq7FXYqlnmfy3pHmbQb3QtYgFxp1/GYp4+hHdXU/sujAMr&#xA;diK4qxT8rvMOrhtQ8k+ZpjN5n8tcEN43W/0+Sv1W9WvVmUcJdzRwanfFWfYq7FXYq7FXYq7FXYq7&#xA;FXYq7FWP+bAbN9P11f8ApWzBbkj/AJZrikcvz4ni30YqyAEEVG4OKuxV2KuxV5dp6/8AKxPzEk1S&#xA;X955O8lXLQaVGd0vNaQcZrojoyWgPCPb7ZZgdsVeo4q7FXYq7FXYqlVz/wApVp3/ADA33/J60xVN&#xA;cVdirH9Q/wBx3muxvh8NvqiGxuT0HrJWS3Y+5+JMVZBirsVdirsVdirsVeb/AJtW8mhXOk/mTYxk&#xA;3Hlt/R1pEHxT6NdMFukNPtGBuM6V2HE+OKvRoZYpokmicSRSKHjdTVWVhUEEdiMVXYq7FXYq7FXY&#xA;q7FXYq7FXYqo3tpDeWk1pOOUNwjRyD/JcUOKpX5Qu5ptHW2uTW8052sro+LQniG/2ScWxVOsVdir&#xA;Cvza8x6jpXllNO0VqeZPMdxHo+imu8c1zUPcGm/GCINIT7DFU/8AKflnTfLHlzT9A0xeNlp0Kwxk&#xA;/aY9Xkb/ACpHJZvc4qm2KuxV2KuxV2KpVc/8pVp3/MDff8nrTFU1xV2KpX5m02TUdFuIINrtAJrR&#xA;h1E8R5x0P+stMVRGjalHqelWt/HstxGrlf5Wp8S/7FqjFUZirsVdirsVdiqhf2NpqFjc2F5GJrS7&#xA;ieC4hb7LxyKUdT7FTTFWD/kle3Q8mv5evpDLf+Ur240CeRurpZt/oz/7K2eLFWf4q7FXYq7FXYq7&#xA;FXYq7FXYq7FWPD/cb5yI6W2uQ1Hh9atRv8uUR/4XFWQ4q7FXnGnqfMv506hqD/FpnkezXT7L+U6l&#xA;qSCW6dT4x2wjjPhyOKvR8VdirsVdirsVdiqVXP8AylWnf8wN9/yetMVTXFXYq7FWP+X/APQNY1TR&#xA;W2jD/X7Ef8VXBPqKvskoP34qyDFXYq7FXYq7FXYq898sD9HfnL5006gWPVrHS9ZiUVpyCy2UzeHx&#xA;fVkxV6FirsVdirsVdirsVdiqUecWnXyjrjQEicafdGIjYhxC3Hr74qm+KuxVJPN9rNJo7XdsK3mm&#xA;ut7bDxaE1Zf9knJcVTazuobu0huoDyhnRZYz4q4qP14q1eXdvZ2c95cNwt7aN5pnPRUjUsx+gDFW&#xA;DfkbaXA/L621m8UrqHme4uNevK921CUyxU9hB6aj5Yqz/FXYq7FXYq7FXYqlVz/ylWnf8wN9/wAn&#xA;rTFU1xV2KuxVj/mf/Qb3TNdXZLWX6tent9XuSEJP+pJxbFWQYq7FXYq7FXYq7FXn9B/yv4nufKgq&#xA;fGmomn68VegYq7FXYq7FXYq7FXYqlHnEzL5R1wwBjONPujEE5ci/otx48aNWvhviq79I69/1aP8A&#xA;p4j/AKYq79I69/1aP+niP+mKuOoa6RQ6PUH/AJeI/wCmKpH5YvtYsVu9EXTebafIWjQzoCsE5MkQ&#xA;qR8VN1qPDFUm/OjXfMFr+VvmMJpvoSXdr9QjlE6MQ1+62i0AFakzU2xVlelnV9N0y00630ekFlDH&#xA;bxD6xGPgiQIvbwGKor9I69/1aP8Ap4j/AKYq79I69/1aP+niP+mKu/SOvf8AVo/6eI/6Yq79I69/&#xA;1aP+niP+mKu/SOvf9Wj/AKeI/wCmKu/SOvf9Wj/p4j/piqV3Goa5/ifTz+ifiFlegL9Yj3Hq2tTW&#xA;nbFU0/SOvf8AVo/6eI/6Yq79I69/1aP+niP+mKu/SOvf9Wj/AKeI/wCmKobUm1jUNPuLKbSP3VzG&#xA;0bH6xHsGFK9O2KoTy5rmu3GlRxtpvrXFmTaXT+uin1YfhaoI6nriqafpHXv+rR/08R/0xV36R17/&#xA;AKtH/TxH/TFXfpHXv+rR/wBPEf8ATFXfpHXv+rR/08R/0xV36R17/q0f9PEf9MVYFYX2sXn546vd&#xA;R6bybSvL1nZzwieP4Xu7uecEtTusQoMVZ7+kde/6tH/TxH/TFXfpHXv+rR/08R/0xV36R17/AKtH&#xA;/TxH/TFXfpHXv+rR/wBPEf8ATFXfpHXv+rR/08R/0xV36R17/q0f9PEf9MVd+kde/wCrR/08R/0x&#xA;Vb5vaceUNaaFGaf9H3RjROXIv6LUA4UatfDfFU3xV2KuxVj+s/7j/MWmaqNobqum3h9pDzgb6JBS&#xA;vvirHvzppNofl/T23j1HzLottKg3LJ9dSVqdRsIq7+GKvQcVdirsVdirsVdirsVSq5/5SrTv+YG+&#xA;/wCT1piqa4q7FXYq7FWP2/8AuN84TwdLbWohcReAubcBZQP9aPi30YqyDFXYq7FXYq7FXnX5Rt+l&#xA;r7zh5xoTHr2sSQWEn7L2WlItlC6+zSRyt9OKvRcVdirsVdirsVdirsVSjzgZR5R1sxJ6ko0+6McY&#xA;BPJvRagoNzU+GKpvirsVdiqX+YNM/SmjXViDxklQ+i3TjIvxRt9DgYq8+8/6p+ktE8g37jg7eaNK&#xA;W5B24ShpI3U+H7z4Rir1HFXYq7FXYq7FXYq7FUquf+Uq07/mBvv+T1piqa4q7FXYq7FUi84wSjS0&#xA;1K3XldaTKt5GB1ZE2lT5NGWxVOreeK4gjniblFKqyRsO6sKg/diq/FXYq7FWGfm35nvND8nzQ6Ua&#xA;+Y9akTSdAiBozXl4fTVx/wAYVLSk9KLiqe+UfLdl5Z8saX5fsv8AebTLaO2RqULlFozn/Kdqsfc4&#xA;qm2KuxV2KuxV2KuxV2KpP5zZk8n66yIJHXT7orGy8gxED0BXuD4YqnGKuxV2KuxV47+bROj2Nwdx&#xA;b2Ws6N5htR2AXUYIrkdKfCzc6eBrir2LFXYq7FXYq7FXYq7FUquf+Uq07/mBvv8Ak9aYqmuKuxV2&#xA;KuxVp1V1KMAysCGU7gg9sVSHygzW9vd6LKSZdImMMddybd/3kDf8AeP0Yqn+KuxVbJJHFG0kjBI0&#xA;BZ3YgKqgVJJPQDFXmPk5z5583y/mHd/B5Z0dZrHycknwiUMeF3qZB6CXj6cVf2ATTfFWaeY/OWi6&#xA;BEj3jvK0iXMqxW4Ej8LOBridjuAAqJTc/aZR3GKr5/Nmjwadp+oyuy2mozW1vHJQH0pL2ggE1D8H&#xA;N3RP9ZhiqbvJGgBdgoYhV5ECrHYAV7nFUv8A8QaYdZOkq5e5S0F/M6j91HAzmONnk6D1GR+Pjxbw&#xA;xVuPX9NfXP0IHP15rQX8O37uWAyemzRuNm4MV5DtyXxxVMcVdirsVSfznM0Pk/XZl+1Hp9042B3W&#xA;Bz0YMPvGKpxirsVdirsVecfn55ek1b8u9Ukt15XVtbTBQOpWRKdv5ZAj/RirL/Juurr/AJS0XXFI&#xA;P6Tsbe6alNmmiV2G3gxIxVOMVdirsVdirsVdiqVXP/KVad/zA33/ACetMVV9c1zTdD0ubU9SkeOz&#xA;gKK7RxSzvyldYkVYoVkkcs7gAKpOKoq3nS4t4p4w6pMiyIJEeJwGFRyjkCujeKsAR3xVDaRrOnax&#xA;pyajp0pnspS4im4Ogf03KFlDhSykqeLDZhupIIOKt6PrGnazplvqemzevZXS8oZOLISASCGRwrqy&#xA;sCGVgCDsRXFUp0j8wPK2r34sbC5klme4ubWBvQnWOWSy2uTFIyBWjif4Gkrw5UUGpFVUv8y+YNL8&#xA;uecdMuLp5R+lraeCSGGCad3+q8ZEKJCkjPJWTiEUczXYGmyrJtH1fT9Y0u11XTpDNY3sazW0pR4y&#xA;yOKglJAjr8mAOKotmVVLMQqqKsx2AA7nFXlGp6hdfmzqEuhaLK0X5c2kvp69rcTMp1V0Px2Nm6kf&#xA;6P2mlB+L7K7VJVRX5uPpMXlyx0e0ht5bHR72xuNR0uQiGw+pQMONtdSAFI1f4CiFTUgErw5MFWEe&#xA;VPLOp3GjPPp+kLFaauPNel2aWqStbQHU/q72kqu0cbfVv9AaJZSiruvQEYqjbT8t/Mum2j2keg2+&#xA;k/XodG0YxabI1zHPPaXpurnVbhwkXpiOFW4tL8Zb4a1K1VTf80dAh02fQr7WLyLzFpcct9HJpvmG&#xA;VUiM11Ciwyxm3tyCYPTcKOBf94eHxUxVjmh+UfPSeS7XTLXSBPdatoHl95EvoomRRps7m7tibqGe&#xA;3iuQs8ckProd+RAqmKss/LPyh5i0XUfLmmanbGP/AA9p+s/WLpCZID+lNTWS0t4ZuEKPwgt6uqoO&#xA;PwfCtQMVesYq7FXYqlHnCd7fyjrdwhIeHT7qRSKVqsLEUqGH3jFU3xV2KuxV2KqV1bQ3VrNbTLyh&#xA;nRo5F8VcUP4HFXm35CTS2Ggav5Luifrnk/VLmwVW2Y2kzm5tZP8AVZJSq+y4q9OxV2KuxV2KuxV2&#xA;KpVc/wDKVad/zA33/J60xVK/zOSRvJ85jjeUx3enSskSNI/CLUIHchUDMeKqSaDFXkMsTXP5lWFo&#xA;aXGtXfmK8uG1SPUElL6dJY3ElpbyWKStPD9VUxhvVhUIVqpJkOKqll5f8+alP5GuLDRpLOx8vw6J&#xA;BLcRvBC8X1C59HV7e4M0qSAIqsFSKKki1JY7Lir0P8s9RndLrSpNNmhtL2TUNbjmlBREt9R1O5a1&#xA;jKMNnmjDTFf2a79cVYJp3kzzH5R0uC007Qo21bUdH1u1tbSo9I3r3qTxpJJHIqAz2cYK/GP7rjUY&#xA;qhrDyp5ottNsNK1G0udOa012/wBf04SCGVrfTYdJ9JVpZtNHHzv7kARBiep3pXFWZeUvzH8p+Vvy&#xA;v8snWbv0r+ayjS30iJGlv5pVBUxxWqAyseQ49KDuRirb+X/O/wCY7BvNUcnlnyUSGXyzFIP0hfKD&#xA;UfpCaPaGNu8MbV7MdsVZDouoxaxafovyqq6Voems1nLdRoiuhhPD0bSH4lTp/eOKAdFJNVVZPp2m&#xA;2OnWq2tlEIoVJYipZmdjVnd2JZ3Y7szEsx3JriqJxV2KuxV2KuxV2KuxV2KqdzbxXNvLbzAtFMjR&#xA;yAEqSrChoykEbHqDiqFTXdJfWpNES5VtVhgW6ltQG5LCzcFcmnHdum+Kqt3qVhZz2kFzOsU19KYL&#xA;OM/alkCNKVUDrRI2Y+wxV02p6fDqFtp0s6x3t4kklrAxo0iw8fU4ePH1FqOuKoXXPMuh6H9TGqXQ&#xA;gfULhbSyjCvJJLO4JCIkaux2Uk7UHfFVaz1nS73S/wBK2lwtxp5V3W5jqyssZIZloKsKqaU69sVe&#xA;TX/mfQdC/PjRdSsb2OSw886dFZXwSvA3CfvNNueVKMJUf0Voe4xV7NirsVdirsVdirsVSq5/5SrT&#xA;v+YG+/5PWmKpriqmttbpO9wsSLPIAskoUB2C/ZDN1NO2KqmKuxV2KuxV5h5V8l+Tx5680vPp8Ump&#xA;zXQuorz4lk9IiMtHVW6RyKD9OKsvh8g+UoQRHY8QSGP72Y7gMo6v4OcVbi8h+VInkkjsaPKCHPqz&#xA;GoJDd38Riqj5P0ay0q/8wQWLEWovYlS2LMwiP1KBmALM5+Lny7dcVZLirsVdirsVdirsVdirsVdi&#xA;ryDz/LfDzL5igs5pQWTy/PqFpa3C215cabHd3C3aW7l4mqRIqni6k8uINWFVWKeXZ9fmaS5097tJ&#xA;5bjzRpPleXU7n6zJb6jLa2jWCNcM86VX6pcIKud6ipNaqp+uoaXpUHli4OnazZXul3N1rOr/AKXl&#xA;nnuRbWOk3Ed7MpmlmBVpJo4/hKozsDirJ/Ofla480ap5X1iKyuILu3tbyaMvNJEbS4ltQYBKIn4c&#xA;hI3FuoO4NVxVjHlCVFuNE1HUbTVG8t22k6XFor2U80Vlp01kHj1BL+OKWBVaKSNRIZlYcVK+K4qx&#xA;668pDzR5b03SIz9X1G28vX2paai/DPZs2pQXWn1UAPGwhoFFAdiMVevflV52/wAY+S7PVJwI9Vh5&#xA;Wes2woPSvbc8JloOgY/Gv+SwxVl2KuxV2KuxV2KpVc/8pVp3/MDff8nrTFU1xV2KuxV2KuxV2KsH&#xA;uY49Pv5tejJpZ6q8d8aqf9HuYoo3+yTsjcW3xVnGKuxVKNDSNdT8wlSSz6hGzglTRvqFqtBQkjYD&#xA;7VD9FMVTfFXYq7FXYq7FXYq7FXYq7FVC/wBPsNQtJLO/tory0lFJbedFljYA1oyOCpxVdaWdpZ20&#xA;drZwR21tEOMUEKrHGo8FVQAMVVcVdirsVdirxCN2/LT8xbvUifT8p6tPFZa6P2LaSb/jnX58EqTb&#xA;THYD4Dir2/FXYq7FXYq7FUquf+Uq07/mBvv+T1piqa4q7FXYq7FUt1/Wn0m0jmj0681SeaQQwWdj&#xA;GryM5VmqzSNFFGlENXkdV6CtSAVUqsfOOqtqVtY6p5Y1HTBd1EN2WtbqEMO0v1WaaSMVIHNk4b7s&#xA;MVRGn2FpeW+v2b1aK6vJkn3DULwxqabbUxVW8pXs9zoscVya3tizWd3/AMZIDxr/ALJaN9OKpziq&#xA;U6LHEmpa+yGrSX6NIOQajfULVeg+z8KjY/PocVTbFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;WJeddI066ubY6lAtxpWqRvo+rQv9lobn+6J8OMn7XauKpJ+XWtaj5f1d/wAtfMs7TX9lG0vljVJu&#xA;uo6YmygtsDcWy/BKOpFG8Tir0jFXYq7FXYqlVz/ylWnf8wN9/wAnrTFU1xV2KuxV2Kse886vBYaF&#xA;LDKl2w1FZbT1dPT1rqEPBITPHCpE0vp8a0iVn70oCQq8q/K7yxoehfmBHfeWoJbmwmsWtCYNEudO&#xA;KC4eGWSS7vLwRIyI8BMaJWT4+JqFBxV6/wCX0jWbWOBBLahIXo3KjelFt0Wny3+eKoaIfo3zjJH0&#xA;ttbh9VPD6zbCjj/ZREH6MVZBiqUaGka6n5hKEFn1CMyANWjfULUUIoOPwgbb+NewVTfFXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FUDrumLqmj3dgTRp4yI2/lkG6N/sWAOKsV1vy1bef/ACdZPJM2&#xA;n69ZsLjTdUiA9ay1G3PEuteq81o6dGX6Diq/8vfPd3q8135b8yQJp3nbRgo1KyU/uriI7Je2hNC8&#xA;Ev3o3wt2qqzXFXYq7FUquf8AlKtO/wCYG+/5PWmKprirsVdirsVY7578n+XPNGiG011nggtWNxBf&#xA;RTvbSW0nptH6qyoy0okjAhqqR1GKsa/Key0iKW++o+YLrVfqDSWFvbS6mL+I20Zj9OcRKxVGPGg8&#xA;BtirMPL8aJNrBVieeoSM1QRQ+lEKbgeGKqXnC2mbSRf268rvSpFvYQO4i/vF/wBlGWGKpxbXENzb&#xA;RXMLcoZkWSNvFWFQfuOKpZocaJqfmBlapk1CNnFCKH6harTcCuyg7VxVN8VdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirH9LP6O80ajpp2g1BRqNqP8ALNI7hf8AggrfTiqD8+fl/a+aIra8tbqT&#xA;SPM2llpNF122A9aB2FCjg7SQv0kjbZh4HFUD5K/MS6utTPlPzfbJo3nW3TkLcE/VdQiUb3NhI1PU&#xA;Q7lk+0m9ehxVnWKuxVKrn/lKtO/5gb7/AJPWmKprirsVdirsVYn+ZV95Zs9AEuu20N2UdpNMtrqC&#xA;a5t2vUicw+rHCkvwgnqy7dRuBirzn8rbu313zdpbzvHq0kWltqE08+jLpM+m3ayRRpb20qJGzoyy&#xA;SK6EsKKPiINMVet+X4RHNrB+L95qEj/EpXrFENq/aG3XFU3ZVZSrAFSKEHcEHFWP+US1rHe6HIav&#xA;pUxSGvU20v7yE/QCV+jFUVokAj1LX3DE+tfo5BUqBSwtUoCftD4Oo+XbFU2xV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2Ksf83q1tFZ63GCX0mcSS03Jtpf3c4/4EhvoxVP1ZWUMpBUioI3BBxVI&#xA;vOXkjy/5v0sWGsQsTC4msr2BjFdWs67pPbTL8UcikdR9NRirDIvOPm78vnWy8/htW8tBglp52tYz&#xA;WJTsq6pbpUxkHb1kqh2rQ1xV6VY31lf2cN7Y3Ed1Z3CiSC5hdZI3RujI6kgg+2KoG5/5SrTv+YG+&#xA;/wCT1piqa4q7FXYq7FWF/mrZ+ZrjQraXQLB9RntLg3E0FtdyWN4FEEqq9rMjKhcO4DRyAq6kjrTF&#xA;Um8iaX5j1DU7S78zad5itzawi4gfVNQsHtBcfCOP1bT5Fd2o7FfXjIFOzUxVm3l+Exzawfi/eahI&#xA;/wAQA6xRDahNRt1xVN8VY9q3+47zNpupjaC+B0678OTfHbt/wQK198VRWhw+nqfmB/i/fahG/wAQ&#xA;AG1hap8Jqaj4eu2/34qm+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVTubeK5t5beZeUUyN&#xA;HIvirChH3HFUn8n3Ep0ttPuG5XelStZSk9WEf92/+yjKnFU8xVp0SRGjkUOjgq6MKgg7EEHFXnN7&#xA;+VV/od1Nqn5aamPL11MxluNCnVptFuXPUtbg8rZm7vBT/VOKpen5sHSvM+nwfmHpUnlK4W1urddQ&#xA;kYXGlzvJLbFTFdxiiD4CSJgvGoBNcVeo2d5Z3ttHd2c8dzazDlFPC6yRuvirKSCPliqtirsVdirs&#xA;VdiqTeXI+E+tGoPLUZG2INP3UQpsT+OKpziqXeYtMOp6NdWiHjMy87dxsVmQ842B/wBYDFUo8iX4&#xA;1FNY1DYNdXsTyoCPgkXT7SORCASRR0P2qHFWUYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYqx+X/cb5xim6W2tQ+jJ4fWbYcoyf8AWiJH0YqyDFXYq7FUm1C3guPMdlBcRrNBLp98skUihkZT&#xA;LaAhlNQQcVYvdfkr5ctrmW+8oXl75N1GRubto8vC0d+3q2MgktWHsEX54qp8/wA9dCoDHo/nSzQU&#xA;5Kz6Pft7kH6zan6CuKrh+cP1EhPMvlHzBojKKzXH1I6haL/z3sGuKj/YjFUVZ/nl+Ul0/pjzTZW0&#xA;m1Y712smFfFboQkfTiqeWvn7yLd0+q+Y9LuKryHpXtu9V8fhc7b4qrSecfKMaGSTW9PRF3ZmuoQA&#xA;PclsVYZqHmz8ptPv7u+k8+29o13IJprSDVICnMBfiWFCzDkIgD4/TiqUQfmR5Caq6HrPmfzNKzGk&#xA;emW95d9FZdpPQSKnxV+32BxVTWX81dVd/wDD+harp0M9OF95k1aKAJ8Qb/eO0W5m7U+0NtsVZH+V&#xA;eia/5Ym1TQ/MN9DqGpX0v6XFzbpIkZ9VUhlQeq8jHg0S7mnXpiqG0j847SLQ4L7X45Jru5F9eG20&#xA;qznm+q6fY3DWzT3FHlJHNPtCnXZaKWxVQ1j83763vI72ytBJ5f8A0jpemFfq8819LJqFidQk9KOJ&#xA;q8hFNbqq8D8Ravsqn2ifmHHrHmHT7e1iKaXqEN7CY54nivLbUtNlVZ7edSxWjRyVWg24HdgwoqlX&#xA;5l/mXrXlnzHZadp9mJLOHS7/AFvVZmgkmMkNlxVLeFkeMRvJI4DOwbjVdjXFVunfmxPY67q+h+ao&#xA;eE+mXWn2UmpWFpcGxikvrK2kDXErvIqK93cMifFULTl/MVUf5X87+YNR1fSbHUI7VDcJqttqMcUc&#xA;ilbzR7pbd5InaVx6MwcMqFSy/wAx7Ks8xV2KuxV2KuxV2KuxV2KuxV2KuxVJ/NtlNc6LLJbf722T&#xA;LeWh/wCLYDzA/wBkKr9OKphp19Df2Fvewn91cxrKnyYVp9GKojFXYqlVz/ylWnf8wN9/yetMVTXF&#xA;XYq7FVC80+wvU9O8tormMdEmRZBvTswPhiqR3P5bfl1df70+VtHn35fvLC1f4j3+KM74qop+VX5X&#xA;xuHTyfoiOpqrLptoCD4giPFU0sfKflawYNY6NY2jA1BgtoYyCe/wqMVTXFXYqx/zWPqcmn66uw06&#xA;YLdH/l2uKRyfPieLfRirzTUfym86waLDY6XMn194NS06TULS7FpG1lezG5iju0ltrl2CyyPVoGRw&#xA;NlPxEhVk7flK8shifV57a2E+nalBNZ8Unj1GwsvqDSD1FlT03hjiPEjqprUHFVkn5ValbsG0zW5Y&#xA;rlYryT9JyhTdSX+qTxtd3bemiRqUgh4QqigDlv0GKp95q/L/AE3zFPcT3NxNFJPo19oY4EELFftC&#xA;7S7/ABeojW68d8VSY/lMb69uNQ1bWrxpNWnsb3X9KtmiWwubjT4II4+IaIzRoXtlZuLjkPhNQBiq&#xA;J8ueRda03W9Lv7u7t547WPU5r0osgkkvtXuhcy8K/CIY+ARO9OuKs5xV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2Ksf8rD6jc6loTbLZTevZj/AJdrkl1A/wBR+S4qyDFXYqldyD/inTzTYWN6Ce1TNaYqmmKu&#xA;xV2KuxV2KuxV2KuxV2KqN7aQ3lnPaTCsNxG0Ug/yXFD+vFUr8oXk02jLbXJreac7WV17vAeIb/ZJ&#xA;xb6cVTrFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWP6//uP1vS9ZG0TN+j70/wDFc5rE&#xA;x8AkoH34qyDFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVqRRIzsiKrSHlIQACxpSpp1NBiq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUFrWmR6ppV1YSHiLiMqr/AMrdUb/YsAcVRFqk6WsK&#xA;XDiSdUUTSAUDOAAzAe5xVVxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//&#xA;2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:69AFF5EE68D0E011AAB6D17757F2FAF4</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:6AAFF5EE68D0E011AAB6D17757F2FAF4</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:66AFF5EE68D0E011AAB6D17757F2FAF4</stRef:instanceID>
            <stRef:documentID>uuid:65AFF5EE68D0E011AAB6D17757F2FAF4</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>186.999998</stDim:w>
            <stDim:h>166.000010</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -469.059 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 469.059 li
544.559 469.059 li
544.559 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
213 4.5293 mo
213 441.529 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
0 163.529 mo
528 163.529 li
@
3 lw
230 0.529297 mo
397 443.529 li
0.54 0.54 0.54 rgb
@
4 25.5293 mo
171 468.529 li
@
234.969 253.576 mo
234.969 234.422 li
239.36 234.422 li
239.36 235.742 li
236.601 235.742 li
236.601 252.256 li
239.36 252.256 li
239.36 253.576 li
234.969 253.576 li
cp
0 0 0 rgb
f
249.393 243.855 mo
249.393 243.495 249.369 243.183 249.273 242.895 cv
248.889 241.671 247.856 240.663 246.32 240.663 cv
244.305 240.663 242.864 242.367 242.864 245.056 cv
242.864 247.335 244.017 249.231 246.297 249.231 cv
247.593 249.231 248.769 248.415 249.225 247.071 cv
249.345 246.711 249.393 246.304 249.393 245.943 cv
249.393 243.855 li
cp
251.48 249.208 mo
251.48 251.872 250.953 253.504 249.825 254.512 cv
248.697 255.568 247.064 255.904 245.601 255.904 cv
244.209 255.904 242.673 255.568 241.736 254.944 cv
242.265 253.336 li
243.032 253.816 244.232 254.248 245.673 254.248 cv
247.833 254.248 249.417 253.12 249.417 250.191 cv
249.417 248.896 li
249.369 248.896 li
248.721 249.976 247.473 250.84 245.673 250.84 cv
242.792 250.84 240.729 248.392 240.729 245.175 cv
240.729 241.239 243.297 239.007 245.961 239.007 cv
247.977 239.007 249.081 240.063 249.585 241.022 cv
249.633 241.022 li
249.729 239.271 li
251.577 239.271 li
251.529 240.11 251.48 241.047 251.48 242.463 cv
251.48 249.208 li
cp
f
259.568 234.23 mo
257.815 236.582 256.544 239.703 256.544 244.047 cv
256.544 248.319 257.864 251.392 259.568 253.792 cv
257.912 253.792 li
256.399 251.8 254.768 248.728 254.768 244.047 cv
254.792 239.318 256.399 236.246 257.912 234.23 cv
259.568 234.23 li
cp
f
267.921 244.959 mo
265.616 244.911 263 245.319 263 247.575 cv
263 248.943 263.912 249.592 264.992 249.592 cv
266.505 249.592 267.465 248.632 267.801 247.647 cv
267.872 247.432 267.921 247.191 267.921 246.976 cv
267.921 244.959 li
cp
269.961 248.104 mo
269.961 249.111 270.009 250.096 270.152 250.888 cv
268.232 250.888 li
268.064 249.424 li
267.992 249.424 li
267.345 250.336 266.097 251.151 264.44 251.151 cv
262.088 251.151 260.888 249.495 260.888 247.815 cv
260.888 245.007 263.384 243.471 267.872 243.495 cv
267.872 243.255 li
267.872 242.295 267.608 240.566 265.232 240.566 cv
264.152 240.566 263.024 240.902 262.208 241.431 cv
261.728 240.039 li
262.688 239.415 264.08 239.007 265.544 239.007 cv
269.097 239.007 269.961 241.431 269.961 243.759 cv
269.961 248.104 li
cp
f
272.096 253.792 mo
273.8 251.416 275.119 248.296 275.119 243.975 cv
275.119 239.679 273.823 236.606 272.096 234.23 cv
273.728 234.23 li
275.264 236.198 276.872 239.271 276.872 243.999 cv
276.872 248.703 275.264 251.752 273.728 253.792 cv
272.096 253.792 li
cp
f
278.84 253.84 mo
279.344 252.424 279.992 249.855 280.256 248.104 cv
282.608 247.863 li
282.056 249.903 281 252.567 280.328 253.696 cv
278.84 253.84 li
cp
f
290.454 250.888 mo
290.454 240.879 li
288.822 240.879 li
288.822 239.271 li
290.454 239.271 li
290.454 238.719 li
290.454 237.087 290.814 235.599 291.799 234.662 cv
292.591 233.895 293.646 233.582 294.631 233.582 cv
295.375 233.582 296.023 233.75 296.431 233.918 cv
296.143 235.551 li
295.831 235.406 295.398 235.286 294.799 235.286 cv
292.999 235.286 292.543 236.87 292.543 238.646 cv
292.543 239.271 li
295.351 239.271 li
295.351 240.879 li
292.543 240.879 li
292.543 250.888 li
290.454 250.888 li
cp
f
301.831 234.23 mo
300.078 236.582 298.807 239.703 298.807 244.047 cv
298.807 248.319 300.127 251.392 301.831 253.792 cv
300.175 253.792 li
298.662 251.8 297.03 248.728 297.03 244.047 cv
297.055 239.318 298.662 236.246 300.175 234.23 cv
301.831 234.23 li
cp
f
310.184 244.959 mo
307.879 244.911 305.263 245.319 305.263 247.575 cv
305.263 248.943 306.175 249.592 307.255 249.592 cv
308.768 249.592 309.728 248.632 310.063 247.647 cv
310.135 247.432 310.184 247.191 310.184 246.976 cv
310.184 244.959 li
cp
312.224 248.104 mo
312.224 249.111 312.271 250.096 312.415 250.888 cv
310.495 250.888 li
310.327 249.424 li
310.255 249.424 li
309.607 250.336 308.359 251.151 306.703 251.151 cv
304.351 251.151 303.15 249.495 303.15 247.815 cv
303.15 245.007 305.646 243.471 310.135 243.495 cv
310.135 243.255 li
310.135 242.295 309.871 240.566 307.495 240.566 cv
306.415 240.566 305.287 240.902 304.471 241.431 cv
303.99 240.039 li
304.951 239.415 306.343 239.007 307.807 239.007 cv
311.359 239.007 312.224 241.431 312.224 243.759 cv
312.224 248.104 li
cp
f
314.359 253.792 mo
316.063 251.416 317.383 248.296 317.383 243.975 cv
317.383 239.679 316.087 236.606 314.359 234.23 cv
315.991 234.23 li
317.527 236.198 319.136 239.271 319.136 243.999 cv
319.136 248.703 317.527 251.752 315.991 253.792 cv
314.359 253.792 li
cp
f
325.543 234.422 mo
325.543 253.576 li
321.15 253.576 li
321.15 252.256 li
323.91 252.256 li
323.91 235.742 li
321.15 235.742 li
321.15 234.422 li
325.543 234.422 li
cp
f
316.895 369.727 mo
306.887 369.727 li
306.887 371.359 li
305.277 371.359 li
305.277 369.727 li
304.727 369.727 li
303.094 369.727 301.605 369.367 300.67 368.383 cv
299.902 367.591 299.59 366.535 299.59 365.551 cv
299.59 364.807 299.758 364.158 299.926 363.75 cv
301.559 364.039 li
301.414 364.351 301.293 364.783 301.293 365.383 cv
301.293 367.184 302.877 367.639 304.654 367.639 cv
305.277 367.639 li
305.277 364.83 li
306.887 364.83 li
306.887 367.639 li
316.895 367.639 li
316.895 369.727 li
cp
f
300.238 358.352 mo
302.59 360.104 305.711 361.375 310.055 361.375 cv
314.326 361.375 317.398 360.055 319.799 358.352 cv
319.799 360.008 li
317.807 361.52 314.734 363.151 310.055 363.151 cv
305.326 363.127 302.254 361.52 300.238 360.008 cv
300.238 358.352 li
cp
f
312.238 354.031 mo
312.502 354.031 312.768 353.983 313.006 353.936 cv
314.471 353.527 315.479 352.303 315.479 350.767 cv
315.479 348.559 313.68 347.238 311.014 347.238 cv
308.686 347.238 306.693 348.438 306.693 350.695 cv
306.693 352.135 307.678 353.479 309.287 353.911 cv
309.527 353.959 309.814 354.031 310.15 354.031 cv
312.238 354.031 li
cp
299.854 356.119 mo
299.854 354.031 li
307.15 354.031 li
307.15 353.983 li
305.854 353.239 305.014 351.896 305.014 350.022 cv
305.014 347.143 307.414 345.103 310.943 345.127 cv
315.096 345.127 317.158 347.743 317.158 350.335 cv
317.158 352.015 316.512 353.359 314.975 354.223 cv
314.975 354.295 li
316.895 354.391 li
316.895 356.215 li
316.104 356.168 314.928 356.119 313.895 356.119 cv
299.854 356.119 li
cp
f
319.799 343.808 mo
317.424 342.104 314.303 340.784 309.982 340.784 cv
305.686 340.784 302.613 342.08 300.238 343.808 cv
300.238 342.176 li
302.205 340.64 305.277 339.031 310.006 339.031 cv
314.711 339.031 317.76 340.64 319.799 342.176 cv
319.799 343.808 li
cp
f
309.623 330.823 mo
311.182 330.823 li
311.182 336.752 li
309.623 336.752 li
309.623 330.823 li
cp
f
316.895 328.136 mo
306.887 328.136 li
306.887 329.768 li
305.277 329.768 li
305.277 328.136 li
304.727 328.136 li
303.094 328.136 301.605 327.775 300.67 326.791 cv
299.902 325.999 299.59 324.943 299.59 323.959 cv
299.59 323.215 299.758 322.566 299.926 322.159 cv
301.559 322.447 li
301.414 322.759 301.293 323.191 301.293 323.791 cv
301.293 325.591 302.877 326.047 304.654 326.047 cv
305.277 326.047 li
305.277 323.239 li
306.887 323.239 li
306.887 326.047 li
316.895 326.047 li
316.895 328.136 li
cp
f
300.238 316.759 mo
302.59 318.512 305.711 319.783 310.055 319.783 cv
314.326 319.783 317.398 318.463 319.799 316.759 cv
319.799 318.415 li
317.807 319.928 314.734 321.56 310.055 321.56 cv
305.326 321.535 302.254 319.928 300.238 318.415 cv
300.238 316.759 li
cp
f
310.967 308.407 mo
310.918 310.712 311.326 313.328 313.582 313.328 cv
314.951 313.328 315.6 312.416 315.6 311.336 cv
315.6 309.823 314.639 308.863 313.654 308.527 cv
313.439 308.456 313.199 308.407 312.982 308.407 cv
310.967 308.407 li
cp
314.111 306.367 mo
315.119 306.367 316.104 306.319 316.895 306.176 cv
316.895 308.096 li
315.432 308.264 li
315.432 308.336 li
316.344 308.983 317.158 310.231 317.158 311.888 cv
317.158 314.24 315.502 315.44 313.822 315.44 cv
311.014 315.44 309.479 312.944 309.502 308.456 cv
309.262 308.456 li
308.303 308.456 306.574 308.72 306.574 311.096 cv
306.574 312.176 306.91 313.304 307.438 314.12 cv
306.047 314.601 li
305.422 313.64 305.014 312.248 305.014 310.784 cv
305.014 307.231 307.438 306.367 309.766 306.367 cv
314.111 306.367 li
cp
f
319.799 304.232 mo
317.424 302.528 314.303 301.209 309.982 301.209 cv
305.686 301.209 302.613 302.505 300.238 304.232 cv
300.238 302.601 li
302.205 301.064 305.277 299.456 310.006 299.456 cv
314.711 299.456 317.76 301.064 319.799 302.601 cv
319.799 304.232 li
cp
f
394.578 225.689 mo
394.578 225.329 394.555 225.016 394.459 224.728 cv
394.074 223.504 393.043 222.497 391.506 222.497 cv
389.49 222.497 388.051 224.201 388.051 226.889 cv
388.051 229.168 389.202 231.065 391.482 231.065 cv
392.779 231.065 393.955 230.249 394.41 228.905 cv
394.531 228.544 394.578 228.137 394.578 227.777 cv
394.578 225.689 li
cp
396.667 231.042 mo
396.667 233.706 396.139 235.337 395.011 236.345 cv
393.883 237.401 392.25 237.737 390.787 237.737 cv
389.395 237.737 387.858 237.401 386.922 236.777 cv
387.45 235.169 li
388.219 235.65 389.418 236.082 390.858 236.082 cv
393.019 236.082 394.603 234.954 394.603 232.025 cv
394.603 230.729 li
394.555 230.729 li
393.906 231.809 392.658 232.673 390.858 232.673 cv
387.979 232.673 385.914 230.225 385.914 227.008 cv
385.914 223.073 388.482 220.84 391.146 220.84 cv
393.162 220.84 394.267 221.896 394.771 222.856 cv
394.818 222.856 li
394.915 221.104 li
396.764 221.104 li
396.715 221.944 396.667 222.88 396.667 224.296 cv
396.667 231.042 li
cp
f
404.755 216.064 mo
403.002 218.416 401.73 221.537 401.73 225.88 cv
401.73 230.153 403.051 233.225 404.755 235.625 cv
403.099 235.625 li
401.586 233.633 399.954 230.561 399.954 225.88 cv
399.979 221.152 401.586 218.08 403.099 216.064 cv
404.755 216.064 li
cp
f
409.074 228.065 mo
409.074 228.329 409.122 228.593 409.17 228.833 cv
409.578 230.297 410.802 231.305 412.338 231.305 cv
414.546 231.305 415.866 229.505 415.866 226.84 cv
415.866 224.512 414.666 222.52 412.41 222.52 cv
410.97 222.52 409.626 223.504 409.193 225.113 cv
409.146 225.353 409.074 225.64 409.074 225.977 cv
409.074 228.065 li
cp
406.985 215.68 mo
409.074 215.68 li
409.074 222.976 li
409.122 222.976 li
409.866 221.68 411.21 220.84 413.082 220.84 cv
415.962 220.84 418.003 223.241 417.979 226.769 cv
417.979 230.921 415.362 232.985 412.771 232.985 cv
411.09 232.985 409.746 232.337 408.882 230.801 cv
408.81 230.801 li
408.714 232.721 li
406.89 232.721 li
406.938 231.929 406.985 230.753 406.985 229.721 cv
406.985 215.68 li
cp
f
419.298 235.625 mo
421.002 233.25 422.321 230.129 422.321 225.808 cv
422.321 221.512 421.025 218.44 419.298 216.064 cv
420.93 216.064 li
422.466 218.032 424.074 221.104 424.074 225.833 cv
424.074 230.537 422.466 233.585 420.93 235.625 cv
419.298 235.625 li
cp
f
432.282 225.449 mo
432.282 227.008 li
426.354 227.008 li
426.354 225.449 li
432.282 225.449 li
cp
f
442.914 225.689 mo
442.914 225.329 442.89 225.016 442.794 224.728 cv
442.41 223.504 441.378 222.497 439.842 222.497 cv
437.825 222.497 436.385 224.201 436.385 226.889 cv
436.385 229.168 437.537 231.065 439.817 231.065 cv
441.113 231.065 442.29 230.249 442.746 228.905 cv
442.866 228.544 442.914 228.137 442.914 227.777 cv
442.914 225.689 li
cp
445.002 231.042 mo
445.002 233.706 444.474 235.337 443.346 236.345 cv
442.218 237.401 440.586 237.737 439.121 237.737 cv
437.729 237.737 436.193 237.401 435.257 236.777 cv
435.785 235.169 li
436.553 235.65 437.753 236.082 439.193 236.082 cv
441.354 236.082 442.938 234.954 442.938 232.025 cv
442.938 230.729 li
442.89 230.729 li
442.241 231.809 440.993 232.673 439.193 232.673 cv
436.313 232.673 434.249 230.225 434.249 227.008 cv
434.249 223.073 436.817 220.84 439.481 220.84 cv
441.498 220.84 442.602 221.896 443.105 222.856 cv
443.153 222.856 li
443.25 221.104 li
445.098 221.104 li
445.05 221.944 445.002 222.88 445.002 224.296 cv
445.002 231.042 li
cp
f
453.09 216.064 mo
451.337 218.416 450.065 221.537 450.065 225.88 cv
450.065 230.153 451.386 233.225 453.09 235.625 cv
451.434 235.625 li
449.921 233.633 448.289 230.561 448.289 225.88 cv
448.313 221.152 449.921 218.08 451.434 216.064 cv
453.09 216.064 li
cp
f
461.441 226.792 mo
459.137 226.745 456.521 227.153 456.521 229.409 cv
456.521 230.777 457.433 231.425 458.513 231.425 cv
460.025 231.425 460.985 230.465 461.321 229.481 cv
461.393 229.265 461.441 229.025 461.441 228.809 cv
461.441 226.792 li
cp
463.481 229.937 mo
463.481 230.945 463.529 231.929 463.673 232.721 cv
461.753 232.721 li
461.585 231.257 li
461.513 231.257 li
460.865 232.169 459.617 232.985 457.961 232.985 cv
455.608 232.985 454.408 231.329 454.408 229.649 cv
454.408 226.84 456.904 225.304 461.393 225.329 cv
461.393 225.088 li
461.393 224.128 461.129 222.4 458.753 222.4 cv
457.673 222.4 456.545 222.736 455.729 223.264 cv
455.248 221.873 li
456.209 221.249 457.601 220.84 459.064 220.84 cv
462.617 220.84 463.481 223.264 463.481 225.592 cv
463.481 229.937 li
cp
f
465.617 235.625 mo
467.321 233.25 468.641 230.129 468.641 225.808 cv
468.641 221.512 467.345 218.44 465.617 216.064 cv
467.249 216.064 li
468.785 218.032 470.394 221.104 470.394 225.833 cv
470.394 230.537 468.785 233.585 467.249 235.625 cv
465.617 235.625 li
cp
f
392.969 417.576 mo
392.969 398.422 li
397.36 398.422 li
397.36 399.742 li
394.601 399.742 li
394.601 416.256 li
397.36 416.256 li
397.36 417.576 li
392.969 417.576 li
cp
f
407.393 407.855 mo
407.393 407.495 407.369 407.183 407.273 406.895 cv
406.889 405.671 405.856 404.663 404.32 404.663 cv
402.305 404.663 400.864 406.367 400.864 409.056 cv
400.864 411.335 402.017 413.231 404.297 413.231 cv
405.593 413.231 406.769 412.415 407.225 411.071 cv
407.345 410.711 407.393 410.304 407.393 409.943 cv
407.393 407.855 li
cp
409.48 413.208 mo
409.48 415.872 408.953 417.504 407.825 418.512 cv
406.697 419.568 405.064 419.904 403.601 419.904 cv
402.209 419.904 400.673 419.568 399.736 418.944 cv
400.265 417.336 li
401.032 417.816 402.232 418.248 403.673 418.248 cv
405.833 418.248 407.417 417.12 407.417 414.191 cv
407.417 412.896 li
407.369 412.896 li
406.721 413.976 405.473 414.84 403.673 414.84 cv
400.792 414.84 398.729 412.392 398.729 409.175 cv
398.729 405.239 401.297 403.007 403.961 403.007 cv
405.977 403.007 407.081 404.063 407.585 405.022 cv
407.633 405.022 li
407.729 403.271 li
409.577 403.271 li
409.529 404.11 409.48 405.047 409.48 406.463 cv
409.48 413.208 li
cp
f
417.568 398.23 mo
415.815 400.582 414.544 403.703 414.544 408.047 cv
414.544 412.319 415.864 415.392 417.568 417.792 cv
415.912 417.792 li
414.399 415.8 412.768 412.728 412.768 408.047 cv
412.792 403.318 414.399 400.246 415.912 398.23 cv
417.568 398.23 li
cp
f
421.889 410.231 mo
421.889 410.495 421.937 410.76 421.984 410.999 cv
422.393 412.464 423.616 413.472 425.152 413.472 cv
427.36 413.472 428.681 411.672 428.681 409.007 cv
428.681 406.679 427.48 404.687 425.225 404.687 cv
423.784 404.687 422.44 405.671 422.008 407.279 cv
421.96 407.52 421.889 407.807 421.889 408.144 cv
421.889 410.231 li
cp
419.8 397.847 mo
421.889 397.847 li
421.889 405.143 li
421.937 405.143 li
422.681 403.847 424.024 403.007 425.896 403.007 cv
428.776 403.007 430.817 405.407 430.793 408.936 cv
430.793 413.088 428.177 415.151 425.585 415.151 cv
423.904 415.151 422.561 414.504 421.696 412.968 cv
421.624 412.968 li
421.528 414.888 li
419.704 414.888 li
419.752 414.096 419.8 412.92 419.8 411.888 cv
419.8 397.847 li
cp
f
432.112 417.792 mo
433.816 415.416 435.136 412.296 435.136 407.975 cv
435.136 403.679 433.84 400.606 432.112 398.23 cv
433.744 398.23 li
435.28 400.198 436.889 403.271 436.889 407.999 cv
436.889 412.703 435.28 415.752 433.744 417.792 cv
432.112 417.792 li
cp
f
438.855 417.84 mo
439.359 416.424 440.008 413.855 440.271 412.104 cv
442.624 411.863 li
442.071 413.903 441.016 416.567 440.344 417.696 cv
438.855 417.84 li
cp
f
450.471 414.888 mo
450.471 404.879 li
448.839 404.879 li
448.839 403.271 li
450.471 403.271 li
450.471 402.719 li
450.471 401.087 450.831 399.599 451.815 398.662 cv
452.607 397.895 453.663 397.582 454.647 397.582 cv
455.392 397.582 456.04 397.75 456.447 397.918 cv
456.159 399.551 li
455.848 399.406 455.416 399.286 454.815 399.286 cv
453.016 399.286 452.56 400.87 452.56 402.646 cv
452.56 403.271 li
455.367 403.271 li
455.367 404.879 li
452.56 404.879 li
452.56 414.888 li
450.471 414.888 li
cp
f
461.848 398.23 mo
460.095 400.582 458.823 403.703 458.823 408.047 cv
458.823 412.319 460.144 415.392 461.848 417.792 cv
460.191 417.792 li
458.679 415.8 457.047 412.728 457.047 408.047 cv
457.071 403.318 458.679 400.246 460.191 398.23 cv
461.848 398.23 li
cp
f
466.166 410.231 mo
466.166 410.495 466.215 410.76 466.263 410.999 cv
466.671 412.464 467.895 413.472 469.431 413.472 cv
471.639 413.472 472.959 411.672 472.959 409.007 cv
472.959 406.679 471.759 404.687 469.503 404.687 cv
468.063 404.687 466.719 405.671 466.286 407.279 cv
466.238 407.52 466.166 407.807 466.166 408.144 cv
466.166 410.231 li
cp
464.078 397.847 mo
466.166 397.847 li
466.166 405.143 li
466.215 405.143 li
466.959 403.847 468.303 403.007 470.175 403.007 cv
473.055 403.007 475.096 405.407 475.071 408.936 cv
475.071 413.088 472.455 415.151 469.863 415.151 cv
468.183 415.151 466.839 414.504 465.975 412.968 cv
465.902 412.968 li
465.807 414.888 li
463.982 414.888 li
464.03 414.096 464.078 412.92 464.078 411.888 cv
464.078 397.847 li
cp
f
476.391 417.792 mo
478.095 415.416 479.414 412.296 479.414 407.975 cv
479.414 403.679 478.118 400.606 476.391 398.23 cv
478.022 398.23 li
479.559 400.198 481.167 403.271 481.167 407.999 cv
481.167 412.703 479.559 415.752 478.022 417.792 cv
476.391 417.792 li
cp
f
487.575 398.422 mo
487.575 417.576 li
483.183 417.576 li
483.183 416.256 li
485.942 416.256 li
485.942 399.742 li
483.183 399.742 li
483.183 398.422 li
487.575 398.422 li
cp
f
5.96875 288.576 mo
5.96875 269.422 li
10.3604 269.422 li
10.3604 270.742 li
7.60059 270.742 li
7.60059 287.256 li
10.3604 287.256 li
10.3604 288.576 li
5.96875 288.576 li
cp
f
20.3926 278.855 mo
20.3926 278.495 20.3691 278.183 20.2734 277.895 cv
19.8887 276.671 18.8564 275.663 17.3203 275.663 cv
15.3047 275.663 13.8643 277.367 13.8643 280.056 cv
13.8643 282.335 15.0166 284.231 17.2969 284.231 cv
18.5928 284.231 19.7686 283.415 20.2246 282.071 cv
20.3447 281.711 20.3926 281.304 20.3926 280.943 cv
20.3926 278.855 li
cp
22.4805 284.208 mo
22.4805 286.872 21.9531 288.504 20.8252 289.512 cv
19.6973 290.568 18.0645 290.904 16.6006 290.904 cv
15.209 290.904 13.6729 290.568 12.7363 289.944 cv
13.2646 288.336 li
14.0322 288.816 15.2324 289.248 16.6729 289.248 cv
18.833 289.248 20.417 288.12 20.417 285.191 cv
20.417 283.896 li
20.3691 283.896 li
19.7207 284.976 18.4727 285.84 16.6729 285.84 cv
13.792 285.84 11.7285 283.392 11.7285 280.175 cv
11.7285 276.239 14.2969 274.007 16.9609 274.007 cv
18.9766 274.007 20.0811 275.063 20.585 276.022 cv
20.6328 276.022 li
20.7295 274.271 li
22.5771 274.271 li
22.5293 275.11 22.4805 276.047 22.4805 277.463 cv
22.4805 284.208 li
cp
f
30.5684 269.23 mo
28.8154 271.582 27.5439 274.703 27.5439 279.047 cv
27.5439 283.319 28.8643 286.392 30.5684 288.792 cv
28.9121 288.792 li
27.3994 286.8 25.7676 283.728 25.7676 279.047 cv
25.792 274.318 27.3994 271.246 28.9121 269.23 cv
30.5684 269.23 li
cp
f
41.0811 285.456 mo
40.5283 285.744 39.3047 286.151 37.7441 286.151 cv
34.2402 286.151 31.96 283.752 31.96 280.199 cv
31.96 276.623 34.4082 274.03 38.2002 274.03 cv
39.4482 274.03 40.5527 274.343 41.1289 274.631 cv
40.6484 276.263 li
40.1445 275.975 39.3525 275.711 38.2002 275.711 cv
35.5361 275.711 34.0957 277.679 34.0957 280.104 cv
34.0957 282.791 35.8242 284.447 38.1289 284.447 cv
39.3281 284.447 40.1211 284.136 40.7207 283.871 cv
41.0811 285.456 li
cp
f
42.2803 288.792 mo
43.9844 286.416 45.3037 283.296 45.3037 278.975 cv
45.3037 274.679 44.0078 271.606 42.2803 269.23 cv
43.9121 269.23 li
45.4482 271.198 47.0566 274.271 47.0566 278.999 cv
47.0566 283.703 45.4482 286.752 43.9121 288.792 cv
42.2803 288.792 li
cp
f
49.0234 288.84 mo
49.5273 287.424 50.1758 284.855 50.4395 283.104 cv
52.792 282.863 li
52.2393 284.903 51.1836 287.567 50.5117 288.696 cv
49.0234 288.84 li
cp
f
60.6387 285.888 mo
60.6387 275.879 li
59.0068 275.879 li
59.0068 274.271 li
60.6387 274.271 li
60.6387 273.719 li
60.6387 272.087 60.999 270.599 61.9834 269.662 cv
62.7754 268.895 63.8311 268.582 64.8154 268.582 cv
65.5596 268.582 66.208 268.75 66.6152 268.918 cv
66.3271 270.551 li
66.0156 270.406 65.584 270.286 64.9834 270.286 cv
63.1836 270.286 62.7275 271.87 62.7275 273.646 cv
62.7275 274.271 li
65.5352 274.271 li
65.5352 275.879 li
62.7275 275.879 li
62.7275 285.888 li
60.6387 285.888 li
cp
f
72.0156 269.23 mo
70.2627 271.582 68.9912 274.703 68.9912 279.047 cv
68.9912 283.319 70.3115 286.392 72.0156 288.792 cv
70.3594 288.792 li
68.8467 286.8 67.2148 283.728 67.2148 279.047 cv
67.2393 274.318 68.8467 271.246 70.3594 269.23 cv
72.0156 269.23 li
cp
f
82.5273 285.456 mo
81.9746 285.744 80.751 286.151 79.1904 286.151 cv
75.6865 286.151 73.4063 283.752 73.4063 280.199 cv
73.4063 276.623 75.8545 274.03 79.6465 274.03 cv
80.8945 274.03 81.999 274.343 82.5752 274.631 cv
82.0947 276.263 li
81.5908 275.975 80.7988 275.711 79.6465 275.711 cv
76.9824 275.711 75.542 277.679 75.542 280.104 cv
75.542 282.791 77.2705 284.447 79.5752 284.447 cv
80.7744 284.447 81.5674 284.136 82.167 283.871 cv
82.5273 285.456 li
cp
f
83.7266 288.792 mo
85.4307 286.416 86.75 283.296 86.75 278.975 cv
86.75 274.679 85.4541 271.606 83.7266 269.23 cv
85.3584 269.23 li
86.8945 271.198 88.5029 274.271 88.5029 278.999 cv
88.5029 283.703 86.8945 286.752 85.3584 288.792 cv
83.7266 288.792 li
cp
f
94.9111 269.422 mo
94.9111 288.576 li
90.5186 288.576 li
90.5186 287.256 li
93.2783 287.256 li
93.2783 270.742 li
90.5186 270.742 li
90.5186 269.422 li
94.9111 269.422 li
cp
f
380.173 398.007 mo
263.423 435.12 136.725 374.735 92.9087 258.773 cv
56.6597 162.837 105.046 55.6763 200.982 19.4268 cv
277.731 -9.57275 363.46 29.1353 392.458 105.886 cv
415.075 165.74 386.217 232.419 327.872 257.23 cv
@
544.549 238.486 mo
544.549 229.032 li
543.049 229.032 li
543.049 238.486 li
544.549 238.486 li
cp
0.137255 0.121569 0.12549 rgb
f
544.559 241.803 mo
543.059 241.803 li
543.059 239.912 li
544.559 239.912 li
544.559 241.803 li
cp
f
544.559 227.622 mo
543.059 227.622 li
543.059 225.731 li
544.559 225.731 li
544.559 227.622 li
cp
f
544.549 220.937 mo
544.549 211.483 li
543.049 211.483 li
543.049 220.937 li
544.549 220.937 li
cp
f
544.559 224.254 mo
543.059 224.254 li
543.059 222.363 li
544.559 222.363 li
544.559 224.254 li
cp
f
544.559 210.073 mo
543.059 210.073 li
543.059 208.182 li
544.559 208.182 li
544.559 210.073 li
cp
f
544.549 203.388 mo
544.549 193.934 li
543.049 193.934 li
543.049 203.388 li
544.549 203.388 li
cp
f
544.559 206.705 mo
543.059 206.705 li
543.059 204.814 li
544.559 204.814 li
544.559 206.705 li
cp
f
544.559 192.524 mo
543.059 192.524 li
543.059 190.633 li
544.559 190.633 li
544.559 192.524 li
cp
f
544.549 185.839 mo
544.549 176.385 li
543.049 176.385 li
543.049 185.839 li
544.549 185.839 li
cp
f
544.559 189.156 mo
543.059 189.156 li
543.059 187.265 li
544.559 187.265 li
544.559 189.156 li
cp
f
544.559 174.975 mo
543.059 174.975 li
543.059 173.084 li
544.559 173.084 li
544.559 174.975 li
cp
f
544.549 168.29 mo
544.549 158.836 li
543.049 158.836 li
543.049 168.29 li
544.549 168.29 li
cp
f
544.559 171.607 mo
543.059 171.607 li
543.059 169.716 li
544.559 169.716 li
544.559 171.607 li
cp
f
544.559 157.426 mo
543.059 157.426 li
543.059 155.535 li
544.559 155.535 li
544.559 157.426 li
cp
f
544.549 150.741 mo
544.549 141.287 li
543.049 141.287 li
543.049 150.741 li
544.549 150.741 li
cp
f
544.559 154.058 mo
543.059 154.058 li
543.059 152.167 li
544.559 152.167 li
544.559 154.058 li
cp
f
544.559 139.877 mo
543.059 139.877 li
543.059 137.986 li
544.559 137.986 li
544.559 139.877 li
cp
f
544.549 133.192 mo
544.549 123.738 li
543.049 123.738 li
543.049 133.192 li
544.549 133.192 li
cp
f
544.559 136.509 mo
543.059 136.509 li
543.059 134.618 li
544.559 134.618 li
544.559 136.509 li
cp
f
544.559 122.328 mo
543.059 122.328 li
543.059 120.437 li
544.559 120.437 li
544.559 122.328 li
cp
f
328.617 383.972 mo
328.617 374.482 li
327.117 374.482 li
327.117 383.972 li
328.617 383.972 li
cp
f
328.629 387.301 mo
327.129 387.301 li
327.129 385.402 li
328.629 385.402 li
328.629 387.301 li
cp
f
328.629 373.066 mo
327.129 373.066 li
327.129 371.169 li
328.629 371.169 li
328.629 373.066 li
cp
f
328.617 366.357 mo
328.617 356.868 li
327.117 356.868 li
327.117 366.357 li
328.617 366.357 li
cp
f
328.629 369.687 mo
327.129 369.687 li
327.129 367.788 li
328.629 367.788 li
328.629 369.687 li
cp
f
328.629 355.452 mo
327.129 355.452 li
327.129 353.555 li
328.629 353.555 li
328.629 355.452 li
cp
f
328.617 348.743 mo
328.617 339.254 li
327.117 339.254 li
327.117 348.743 li
328.617 348.743 li
cp
f
328.629 352.072 mo
327.129 352.072 li
327.129 350.174 li
328.629 350.174 li
328.629 352.072 li
cp
f
328.629 337.838 mo
327.129 337.838 li
327.129 335.94 li
328.629 335.94 li
328.629 337.838 li
cp
f
328.617 331.129 mo
328.617 321.64 li
327.117 321.64 li
327.117 331.129 li
328.617 331.129 li
cp
f
328.629 334.458 mo
327.129 334.458 li
327.129 332.56 li
328.629 332.56 li
328.629 334.458 li
cp
f
328.629 320.224 mo
327.129 320.224 li
327.129 318.326 li
328.629 318.326 li
328.629 320.224 li
cp
f
328.617 313.515 mo
328.617 304.025 li
327.117 304.025 li
327.117 313.515 li
328.617 313.515 li
cp
f
328.629 316.844 mo
327.129 316.844 li
327.129 314.945 li
328.629 314.945 li
328.629 316.844 li
cp
f
328.629 302.609 mo
327.129 302.609 li
327.129 300.712 li
328.629 300.712 li
328.629 302.609 li
cp
f
328.617 295.9 mo
328.617 286.411 li
327.117 286.411 li
327.117 295.9 li
328.617 295.9 li
cp
f
328.629 299.229 mo
327.129 299.229 li
327.129 297.331 li
328.629 297.331 li
328.629 299.229 li
cp
f
328.629 284.995 mo
327.129 284.995 li
327.129 283.098 li
328.629 283.098 li
328.629 284.995 li
cp
f
328.617 278.286 mo
328.617 268.797 li
327.117 268.797 li
327.117 278.286 li
328.617 278.286 li
cp
f
328.629 281.615 mo
327.129 281.615 li
327.129 279.717 li
328.629 279.717 li
328.629 281.615 li
cp
f
328.629 267.381 mo
327.129 267.381 li
327.129 265.483 li
328.629 265.483 li
328.629 267.381 li
cp
f
339.648 257.977 mo
349.65 257.977 li
349.65 256.477 li
339.648 256.477 li
339.648 257.977 li
cp
f
336.141 257.986 mo
336.141 256.486 li
338.141 256.486 li
338.141 257.986 li
336.141 257.986 li
cp
f
351.142 257.986 mo
351.142 256.486 li
353.142 256.486 li
353.142 257.986 li
351.142 257.986 li
cp
f
358.213 257.977 mo
368.215 257.977 li
368.215 256.477 li
358.213 256.477 li
358.213 257.977 li
cp
f
354.705 257.986 mo
354.705 256.486 li
356.705 256.486 li
356.705 257.986 li
354.705 257.986 li
cp
f
369.706 257.986 mo
369.706 256.486 li
371.706 256.486 li
371.706 257.986 li
369.706 257.986 li
cp
f
379.254 268.788 mo
379.254 278.277 li
380.754 278.277 li
380.754 268.788 li
379.254 268.788 li
cp
f
379.244 265.459 mo
380.744 265.459 li
380.744 267.357 li
379.244 267.357 li
379.244 265.459 li
cp
f
379.244 279.693 mo
380.744 279.693 li
380.744 281.591 li
379.244 281.591 li
379.244 279.693 li
cp
f
379.254 286.402 mo
379.254 295.892 li
380.754 295.892 li
380.754 286.402 li
379.254 286.402 li
cp
f
379.244 283.073 mo
380.744 283.073 li
380.744 284.972 li
379.244 284.972 li
379.244 283.073 li
cp
f
379.244 297.308 mo
380.744 297.308 li
380.744 299.205 li
379.244 299.205 li
379.244 297.308 li
cp
f
379.254 304.017 mo
379.254 313.506 li
380.754 313.506 li
380.754 304.017 li
379.254 304.017 li
cp
f
379.244 300.688 mo
380.744 300.688 li
380.744 302.586 li
379.244 302.586 li
379.244 300.688 li
cp
f
379.244 314.922 mo
380.744 314.922 li
380.744 316.819 li
379.244 316.819 li
379.244 314.922 li
cp
f
379.254 321.631 mo
379.254 331.12 li
380.754 331.12 li
380.754 321.631 li
379.254 321.631 li
cp
f
379.244 318.302 mo
380.744 318.302 li
380.744 320.2 li
379.244 320.2 li
379.244 318.302 li
cp
f
379.244 332.536 mo
380.744 332.536 li
380.744 334.434 li
379.244 334.434 li
379.244 332.536 li
cp
f
379.254 339.245 mo
379.254 348.734 li
380.754 348.734 li
380.754 339.245 li
379.254 339.245 li
cp
f
379.244 335.916 mo
380.744 335.916 li
380.744 337.814 li
379.244 337.814 li
379.244 335.916 li
cp
f
379.244 350.15 mo
380.744 350.15 li
380.744 352.048 li
379.244 352.048 li
379.244 350.15 li
cp
f
379.254 356.859 mo
379.254 366.349 li
380.754 366.349 li
380.754 356.859 li
379.254 356.859 li
cp
f
379.244 353.53 mo
380.744 353.53 li
380.744 355.429 li
379.244 355.429 li
379.244 353.53 li
cp
f
379.244 367.765 mo
380.744 367.765 li
380.744 369.662 li
379.244 369.662 li
379.244 367.765 li
cp
f
379.254 374.474 mo
379.254 383.963 li
380.754 383.963 li
380.754 374.474 li
379.254 374.474 li
cp
f
379.244 371.145 mo
380.744 371.145 li
380.744 373.043 li
379.244 373.043 li
379.244 371.145 li
cp
f
379.244 385.379 mo
380.744 385.379 li
380.744 387.276 li
379.244 387.276 li
379.244 385.379 li
cp
f
368.224 394.783 mo
358.222 394.783 li
358.222 396.283 li
368.224 396.283 li
368.224 394.783 li
cp
f
371.731 394.773 mo
371.731 396.273 li
369.731 396.273 li
369.731 394.773 li
371.731 394.773 li
cp
f
356.73 394.773 mo
356.73 396.273 li
354.73 396.273 li
354.73 394.773 li
356.73 394.773 li
cp
f
349.659 394.783 mo
339.657 394.783 li
339.657 396.283 li
349.659 396.283 li
349.659 394.783 li
cp
f
353.167 394.773 mo
353.167 396.273 li
351.167 396.273 li
351.167 394.773 li
353.167 394.773 li
cp
f
338.166 394.773 mo
338.166 396.273 li
336.166 396.273 li
336.166 394.773 li
338.166 394.773 li
cp
f
334.568 257.965 mo
334.568 256.465 li
327.11 256.465 li
327.11 263.986 li
328.616 263.986 li
328.616 257.965 li
334.568 257.965 li
cp
f
379.266 263.926 mo
380.766 263.926 li
380.766 256.469 li
373.244 256.469 li
373.244 257.975 li
379.266 257.975 li
379.266 263.926 li
cp
f
373.305 394.795 mo
373.305 396.295 li
380.762 396.295 li
380.762 388.773 li
379.256 388.773 li
379.256 394.795 li
373.305 394.795 li
cp
f
328.605 388.834 mo
327.105 388.834 li
327.105 396.291 li
334.627 396.291 li
334.627 394.785 li
328.605 394.785 li
328.605 388.834 li
cp
f
1 lw
387.167 232.196 mo
359.833 253.196 li
0 0 0 rgb
@
359.167 254.029 mo
360 249.529 li
@
359.167 254.029 mo
364 253.362 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Karel Bilek) ()%%Title: (cauchy.eps)%%CreationDate: 8/25/11 4:58 AM%AI9_DataStream%Gb",Kl#uVYZKQ];h>n6[R.5ih+X,'k5QV7RH"'B4_A!*!pX_XTZepp.)r$b=gth.rZ[2#BK-XMiV4(@]8NpL!\t&DJPL&%V?V*3&%]%OT_AOq$8Nk9\Qb4'!s?YpC7-V+l=&^bhc_*V?Qb0iB[*u(Tcj`iI^1k]R]0V@O+UT#qC](:D4'DH)$'5BSrLV[X\rS*k^Fa?8)%?hQV]<Z6u&V5Z0:/DPW;5\256Q<OhhrN#%i3tRQmL1!k5rIuK(k5Yj^U;+\,o1<l-ljk!7F3m,n6hMF!E,YO?k$YHE!C0.Gki5At%VsRg=:#Q'IT5Fk*_tcX_/;DWq90`X8)N8=(c=2;/:U=Rgm\]bIPU-XUn5F'46c!X"nL+DpECY7+8g:"8*%CronOtcjW/I+FoG[Wb%*;l@L<sG5p5S2&#'c,'Q^L<dTRYVS]Jo`^f+ur5Oof((A5\NrJ$ZTS-F'^-<jg75h8OXIgC",G$(WT+Is,%7h*T;(DJ;KkXQ>#JR%GCkpVJGch#T7NXZW6Y[3f(9aP2%k\TB;d58Lk/+5o*IA%cu+`[39#U\MbD\nN)AjQ!eN\YYW8)9#0^"O(k)rB8OPG%&a->K%/]>^%EKiO.re((i9kaOdjo<8Z_O)-t_*mQJn5K<aKgQF!b9e>`:AXeN(ek"7M_>>,569=P9g?TXj_nB+T.aj:!:]HdX!tCs:(U+N's:-@%2+C6;.LX_em!S@YFnrBBBm8KQF;A6!nUjD_*cOb`i_R&Y"dISmIgs?%BP0:4fYVD1SK=GHf=Tpmh?#m,$IlhZbMcp7*`01ua<\9:%_K,Y;DG@#RV18=kV41@;/k,1-1N52?#F#!PV"?,`WIYWp8B63"(2.QE!@n,5U$"M4dI:)ubeAfp1B]&t$7<#q"(WP7_Ee&@s-3Q@%!F,O@GGh4pI&q@`VPMTO(;o!Bd/5\,%*%V,'a>af_),]?V8^P`K@+e<l(h5*RIo<Z*FWOb)GS]$DupfkNTF:hj)dCNB%c#<lHBIB%]8Nj*DV9-I`hUhT,Iha(!YVISi*XiDHBfbA.6up3TGY):0+qEc'6+JQ<_5DYri<lmMQG0H^dYc>nDF3%Y,+e";"4&er4%8A^7jb/%2rhVo5J7Wr5&,B'MJrljE$lKo&.Qu'Q&oO@Tu#rk`AN&u(PcI_(5q_WX!R&/'Bmcj.Ai4fVU5aJd0df(@.M"M5h$.Y*jWU&iK$&,%7=I-e-"o'M"Pg9E69m$XT?Cemi&0:`(YDXm\AQZI"ol-e0&Gt+\F8l?)=&n!b45jX3l!5N*"s^Is3j)!JpEAs$qYL'&!H(RGT?ZJ%O`?]-J&E5]IG[?HUuG73U.OQaJr\9!<Z_33n]4O#7MABK[C00<o!)O_+=qmSO>%:_(;,F-Tc!WZMD530gq$r$8Bi,t%7YjR_3cFs%'PjD+e@K*@dT+p*WB01M.!6Z03gk%7MZ!HA;.4a%Q_cBR>,%51'`m)'*s6.&#_nLu`m>$GO6'iD4=V+,PE&Nlak7C"5l!Ac'pDKI%*p7Bt-'U:YSlg%sE'Tq)Bf=q3mB%^a>GWni!n#+plN=]qL!KU3cj*3!)8LQKJeH3HF6dt^iA\OJ)uU:e?HaF/7pLL_iLh`,Lk%Re%N)S?CD8s\U2/&hopbRLjA#q_Zr]S(^?jchb$)2D*W\Y[rSRYfiT"bJMD+qCTY^T#9/@<`QJ['<T%E-ZpmWD3<&iTWc\U]sLrC=ED%I+VB4=Qb[,]!#1@3-S&l**RS[A+T"k=(ou"/k2dk_N760!>oePK?9ct;]s@"(6?/.d"eS2K=o3A#+ZA$n2"cI&pBC0=g'WEb$nqL%[[Y)<5ZltapY#YfZnq/GJQ.H=`jj=1K`MJ:bP;2km83$sMARn7Ha$>4`MtV^_a=BapbO$&,R:ip[1]@CWIP49Ot&-i][e/'>EM7_%]KM_pqh"sS&K[i@2Ml'S?>a"=C%2=[[2CA/XNidLT"qC/K&g''lXh0<@+=JU%oWQE9t=OpC)*kbe&r'EZo=HIIf:D6EF$_HB@NJm%!F<P/2.=#mFOCC!e:Ki#5")J^ce<0%8XtG,Hr0`V0WFgDR&1.h8l948,)d46J6:16AlO#C^AY9Fq"mbjT_;Xhgp67K=RfaN*ffFA%$N.#oG&pS5o=l43Il6$]C:O;oE<#rP\0i]l/4YU7NJ_K]a0Uo&ipce2$&t_[_1LX\O,$:h6XlEOm5=T*_0&cVd'_/8UGEg=m_F6h%FIi0W\BTS[IK+6;b4\?#kA'(BI`U_2nYU(%:-/V0_o*"mESF&OX:bVY#gE=2M?/g4ciU`,=*XnFcrkJ;,#%uqf3^8MH7X5h=h=`p%C0ConqHr:1"KE]>e:h=T\JWQ0eJTq*K[0T:&:8r2C"<)!Nr$UX>%CNoL6ZQ%5Dqb4JQV5&R`s[gl3R!GB!J@QqH%=:PhVr'\OF+:%aJlPHFit63s5U'\Y1CAh@?B"XoUSfJDAiFda423ic!f&:fRPuNK>eQH`;9"<>OQ;&GGG@U9*n,K+*P5jJJ6%140/CF"?lRI@o5`j%s'^pW_s;kd4WXR/Rd@eM&!QSpEe0=s!tfUsNrSKe!IabSlH9,;;EFjQq`i^Os2/;"*t<SsdrdC_nkfIZ_32YG<b)(H$pVLs8=.cq%T2iaJL(VatXVoaJ_uAZ=afqRqs6Q]Z[H%(L,:WPga!%&T>Vha3:'U=QT,nCi7prEQd@Do*(T7d,(?5-H-_jlDk!-ZL@tiO)/qr-^%TBZ9o%6p5XJ%?$J_4oB`5A8Ytn2p@(YV-/$S8aglZ&XH6"N:6^*deq5m[5br%tq\%mce'\@>:KuF8HJoUZ'GQRj-bZ?Z'<A#pLdG%6!/Lh>qSSpi4Kp)CJAI&Q?+%R2$$@]j\`RDo-l_AlgCJqTG4I3aDiNsSiu8mQ\5+#qkc/V%-.u-><Tl=$iXc?95!ILqboTWKppGC%%X<E4QpCh$n8(3^a5p\kI+/`Dh.]CC!sqIr_+d8rjnY`0bn`WY17r]>FaAP1$cB]*55b/j+imGf+L>=C@]4s&>=sNsD:;4p$?FX)%D.f-"Ui%@p11.J?CYZo.E7*n[8&N:fA_&,gcrQ"DiR>:(>%dE:m!K;uNTj-.3_o'pNoL7)H',iG]`n&*gDP,\4^$R3/dM@6Eib\W%QdlNYZOW36n9>WT[i1nn=tN5/(/RA[H7H6eIl<6(=L9k&)PqL=Rk>,O`gupd`3>+P1$eK/MJC5(]<f]"<8lWKMBq]Z=_@s;T+Auc%OlcoUBfVC>_p_hkk$V0Q/:^j1Bs0<Z7%*(]1[CpF4\$GKk65]qD065g`"5t[.]1m-0QbCG!MQero<qn;'b"W'_Y_Vp[BT2sZ,3cY%HSST$W-^M?.WRSjk:ph`8]+#^)s5+oFgU^jgZFVFc:aW$7]VBRgl@k]1EF(BffZ0DF.L;b>F1%=Iu)_p*Bt9=W'RJd*t@He2O\g,%d4&!+0A`!_Vi)-n/GDWHH6%Pj=;,,ND-\nM9s&]gdRn?<Qrmhhp!hD#<W$V1=P'd[,2+d%9oR=\a$7sk8,/KJ5<bfn\k7%jH81sN%DE@ot<=oXt`ZUV#5&)YF\W3.tenYA,4HmA-o-fbii4caN5#tkdCDIY<<Th.+,&f:m+VOijh<ndYM"X=piFAna<,i;aT2#qb]A@W2%3bG)WUhnbAIZu]XTeFWbi&1Z(<?o.KESO6rRIdsHk2&'Iqie_`T-%jeRYK;1f0HR6p.U:"JQ?QnW(gXS5a;$JoSFIK5Wd4/TAqM-%B`f@S_VbNL[I<P_E>O;e?`:G'0>R@rlA:ucI*^.QlUKTgQkC#h_Tnn*=o5p]:V6J;XTBIKd4p#cf.is@SI1udgWiH/Ue!X?=LOZN%.km&nX_mg!:![gSfr4YcL-]gKhILLo;J<BRNg(iD.9@]61ma7EfX/IuD,$Lk+DY;i/rOI42^P><k0'ni.b\-CN<XkA7^dWF4%.Z>%[`N(Lfg2ONenEj\!cMZ(Zl+us06cJ0Rnl/p[9k?8EA4lL:GYj0WOb[+km"PooC&e\k@ci]mPm%jc?dqs%H]Q9`sqmg:"C/9cg:m<%<7]5ac]LQ0XZM`']SKC4\<U+\ZnU]cPtV)CBJ\qf)g&nTK2m6TrTnIZeJlg8pKo8Fc;mWVoOBj9XGRI(^rmc-jktm]#`g"ml"Doh%:6j,,?@b=JN+@QmrH[']XW]%f9PUcVOcs]qI71Wn`,V\eIE0.BBiD`"(Gd`h6^._ef!/-lWnsJXXVG&Tr&G^S/%/aL.Z0N**5D<b%Y+MHU1c/F1.'eU+_0l#<l.C>hW$.bbXqVMVRNnZ&L4O1BG37W>@be6932ih/`efb4bdZs:c)(jfpCt#7(9Cf+B5_]$VZL&_X<A9m%p]1`oCF]6dMA04#_J<X5/.3O$H8t36f)$@`3ue2"gKL/S]1.*7j,CrISP:Kh^m$FtZ!jUb;(?IoNWF]#92`GVB\rD"#fpuU@:OY'%1I6(KDk5p>!]Sqq0Xm6jh:c\?Fe>BP;G'Un`C@.RHaap%fef3h=K_$q.n_+pM+rXB`ue"8")F4]jouLB2tRt-o1p<jNge4BL,0CU%M2h;(Acar1_L-kFgT6];94[*EMh)c10;`$>ii=H>3=S[H.(35(UCn4s9\ld+OZcI"-!;fBk_cu96\M#BRn<rAQ5du"c8P:WkD=Fl%J4'iH12$9TVpNQAl#E_E+24D/lB,=@.$)-+T+fO>aV4@ikD,Vlgrm,V7J8F'Bp[;8bZV7FI!h=oQ9DBMUb3<EP$nh,@UAg^I"hrG%-M88dAkp4LH"LBZ@P2"7<V$JgULiRu1jplB\`5t(2s"C6-b'&C$7A",L#573p2F.a0]'FspZVCX0USIeM<=9:RVc=]6TTH.Mqht,%\cu83R,>s.a\V.IPFP.`TgID@/G[Kf%m7Qm[G$#LIm'?Kpebc%@0,`nW6grsmn3D:M^LYc^=`>Y4`^?d8pEAqK=egGHHrtiaVPE7%ipD.?Her"T_$I]oV8DtI>4PJHahgQlF-c)B/lF/Q'i_3uIHZse"9'pn4@W^b0JUOAOiQ/DCa)!2!lX(aFuhY`63@R*;AZ=jl#WOi%(Bu7j#MJBJhA[EaZ_^TMj6N7aAFlqic"QrF>V,/YVao88!rfcfPST0l)e4'ef_`t0>O6Ik_dY9JmE^8:D^eEuHJ_)XO70\I1t9Uc%L'QUAZ(oZ*`f4?=@g-3l<U0@47/bLH+?nX+Qa+`shftBegkMN+Ja^IpGE-b?\C>#jP\'F9<[iAY*p%hP7>da:c(i.pWQ-LuOskE-%_En"'&F5hh1T?_1^<.AtF]L[AM4+qkhsoq#jM^5FRp7*T4oU,>/8!;qd+N:!(\O)J%O=*'<,6IRoNj('((?/oTAINV?_MT+KG"5F%\]\97T>AiTWU[[[O[1j5G3esXb?')XqnL3m^6U$:cP[WYIl_j>.2@_K4r@>4$kS=s"lbGtT'.5c91[P)SCeF9j3PI%96jhbg&>LO%[GH<^qoURKgaFuT-l'i73nn1jMI;X'0.^$o'VT0U_u0!\h8;Y-ETQKs9^K#Ca*-4hM,@6NaFo#0(-\2+50+*cCc^=F3e:-(0Qea<%1<05]L2M(VrC&.[#[_EqH$OUg8",5E"a6Z'\pUAb7DMfpe"sfY(m-gfd,90.U.bu,H?Z8+9q<\tAs:hUI\Xf^O\X(=ISfSWbl[\o%p?&X4,u0&GJKTW>,Guue,6hV-L+-cm/kEpS7jjGn&e`9\hon3uc8)"YpVVMMRY^=+_Tol.\\e/@lW;XGg33D?TGfJ27KR4IbV!82%?40e,Kg<CjQngL,jkP[jHn#:<UK"3(J##Eqo!R@@]AtXfl[V#C09[2O`/j%LQ6K2F?$cY!nFQJZE>qU\])9$l#k)U.#N4A@90V@u%$"Q8EW?@`H6c&5db\d$%>Un#;5JXTA%$6VoakH<JrHq(6NiR>UTU)!cEH-*g_;kTj?A2%'7BDObTZ3u3JmTc,]VLC"T3mH+dICfD%fjBQpFtTEBZMThG3BOreIu4%M:hK0&NG_g4$iSK%;araZ?g'(0!-I.p@qfXB-Nf09d=;">='cTT?Z8NAj(WA5bj&'a,?t'q>R8/i%',)&_'3h%D_l_d0DT#i<AQrO9hGF'5V/^@\)9to\^AMqph(P;m:HbXR$d;Wt;E?8H"1UNZr!Z?=k,lgc0/pHbU4nZLduu8W>iKQ:%A2:XM(tY]khG=7ACE@2k%/MI`geFYO5-k(>cI,3(DpbXmq3ab?Ean(q8Yj;D,D@*%m;Z/p9hrXHW"u),US"H_,"m[hq(n?JJH4s&%-I6WU"[NK\W?4$<F/9Y)9qg8sWc7ZW-A#5:,6Si=48DQU93>$:RUU3sSt.?=o4"Vjp/Dp%#Qg!cXE6(m1c\!lo*A\25tSoZUJfkJ%K^&p'^;4nh#E1qs]t%&</Rh$5E#IE3;%627<09O4CUc\N9,`j!s+BQh.?>FI/TCrc%F(hnF".f+RC/nIa?7[1lE*%4ng'hW?04TH%lUReD7$UNuEs6aEA@AT&$B\4(eWkU_dL,MKioJ0WDPYreM1Cu"T[##27omNJb,A:R;hfI179MJE[LB47;d(J)jrMqsM&R\DFbRh)%<"b7kggP`NZ+!T+8A8e0U[d#/p?(DARfDBI1[rq58u9"Ik=\\`\(+&!6]st\^Hit$IMQ-G=XPl+I4(l#715V;U>[h?.b,MMlhOdQ%Ypt)"2W@^G,'Fo*B,NfXe\fq+gXAZPHIN!@%PtT7IQme>]QjXVpRBXcJDAm%HS[,#1X0!p$O1?>ibq[TRJ,re0m#;?<t9.D;`_lk%*9LZ)Q=]NV?BWt*1b<IQ<3L_6jds@)eL[cn'Q%DP1uS&Q?;4H"\it:%$\MjWVXQlVF:B?<!54jkNk(o_U(`o+=]d!K6pmqkndGBV%rHMT@rg(a:+-4V%hZA[,K+jS?WRCZJr?jPpNK8tcSGs/RiCS<<ct/C=n^"g,#:]htr_HNa-P9;rQ4Id703]a[Os"*AnZq,Pj9[sV%.m5["7PbI@MW1?30/O`KF)XqC$#lrF!@3\qjB\Dr4A#4\Y?jNK*m$7*T=u47XXD?9.MW0s/rP'sKf9,fJsK_KH2ZaL.FlhFnm&-U%fOJ<N5Spai=tRIR?9aH^&m)Mi58(Tb2_)n\ph"#$dI?7ST7#dO@1/\sY`6fh<nEgnE\S3po&;?FZXMjQ^./le9S7[g09gs6"3&+C%_-c.)@KE&2V3ibrfGZ_.r=CYWRP3`:%mT&W/'XY*A#.f?-kcZ#I!5#T9D38Kl;XYJiLrI6c>fuE!/U<c+A%#kn(?r_JSh3NIf)4M%Im&.Ad,i9B/-R\((iH^Lqmd,dB@cic1p`eWr]PVQrD9C5>c"&c!]YHn+HF"Z\<-A%Rfhj@3N>@'9!9na_btK[HrjC20&K7Q)gb1r%^"PpC\rg]'JVWc\eC!B107/,t]L<GV=/\#bH:2^:bAMs2c(_!(]KQlX0n\h^i8,,ZBq?tMYccKVYS;)CHI%Qt[s;H0nJ*mbla'hB%a"297)/db`\iG"]c17iK7&a#6EQ)ld34Jr`/d2>c#%[8l4`_8(:CJ/4rtbABa?f@+PeB9\d]AT[2LAEe14pq=D%8@Fm.0:!Mb$7:%\f6D<5f77;$<^8E.2+uPXJT,AL1[FZP5h9qbn;D+7qBM5A1"HI'FU;JFr&';OQsNVJ#BNV\f1aTo!@,4YPDkqP\*M?Y*Y"nra[K'%frdj1cHmE1/+]b`\U5MlDdOj)=L1s`J5)T\V]Y`nI)r%)`sm#cr6:u`$k2--%X(&NA3X%''q)bs?8K(I`BpB[BsmV<Lm@1k(aah]%/PpE6QnJ#4on(Z`C`O^Aq;dj."2;7'*T/qR?BKqM+a.f;d5_tD9Wl+*+*%$ok;6d;SR'15XS;3CO\+F.%T=I7mO*mRgm<C,:I<S*%i]<.h@NX_Xr4l>eC^j:A*T;c"je<!eHV>.YZ[2#g*siJ1_]!TPb,@Y7Fa9X:>s*,9UKX^_s#BTchh]BIiM0EJ.#+XdbA9;)I4Fq/%UOZcQ.TsP_h[`BeJ&'<==1>D'c6,9h8(=[lE>\DfT+N:F1>B<q]d/B:M%@8#fD9uk.6EN?_c$qp=7k9#]qrGP7\j#[G7<j2l,ijp%o`ijWaBp#BZ\e,:;jl\bT'8Ydq\q![VgQ9V6$@&,PR:W7>#:!X,.Z*gprF_aINI0aZMoC8A]Bq7o:g*D-*F.3q^0F6^\bXsj=sOT%pr?mk0_kbHPAM$qA8[Vk9Ft1uGF1tQY=B5o8Fa8+/ikE2`h8]T:JaBupNjfS2ORr/!I"LM1hiG@s#A1ZO"O6o!ITHZ\'rlf*r]^1%Q'_)Y_qV4.?A8uGX&q"Qfd?;k#,sEaEO<eF&+^U1:kHHYP>Y3T\g@S-U`$0]"p=mQ<p'hdH?P<5_m;#l3"fT@Yo>ERe@RfSKtk?K%5h+2[cm/H5D.>ak7_IrMPgJ_b+'IAW#hS`)l8djB=nZ<\4Jc*>iK5U9,.Z@XUu0Q.GYp!)j@3CoMd6`?VTm\1@5`_\_T2?Ik+kn"%6fNFJeU47aFlK<da5WaDN?5_h0B)il="0;L0)Z%%a7*`MeahNFedbXA8ZHHR^T*[sT?MKg(0lV:Whre/$i!Qh,\/GKqp4a#F_-:D%6`X-%(CK?ci>e4A2hn`kLb6;IqY8Ta-[oTgOi5k8-TCkEIdJh=Q+nUsF\%+V`d5VlZk?NjY'"j\;XD&g+6:G8,BVVJ$#W>dS6asg%S.@WL-N-7a46[cH9h8#l:*S(NnhNUcVhF8^X]7aYTATQHnbQ1)g=!rMCi6XTfOb]Yh)`h._WU_glD6X1Z*b-/#Q4ZP,e:F7/enb6%0#r]]?`G02baQAHR9DLR!Tn6]]kKXSb.^bh#.eE8d##p88*k$\qJIH0<9#BKR]R[H'I,.f'gmK()ioLUP6+[,.kONKMmi>cC]=sY%p=;t;W\Aoj]/[?#eQ[8NPd3dqBO@j(O6W/u+-uiT>U!Bj7g`;^56^7H%W]c\42ZRF6VdolZ-2I&qa0qP*QF6LX4NIe4]I.#Ucb(S%Em.=oT.4uDMY:Br^BGcT(C$I6(rWLuMfgK:+m<I5O/fjk?9Ql/q'!6MOqX?:<\p`19X@J18K_kM`kF4;+73=<)ge+>fD?2b;#,eQ%`'cIeI:u@a)E*]pjuUK5'%P96Vs\r5*WYX^>g+-Xe[&->dUX`eG,KF[-N.U0V?b[Gbs9fLq\fD!3BI;'Z>^,OPkh_nc)Ei!=1C>\%*e7`[%3!18jhh._M[.nTrFl!ASn/ECOJd1Zpros@msXWX2e=4tE(a>GT@2EDmFb:t,X&c^[U[jO@eVj"g#Np]p:qZM+gN"6!?BZX%A<F2OTC>Y;X]/t=;QCr&iQO.,War;cW@sVmZL;>"b46WA5oKsFGq(qO\GI#&3rPmM'0dsH>@8ipNC)u[(<h1[`^;=oB.?:/oc^1%%^>p4LO"U^@M"^M]XHcjTA=JLT@H$7F1.oK=e/band8(3X)db)0BK2DKhWfBkgBo!eni8miSG+Q'oWnUtn0bto6@5,3iUcR7!IPnP%(f<21OsSNm@fs??#&UAA\@?A4K<5hH.EYFt^#De=A3G2aj*uQ4G0%f6=Dcj.(G8Hs$LMdV-[-3RbPiB&r3P0Onj9Y@gnUisH0;O,%BlD!u`SW:U8g[qVZc,t2j)7-SZM6"(+6D<gQMi-*G_QU>VDEgZp?6[FYS']<S_Rjr5,q7]*3o%T[GI2_j>3>B53)"G8U1%nACJ<0%U/AE7N_gQeQ6m.gEVASD)A;#PE!L%a3Bf)q04+3SZTgT%cb-FnF[Z\pC9Nnu3l+:''Hp]BqoAR?3#7FB)JBkT>eP<IV>$<&kcr!M%s83`&k=MBl%D<&u_Ifd3+VpVb+qd$eI)I4QTPN<]m%jM=&"R#h?E?D>V8d1_67\Y\0a9*s7krZNCbu(%"C:o__bQ[BkoD`O>YCn6%G)0P]j#c(;%FOtL%c!'^0o*a>eI566*)j_marR+]$Gg/P#E,d#%N0BlnS";\Ias(>@fn'Bf1q>?Z7I=e-b3Ql?EJ>=cMQc,U'.=Y%eFc,4pFphaFmc-aKimm"="<di@Ia$iWsrrCj?XkOB>Iq(*@C(5n#XC@O+gIUrJ4/hkV6@N(n.e]YM=9ObN>2fK]T_pXDbCoaJ,'[%ENuu8!27LdQI$m4eO6&fG.eg,F8:pN*Wl"p(C#6oS@@QL:,pNoZQFY@:8nHCCUI7oF<;r!F@Gb=$hL%7Qf-.a/#C,H-u)3X"k>:e%3'A6SZqK1":%:*4/tS!7Z_KKN_8iJ7O+jQtFuLT;0e.[=ZIeo-D"[3B.?uJ(hnWRo-f`JQ[9O[eWk"k5q"d@,JbN,)/sI]$pP"s[%(Jcd`Ed'"AU]&j[>$&GFF55ih7A>)8`>N/@$\5BG5&,Ok16:[JJR[lB>aq^%TrqCS.i&'T:-_!:[=[gLb`V^pkNNfl7IR]NGU!ma%lq3Y<K.@%0OQG/N[alYdT5U-+4Vsimcct;gaNtI<&XE))-iR,,++i<]k03J3<*28/ZT$@WDsk[Go($.%jn,#@YZLoRio?f$de0Pm%P*B7.%UMoLB#`=m/HguJgsr`Zk':G"4<<@-]:;Wn]e<eT`g<3Q[j;o5pe2>5S>RL!SJai560Q;SF-I]'?dee4m]^P%7mf9=`\`*=%mX?/uN\3WtZbk_jWUNhbc?<s.*;*Z"8uO\l5*7pd08n*8o>rC$:YXRI;^(4a84f[T0=$-i^Plm@STY(bWPadIA\6F+ltPqT.Km)R%"W=F1"!o>"3h//kO0"t!F;HMm6%.Sp%N'X'j`@-X8VT"oZI&DWc**UVb`-qSh]=3fZ8JU?U"8nBUYZ&;;&8_61/oJr]Dfs>%qL%(%[+e`>:QTEJ7k<#%.j5,!@`fma9i+JHJSd\]8fTDM*e#-U.$P3p_">p4c+9=lA:<,#!h)q9<j5+;F*pagZ_=6tVhDFb&dHoo9r)]f%4/:22N\?Y=i1nY',V_;fk492/01lY?$KsM[J=H#O`(MtBK5J,&d6R"HW#%l3m;+4!c8753e@GBL3TiRZk#mj[fa&<=Sb9Dke/aDq%5#*P]F1<ha+@59-:s+J>QICfLF_kfre$,-h*(lC8XiXjUH]O3)l&mZ9raVSm-F[kF3oBuF2Hd*O+BlX$N/6Q9kb28-U%Sg0Hb!iC%]1>Le-]8p#F&#;1djD"q%^@=%Ahtaph0*6>kH<%04WEIHN#FeOQFrNLk+\L@+"=`:EgGf,f\m5!gHCn[X`Q4nm[c*t2^><iZ$`V"%gtbDfAr`I>laoBsh4.4ao,bKpa5%PMrXZUGO`>"n$KI$n!4EhR^bPrZg?m0q^jQ=/?=s=Yh:($WA]as8>^X(._hhfXh71:>QFc*R%!Z.R>'d;jEIXAqNAtRGGbSLm,!8dQUNk5rALg>%bNceNoq_'K\8#&]sfL^(W_=$(f]'(_EVd7\2<]6%.NZZEC6Q;Cf<<M"''(goJ%]^>@'_9-K->9ps$<QO!bHO^b?$r5TgOp#Df*(4`?s,rh](FN@p1QK*5#\Z6'R8GLB_Gp%<A$o`HJ7W:C4.?8?Ld"=M3C?SU`3;YJ%'_..(DpH@'I0';0ej1t9)^.i=(DMZuU:fJA(fK7[[q0Xr<#$\6O:VUR-jNFnF[SGK:k]U)97&gr[R/L"$fqQr9!'^@?iWe&UK6<b%r`+d.DI>figS/:#j2r3i*-X\XY]H^dYL-?E_OriX%p/1F_h/UED)NC8\tD[eE8#&?5^eYYs#:#<54R##6p/$*Kt1)c@[c6k9#oi"%d+N7p7`7W[_9gleJjt5ebfP!j<[t8;^MlW!5&2`jKb(oqK?i"i$6R2R>,e>bV`3t/-U:a.4d"CeNQ^JkV126&JZD;t'E/n:eb_kd%'3Z`PT((ii_%RtE.3`s3i5b'ASp]IbR8`]MkZm)%3NKoml!/g8Y`J/G&Z:rQBYIYC<8Ih)QVS1@Vql06G'/qHo(-stEcMsJ9coeX%U@A(O'HTmXXjUqWZpt>,gdK"GH`og48FQiQeQAm2M?Aaa2;X8;4;f'fk(8\`[fB"pS;8moE>WH:k)%OGQ?o,$*"i,o&nA)F@"fD+%IKH_eb>>e:3Pkm=o2>@?`o`+5PP@k#_p@lZ^4%KoOZj.+Qd=:G8B]e(4F-oE2+@B,]rJVj#.,jXG$$?nb`SKAr5+ur$0Fbtj>1jB%-%d[FQVU%357V$i/<Ildr12l'U,c-6iLVG0_+R_&#GjWMnp.d8^m3STM,NZB@"FP*oJN)jX;00-U3uag<fuC#:^(\rOuY_p7dj%X%r;>AZ-)?O\@fq#@e7-qJ8:_Sh7K&`?!%5NX(KUlZ@!,MF:X&'74p4EEkmArSSs1dg`^f]SKo/jkA.`ZKGWkWR=s,EifZ>j@Rj+D9%?YCsc'qj4Ol!\<jerp49r0TPYb`E1TGL@;sT09lT+XKa.0s)WgnQanOHCMB1arDl%n3W@G.Q=4L4XeQR^7X%pdgW5!8!Lp7.uU[<%LW>%n9\j0RSsV4(27s3/E.tsVV;N5XnQZ,nDW^L-a'.MD%hd<GLu3`ID:X/R7ARocT9=)fNu=\c</d:iFnt/)Q/=UrF*Pr=ZppjX%6"+G`2"U=)cWVH>$4tJC@#g?n*]"A;)L8LZ#N:@cdcT:eaqEshF6+TYL(n?Njsa*]*oA>=$%,Q2>W+gYrIcWJgDW)[7+s96as2kp%jYIciQ+3C4)%36QJ_SegpT,gl]<cD%$n:CNK_Fdb]=>0in2!GEe6;rpUf[68n,'snckP`f,'o62,5\Z,eo;pVFDll?7(ch*SsUb)%B*,qKG+LW8"Y:L-nN4Tk&3*PWgg(LL&S^E9;:Z-"RBX>N@M$u7MU9i`;h<Q^p^O%)Irm.Wa8-jinOc?%pn5IO*"eN=EK$,C:AZPf%UetS"H#\Y%7T?1678a])W9<u</HO;DHpnc6:O*Q:RD0RsOOo[JeW3.p08nnFNkBpd-ri:@!%`XY[]0\hA;%!(I07pGdYLj>ScpC8%am5mSUm6,KGBAG!dV%rN%3n;D`3C@Ic/[WX#!tq`&GV,I3k/O%T*%u+76:n1m\Clod3n(a\HM-WLN`(\_R+dFnXL0Rc_6%]m;\T]%bSu=L[4h]ZYfE+%(/V-$L8f8B/6DD*W.'G;%OtgAfp%oT:'@a!;Mc?-Q.`>l('ubpaI.O+IcSW#mu#^4[>S#Wr8M[5?<\^^>eXAi%'OP%nZYrp5o^^Y/[eeBBEjlY0g;MMd.9f\"CdPBFiDo"qZ<GEm[6%1'ZpjA=s#,@IQSHu>'W^>IG@"^FZhV*EI`o("BCjj#D!CgR%5R5MKYAV-"J'[#0+cH3omkHtd;&6S"heD.aO>*kdG\OB@SV['C$,p5&:C;<LIf8te/*fQdg<Mj(H4]42<YQM.?^2B3omuqj+2l@S%nb;j1Bs$jl\ps&?>b.;5$Gu&^[ED'QY5NfK+'l"HEp*,]g_eSE-m9c22P,8%NXM_lbP.eskWA=Ij4Y6*62bL?R(3TJe?@?-^r]8Q%n]e;$9(Ned2qD;'jh6dXQ=cZ?dS.9Yn-#d@dM"7ggj-cGYHY0WlaK"UVn`rDeNiHH]I-U*"(19kLD)mFT2'm/2pDcNVdbZl-76d;%*5,_=`=?3#I@M^!%qEN+D?)f3K-Djj@X>^:*)O\RNJOsonP6J=3.4=Bom\\3(HYpkc&^HDCXFngB5=:JV:UML;PKCclP<%E6WbX/%kgZ)Z<ep>+eHTa@'=UG7/di0s;Asfs)RP@Di@hfjQB@J'H31ipOYTY7QFth;)\(6pdF"YF'X4B&m4/pRJ\[)rB')XPLBhUj#Gk3_%-^B"bGjSmi'NUF%G3E*Qm8tQ$hKYGZ>)j>E,aLu`5LQtaDcfFXH5HF_Sf\h^Pmi;KJ^NMmUkuTbp)UQA*tA^bDpe-KId1q":0>7/%pb^\+NEOYpmh]U@d=ndAr_RJn^Cn(!rlQJcmi3!1VQ;!3jn]G5pbFE!F%0i[2`O!ScO#;D[.;^+!qgg9PaD7&\]I--PLK0JhesC-%7Y!Z=q\g/rkat3G6-p2*P+k+dT;M`.b^GgS,?b5DWkEMckgTG3RSiaeV*L?DET?7aDB]NkM-WB5M2SmiL]9ZaTNc)#4f^(X."p#S%\tU@@L@4/H"+D:7bI%afHrs^V4#Js=b0[!;n1Ya"s+p:]j#%[2astaTemcI3D7Q8%pn&MmRbVG$B4SD^2EmI'4$rj@kIt=^KBiB^%B=G"dFn6E`PkYEaLCfNKNY$N+$JH0:q>?MI',\n^`3KDeCX)2uT*'7<M+)e3s5#j!/=!CQMJ5(d8p7kfQ&R217JE1laZEG841D-"%bDo[/eaj?D(faB%3Btt::e%Wi4YGXGfm#*3`KtjQ!C<1gYZs>SS2+$B/3_Z%[f+%R4cKAcdKWuYBNISPkc1')[[,'djj7[ZW`n.j%BR20UP5=un4fOK1)7&N51$H9XePU%+9K/ue&K[4J)LVn;oO_RWJ1NNNn[T4]Bc'8IFaT5?O,rqI\osOjjl]uE(+#Qb*FV-pr^SIh%IB>1t=Mr6()drL*P654TTKqda1"^T7RMt:jF&;aV+F!NWLH2nD;Ar]^A[iQms,lH$S=$WOQTd*m:?3kg-PZM(BgE`W2W9Y@_'Ng;%)mQS\kg[s4bfRt6Mk3e\<:5m`0HXgbk;VqJN)QJ*91o40AqhacYM4Z2Y'$ajb/bZ?*1&2bdlO*ua,Bo%?E7hbP0:>nr;It-RsRrn%Z4EMpHL-KB`YVk6-2t^"<iZ+<i6hY?Y=#?CAL,rQ3eN_NSYTfRQH-Et^MX8-\TH-[:Ja_"/T^J8_"u*BU4'd]5,Z3IXZPnGV:u[(%^oVd0o0KB_h&[uAf<dV;9Wui%VO/(NOr02$h*4="$eG^uQ/^r_Z.`8!k=>JRUt98iNC.Kaa$)#>m^:6IiaA8Q$5MSnHj?YKXACRn%>]k[QZFHC93g5IXT1U&:-,)B^S1jbi2Ni!h6Ci.,lnjZ/0p_H:<=2dtiaA5AQ?\.ELn9cD=4V'd-QOr<Q<VaIS_2++Ok7\48Hhd^%<:9aFfkaA8DJ:RDDVZ1npE\T@^X7eErIr4&#V:QGkMctiGm!_J+X!ut40\(7bI:?H[T!56O(h#Mqg;0H!605il$D6-HtURe97)i6%*"orh:jiL;nI1s9YDr3P0Cpi;5>24^q4J$QM"\eOenMN=s#qeoaFa^&r97BLK8#"X&[u$=8?4"(XS<:DRV>dAqrts?i(/ok(J>"6%me+u($_r5V77ccS$/d1Xm<`@-^TU$rBQ"Le$J$ed*J@rV<<$7djNYRf!5e1]]R_oS\IlDT1!<dS2oZZP@/b61nl`mVS.=alko`IY%=qda-^&0PDPVAD6_-#QI9k#5GnJ\'\<P1fIaVqjlM_sX'Bll2"d(@_+UFWGo^<>]TR?ltXH%!1Km::]?m#Uh2e2gB-8%Vo(D['qS%>&5ENR(V:.]MskKE!nj*?@-Xn\6ld`1n$UDqe-3:EnPM[eR8$X;?4$Q?np<Gm0I2D/9J"_3X]:1;2<oM%Oo,nk`=t&?,.Q1TAP/r%h)F`_c<ff.S.&#7kPY]$I#f,a]Ws'Q1gYld`LP#-aCFr6<WnB6<@?t7*m6*YjAe<X2C;5+a1!+MINc6fDq$pi$tj2Z`)*%b0memT%h?;,YG#,I$2Z]f5+l(.plLkIf7;bkZ91i0lY8mh[O)-L0>6eJ2?`c57XS;LkS;@'.6W.[S:RBCDIBI7jTSZ-RDm%Kh+s\9MHdHHt%+6.7HEt@+1R.[>;Cb$Oo+<b.Bm[d;tQ3b`f?"LcfVU;i6rV#@lbq+$hiU!_pgABQM`GjZb\'?bI@*t!Cp2O5)[d(F19+dI?B\h75%\W<K[Q;UeE@0)l.)@gmM4o!snbglZoj[.\sQ97j=R?CPon=-C[!4I`I`NjE]AfkWST7/I$o>gASj7;U(TV*M7+_M^*/KCN1[o%'O%/2E`dO$I)$VOl`2cMLd)erjP-P+1kd?sjpCrTn?/=GgDJXl8(grk4=`T7=*tghk#c<`j,GR%hXP>=/DQAGKnQ$[!s-!4Hsm,nDdg%nEt25mPYSiR9Hl-?2T$i'Zh-YAB!u\r-L4J0&KhlNi\qf/X/+dkMVNW`>TY2+Z^5W<c+O`A``:%<l^?LkjQc4TkZ*cLSrX3(m_l9%o]t%J3N=;MQ:h%1"^3IYnL,E&]!>'8@#bB<JYrmKip3<G[^oL8Z&-fk9T%QPE^b*=:sSHO:I,[kHu/e'B;+G=+/^o<a]qA*:3Iad%#/_-40hW%CB#ug"Ch]9JF.5Ue`Q:"'p&9U6/A2cI*=*I_`,kZ;p1knN8)Ee:lIT]Q2"S$#mL96+E6Q79.HVnICpc'lT1QuC]&U9.%^ar`LHo,GVp_GgjSPYSr,3GOsG%"euiDM54'E_5R#4YO"#sRb4/H-SAk6ZWd2c40lbnEZ:hTRb=>e^0td+N'YX^hiWR6tVZ5prgA%GL)thc_.Vf(>L0jc9?kUT.RR$%\8"PS]eL7*'3s*3^^@6ei@jG)0@LgIWFZ=1[+>mN]lIMfselP:OC0VZd5;n7cAO4TsN(<PPh]Y%3HY*"ajq>A1G`t(p'eTV-;`iKUFo\<H5fAk\qAb8?,)#>.?2rgj2p#pd@(`Bc6L"fVoC&rafY=4)TUDVbr2<FC6m-08[G)-A?_/J%+GtW/cN[KrkODskG(&MCoC59$absZ')`DcgGKDo;ED7:oVG!s=F!s)\@FCZ%?1SWYLpcYecXmJ_)]T"nA`)c,aD5c[HZS3";:B'M%c%]ir\gs[regA#n:I8q7(mOF2Xq>/(g!+p!`jeWES*[T6;%UFL"N&gXlY;c`CR61MP`j96gAMJ3l&T5gR^F-`n(<j5CN>W_7u'.+%F)Z&I`'L`nFm8<J>a`s%AWl:I.AfuaT@4LookXGffj;,,+#AYsecu[PX'q0?fdq\f],drEKQUb==V_i<X'h>#p9_&J-T9*,ZbO)e%nN"41g%'g$p<8d?['EG$9/"RC/@oBP8t/9-Ti9NTi0C9_1k3/^h&5tso(XR*G7>O0ON4gg-cVSmF?-uHYi]I\S>GY$=D+LI!_dN4%G,3d^RT7O#'XQX'fm&UA7ba5<qS4a3X;l=cUuqr3Cs*"#B4Yo]UEo,jED)dK3MX$e!h_"_bKS!B.K6YC\ef!c#E'FcPJuBNB\-k$%B5pEEQ$YJMg'%UO__PN*BNMD&9O#k3Rjto/%'ArV=Kd"O;r#sIrd&TeD_W0_hNA_EHPP+o_p3>&fO&ougih]$O/-+Eh5K1k4C=Ei%.qT4Ck5*/e5*J^X(+W$(fi,1NO>G9Feeq=s1U*-/#$pd[%9k7[QmJ:=I])1?T4W<6>14puF>E:DkZL0rY]I_alS@KO]4AuQ7d4_.%7:^5G6uQ\Vln[pt7:au?:3Vd6B@A0eh&U.h`S;#eTtUA?c'lpL7-9H0*pe>JmD;.W7bQg+ZYUIclk5H.^GS8WO*;\78OQ$2h;LI*%D=`RB8[]cA]BoW-m9Hc(Ui)Nk[n0!-,0l5TZgOX&_rMf1%I8h6SXkqb/6<J/PLlE!kJj&PbHpItEY?^PV#?,N-OUA<$<Q%Z:^7NU%m,Y8),!/@`3t6"T8BtUMAlV>k(Y5IE)3-=OAIGZaX4utlUZi*8WmgQcp3Ce\NO-kD?@P3C-eDL.;PiJcB1MUpoAQt5fK,8mm8%8L%L<d4#Ia<H'_hmPbeqD"dcA10:ris`>iQP(`mlMV/V\?(joAS8j:u,&6*7i4n9AmC/37Ag4/^FZ>Rh'-o%4,rmm5H-4jPE`:CsVor%%W2U*6U%#P?F36!p7)Y+Z50e!ej5F_D)^Yeq-kXs#',)<dW!10[;Y<j9]X>FM="ig]mG&g;F1jh6EZ#PG;@h@%PNED=?LNM)oWo:%E-BL2(SRq5S'B9pYLdH)gOP[]]X&m\[UNpUQ%r8ilk=A\6E%QrA"MqmQ].m>_R7!C0*AhoQ5g8qAgrJRkD(Y;8IaN9d!H:4pb:IG%D87!KSJXCl]j`r_LnPRk#iUefh2$$OpX@B*e$;)JNI^8sQs"VPRMODqD2i4^+[ZYGQ*#2*m2"3?N7>IfA>DEhmP,q$JF,!7p%`eB%)6)[_Hlj6*SV,+i4VVNHW;pQY]rB*iF*+J(g>82LT/OqbFaae,G"HM!Xq(nrc)%D/*\p&@l6Q>e'erDYf1^k(\<`?dB;rrFRL4iJ%Z*bs*oRkpC(!^Q#p6uDu;r#f@.bnY%b&()9%!N8r$3)TVE2HKd]r/_M`Q&t$cbOuj;$D^OPALr)oEQX"]+No`O$2js68b!H-ARZL%miHQ^5XrQ](Qn1E_fY)<985C[>gR,YkG'b%><"N2(JpFT8rQN'`BeONTh>kU65(@s0b7.bkZW?kcBOl2f+1*-aaH:"E.u?\D)2i0%jD%-Bp%7XY<VR_C^3hPVEE>+>>Vlh$Tk<V4qAs,)YAs_K*p62jc_WgJS3A?W4s:F1C?!@E-HU.,BA-TAPd#da''3Z5_qTs$2LM>o%!D=g3:CgLJDYKH"BBWnjdO)jA5HAXPPW_EqC;3js]<02ZS'feXdBhPm8C=3dT2rL)!I]]n+k`t0V_gs;.:DqMBa(IjfaU*+3O6f3%@feP+FpFj=e.O3-Wh)$uOJ;LEI*>ULh(%+Fbq@\ob??,B?QVJ386=[.o@8V_*@mpE2WVQOhHD*,4]X,B9DVfaMAI&LIn?is/VBrU%8+#M&@;%%2Mm4Su*_^/d5R\s:MkXrI@E]7@d1KA[8]N.^2/d^$IdN8%UB_0;N<f*&6j3f#S=HGLS/Q:qf]CL6ql@Y:c<OLr._k+.%WVngfAbEXDQfQBIOYa[LAZ(mU2N5MT>^Ei$2WWBL,M(WpY!:NNqhX$rF+&C]7*]h#(@Sst4KH*&95EE'E(k?Y7k&S)WGVZaS9&tD%Y.H@Em's+&#O'`-H8j0IgGTPJ=Z2i(3^A\Am44[O/=4Z[I[FEHl-*Ug-M"HP2P!u'h%#j6)f0"gT![B9S'F87@rCt2ZK]RuXh>lg%j(pc_7D1L8]Lb#PffkD8<phE+c7G=-YVWS?Cc\m^MuI%mI:Ufp`S/kmlb9[hD!njf@lBl\/tN".kWZ<:b`"HOrOlglR<?VrZgmJ:%FCt.-nnmHZ3ln0SRm5BN:ci7;Xb'aRVXPASFOn1f5-sK3U=e&MFK;(]?#'8^VV@DGRq:':Xfu&Wc_`K#J9.dcRS@E!^pWoQ3j[Y*%Pr%nkB@E:1dMZ,i]4]T\V2skb7eVs=B9l2'ZnK%(e!Ue8pKH-SZKW?>EpY$>c7G=-jupH7(P$/tJq+YfLA/YNf=2Y-'?!!;\sp@W%i@ON@Z*k4WMg`?AB@\A5mp`?ll>4-AB67>SZE9-Y'e1*m`6TG`(=$$TYYYuI/@1qm413cg8#jAPlZ*s7P?F6jdiIT]o')^nam:.(%SVFDCe%hsTl8#pB.jC1jkOF8_,a]RX[Y`4BXI/ZJG8oVER6Pbj^ZWb-9>:3XGLd\p_SQ5UdqA)b1:`o$dQ+lPh#;],o[)ES"1hS9%`HFsnEU_2CPDJ5;k0O!.7MK\\\oX%8Pdc#%:<n:Bj;bC8</<_RLCVSK][8lDZg-E</C'F1Nfmc$+&RW`-2fpgo$"+oc=-d'.VD8r%'C"(1=0S8\X3u:m4XAIX4o=PcP[S6RLr3q-)BoU%QU>:`bKulDPF]@jKluHk5#Gg+C$<e0L9fP%60W.3/KRkFSq_"Jmke!bT;SBO%%SoHo3S<+(3u,IeR?)oi[mDb_bNlrL^<PSPBC^/F,Re<e$,fXK]%\]5Gl>`:$uC?$Xj%7?`l)'BMIMS+oT)c7XgI\(!>2R6@NuE0%g?1uA-q>Z&27C\kPi%+dJWpZ$HaRi;OLGuZStLfnj!.96<oTEXW7r9%mPZ`[mHk'EA1RD?Z$AF=9OudDp?+Z#*ZA4Sq3VNWl;$DA%D^jOX[i30;/>(DN*NPGUMROUknX[T-+6#!\Lj^JbL-*&hpBn&K1*$=sbtN+*L-*(fVrh'L^N$`J(p:Mj\,EqhS%N]Qj,N(Xme2e=%=:"<YV7\\Fj7oI`^#UJB]lCOOW(aDg?HGi\o$HI;0AN[Tmkq`r_cm)WS^Uffd34dg,^)c"269l_c4atT#B+Bu@9q.lCHDc,du]-5%7Aqj1E=[o6cbF)Fm@2sR-,S=lRUpY4"Mi\X@P*0U+*=eqMlhbEI4q,aBT;.L8BWie]8cC99dG%^h\CPM6qkPgIcn5,k1qu^Me.!J%J:f,E2o2`LdT`uaBhU#p@Et2+RX)/C\DQb&(eZ*=pQ!,?:6M"$"N/rAqfO2WoQ6P?UqA.hWjmSR\(6F^,KEX)8<#Z)@rgWIk+`N@%@u.AMUMF\&6c\]4dP8]'/iLsoc/!kPhUGqZB>&OW]4FIaRUqW1*?1,M`]"gF$m6ckVSUAkI$g2j)f%AKCu6#`rOKu:*1K&\=jQCk%g4Sc%;hhAd],XmPHAPbg/RjH1:,<jM"lYF4M(*bQ1[`*@.m0+=>(t"kONCPUejVb=mH*rM=;;k:CsHS/iu@6p-Uj@1n$'34UF3Bq%30t.%V`i]qFEa9lBN[on%i7k2l;gK$nZSVS`&#s/A:;=\Fme/bT[]$*+sfj`gpJ"tQVW!a9q*G@7/Cfqb[#nR+Ot+]$1h\@Y)-F$%+1btM^M53UgqNs+ASR[<Hm_XPn:4u8^aH+dk05nR)P5o14oIpDln\U\PV*/Ubl+$>>*_^?C4i_((".XN;Yf.X`7=Oo-%Up4ePk-&%Bqh>K][2K,)C*d7j?kJe;?u\u;A*S^AbOC'V(C@mB<>b#cS\3(R6X,U-^i'pCZ9HYJm2E=<o/;2N>#sKXI\1PacLbZSDb3hUT)`6%@s5<VWM&-MTH$?jXAb:2ST[TKJ?\:f7Rpmg&t=t(gXFQMVh4$H.X_`V5pWFLCcm=3@-YsBApGkBG-oC=!R,f[jRu_jlV;+ck?o>#%e'u1'gRdd]CiX'-?'k2bBd,3jM=1;+(60csV#ji@M)UY8Rr_aNYs5:%A+f+:3aLFOIL'`Gb;@Q+Ei-!GMb^`7D.9aEhRL8S)HT>5%^SbnDfA[ipH!k=3]>qruMgMtC&a%kbbBh'QXga6?)paN[pMgKkaoQUQ0=H&SJq.!rdW,sB1E7=t;H%)VD!.I'5A$f3VFrN8[75<N%%X&Zt/m4d6'6b+[4C>!2etr%N=(WU;9JO.lAamqU\cW)sosZOjr=R5<Ge\')*&gM99.\Z/RGp2gm+$@,JNCC^k?+j-hK7.I\P'"!%0?9smbBj^=GiRL1Xdi>D+VdhWmnH_@%JO+1VZQ9CJ%@b#j3uc(hO*7[C9[Rs!K/u%QTi%4#2%YMIlF(Rg@p#c&!GWo`TV_JN3NMo%OtOE4*NJ\99bsDN*'iP@mO]'i*%X87>;`KIXA(d"PQQ_RJ,:c^j8<'A!,>9-DNP*9T>Rq>0=GF-TRg)o=.$&O@'+$SQP]<_MJ\gd%W1+Eh*5IgZ.napLntM^fNP%[qTQQUnYnFs'V:_E*;&R$EN?@9:kXDq^+6CtdQM'/..%aXA@K2DZXacIM+-5uLCZOOSd)kiU5.m)h%faE%/4N_:PL"lX&I(&Jgn*Nt9Vsd^Tn0jn]Wdm-1A"G85<Gsrk%CUN3D]a0jTm-J/P0(,@]:jCpf2"Uf@q*n&Veo/cos9\dRH.Ie%orap<.h/]YD0n4+nQeBVW0$+5I)C1,/7qG!e^*MuW(l1BF2Z0^^[#N^1.2edg?Dm-#FShDGh5a8jK]-U.e[GoGQ$l`[ebI7G45:\%^Zr;Y$QpebqUlD#r.O@tn+rGIPPqWG>J097J)\]3/ndCjS>IB2-6Hs7^7F-RZSuuNQY-itqUrXK\)@cqQLF\'06JjA6#Z\(T@p1m%oi8bthrEHYcF`[lrTp69g#']ZIeF^1RM4L=^$B='3,=\>]%+EAjr5f@X+#fT)7G"GDtOs;p/O?QSC6!Q.FPhWp<(TjY[-"tlY!e)%UUUlp.V\X$rTk&"lSDGJJ(IJ_^U<X4ho\)`>JBE9:I+_E[U%e`Z^%pVioGO#lY!so]YSrB45AhhIueOB]Ee%0rAN!a0Rq^#IZ)kT%[-_JoqUp5d@a=l=n+t_PlF3CeZutOf>e^0LlY!uiCck.jmCRi@YPRYU*o@0W2!j)Zg\ETFj]0(/]Z7L)/a_KiL=LMH2L12+TOE"j%f5Dtg6MILPOtj?(]7(*6RD.sq9ig!1DN6$(D>:9+SX]6K$g[c)]^*%f][uiFqDl`Gh=Y&<"cC4,dC4JSDmM6$-L^eJT+%p9lDJtN%=hC`AER'd(X*ut9S8Io$T7n>Mgjg+i[cP,Mp'7-h@S0k=lXuJ(a/l&'o:2_ShjII3r3"phlcO)%p!Y@mPump-3Ba<hf?^$5>RlD!%le_<@G79b-`#[b.ZVQBW/b3fJqUrXKBB"thorapX'.!E.qfp`=W=Q>i]70UE1qr6fRpEYB]70In@8.N8j*1IgNJ$:@TrlK$MKu-T%2I.*c_Wlsg_nAsTQiDo!G$bp:`OhM'ibX,6?D"Z>csocE7_a:kU_A+T=<$hJMHP39"K)RI.8U=fYhODS#\A[7r(hm?-PAMTN7'T?%.lXKQ"bE+T4i'qQ3Yq63O6F4!GW*j%k$R;Vl*>A8)'o"8fou1#^iR3qGd=08fYPHUS+JW-%L^"C8[ES&pmOWV5.4VkIH,eQ[Em(C%qpebjd,b#'kK<71PFPW;RU=[a;7dg[>i*2["9,d=HmnL_&HAno)kkd%/G,<4#em29=:f/Lk?p?<`dEI6.i!<1okm-EkgH+&oo<fY%p3i-V+Ij_sT&<9;dR3-]UJRu2A;Ck<Q6o5+]+Rt)S6cfhqULoT%*p-7ngf,N57V%CdD.nCVIfV5(ckAr4eX=pi3YG;Gg!c,o?W=^%,aJ%RWBud1"m;5LkDR2e.9e<nAl!d='9M38K#bFZ)foJJ8>c45p4AnfA1$Z.kO,>g1)m8RdcGi*)a*]I2nY!s.-GA&b884fc1=kg%5ItAm8oc=RdrR7\eW.@p/OH<060UMk&V_sSaXD`3##%Zqd*#?o.mEF9OY4)"g^,FdRT#!==s#=:cF@@#0[>nlMKcVggIuDq/;/8F%)p8tq8d<Ej0/=X:elB/q^0cThputq<pYPQ60,KBY4Am['&1WQHNH\CNjZ>^'b9&3eIERegEdgb!?]uii?[gXaO_Ab^`SSoo:W2[N%,1Khn+!tHfh[$OX??@A8K"_GAGrkntce8V$$s(sHLW=Wo7)\(Y!<31ZAZ"rQ)8\W.X\Cah:lrM4NWJ,^N;oWc-R\AZ\%kq-pit&2%Al:LI!<''83uTFmmn-#F>ESZ&PmVVR=B!`sqasjf>Od"8Ti;SlMMV$)9<Pc3i/s2ag-J4X$fT)XT@ggS)XStR&Ik9$/4lM?Qt-ih%<s2,t)NtoE7\QH=#eU!!;d`sf`$X:XM/MRfNbId;(RW1&hM8Y%MN)pu*l5B6n?qdsY>WD*-*Y)'-PA(2LtG'D'YA2\cqrI(j'!qJ%-5EhnU,!K.i(Xd4W9Ggeq7pbm7GN3s/.!e)<2b%q\[m*P1d=6aRDEt?G(<+s+Hj"Iq+7NU'%h;q\]SqGID71)J]FY.jcfK6iJG^;%VmUfYH?]+dZ546Xp4).shhBSeUC*8bj9a\"geAM)cUj8d$b^jkqJ4TXn6`uQL#pc6(3Z\pke+$"5%Mtr\[&+hT18/^WO*@d/G(V3%NS):>'DUnS+qpHlcEQXOQCUM$<9t'tk"6V<0btQNTU5h+(neJn!]['!(m5iordk]:UM*9tnFLpcC1Essm<o/#nl\#o*%1^[ED??@%-N)qVU;V6cRLFq1ehk.i>_'I[Dq?1/iXtPQXWTC^TY[1T.eBF+Hnl.fJ3J4D(e"0)<KQ2"Y8EGZJ3&O#?-+`rUph7?])2W#3eonr%o2t>R@5Zk)POr/W4@[9$eMC&1Uq,5Prr"5!#ENkjPF@`"!Alg'pq^I59nF)Rpq1.Jm8(OqIb"sTBkD7<kc,bO9#*j7?4![3Os."&%DtNHc"tXV#.CpNinYu4>=Bp$2cQ9l72[e.1<gWD0!XNH?KSN!%liJ-q]_>*)pu(>).6mhtX&^.**?:m$b*'AU3Xoi[.c=[<O<pM+%J/B9EA(l&O0"o#<A/,YC^Q(_DO_CJn*\0FP,4natM1eGOKTWh\I9BeZY4QR1/:3f"iHKNt^ni5tR=N'/(92V9EZj4<5^cu)SfQr(%e2nk9"[#$b&,L\L@q@o4/mg;R([T5p,+KjZHT=s[3(D]CP`>D`8@e)3?BuY_?1K]@V^'kn_QQZ)LXKtQU"$#hV0*gJl]@KC\Nj/7%:b"-GKC:_l9or##lpbKrqVngYbah:V_Rul'Wkeh0[7"+\eJ08FDS?CU6jPs_FB<nj>!mo>A,fOU5r<&:!F\cWTN<F+kUc`qeK0=\%n"Y]a)b);ai.33XAO*=C!a^M88857+,OkfB,TZGAbb\b8Hd=NL'T!sn*hH=Tpq,CPB+$m/pbc%CSTs#9(s1mG"VG\R_A7[3-&q@:%fbT7,)/SC8B0Mc9#k'g5Le]G/!YKQ9$k*-sAJIULf3o3pQBLYZfn??Gc+28A03gK@V0"3fJn>!:`>jN_?,M?5(*K-m7Q=l1#;#aI%L(SP^)g(5rn!=#rcK^/?lL:rM'di8J8@!.AJoj7M4-LJX<,K_uWo>m#-s-#OQEd+:%UGdW0\l]'Zr7i1Z?m4F8LDgc@:IgZl]fG!%d2aS^Aj*b0*jZ#9llrU"a'r7$%=K<Hq`[P5Ag](X[M#bDLhJ@1Q6;\kVnGNr@_5/n!^Q*gO^hhu:Kif%X=d1dS3MXE$-N@8kH':A%dH9sBHoc\n#gqf)+ap`<=bLJ[plGuD_[+ZPnKGimRmr2lNt3BbRmr4(`J;ANrbge$BFG+XXPuS?E(lp<@R7fO[aCcH`.Cgma"A9@%*Xe]WS0eGjQaL;pjn-AB`XdsQ=Y+>Sj_h#AF!`aGTn8mI-qqMQM:fZe`@G,;D-K"il))5Z`<rD,.fhcqkTgf?$3*+]UQS/Z4>2lY%jJ2KFQ.#r=Q^9)_Z/PX*.N[=_L6Ed^)ea/iG[\%+9qU6J<TTm5oFIs89?Xn'(JnfCJj!3Gj?.i/P.Os63=C[Ke3r#"Ko;-D!FO=^%,pG]kjX'ZEMSU'iN$'16(qC!0.SL;f9`HX1iY"*,:,"dB,tW].a)73<JP[/;T>QLIlq4ftflN<m:\rP'0Gq/$s&p,6^#aJm=h'[`%=LOV^5>T3*KANt"E9!uIipZ/C#,N=fBcDl:g)iq\-cC%Z&&.s?3P7B>'L%>.[,r>Q?A/UIasl%+\oIO.U%HZf-ZJb"Hbs,WW-\K"%H:#ecdhBI.06e\Z-&%c-Eqb74-0PL/aGq?<,4D?WG=N>FO?U11>c%(,2]J>o?"Bu54IrF@gdOlb8*76.4?jJR.Sm_EJgYM[T<Q=>%DMO&N$GMaj0UD4[pUqr%qc\Zuhq`YWOj3tGhZ`j(jb[O4#)rEBeIrd[d[nP@qUlPI7<u6IpDKf>YfJ*Z>$p6l='Z*GiuL@BnpGi]%+N\6`rXBg,LnmG'32WKf.nWXFil<tqU*C#d$*==bQ_ItKBI-L^9Bm,r%q=9c<;B?('\122du7WK"JYAZ-fp4r:p&(_eT;#"W)_@;%=Y24,Q(j_)QfW!PY,DqIKcs]XV*^*NS-e/oJ-AeGMn<5OW+6&5[R$/$[@!bDb&mbSGses*+"uPbS&5#ZW,rff"JCkfTdF2>i#Chk%`DK,%o:i0?C/Nal&DYUjk7*!Jge%:=O+,rD?pS*G;/uR:hIo/4:?QjK!DB"X8Osrg;$dWmq:+=[n<*`[9D.'gEL>+W,bA2H)^b\C%l8<_]pu*Q3#1)Dc*b(Vc87hZTREr=&;XaE7Xuab7ZBI@$9iUO0p^3NBg8!O':bfPg_Hu]bq<cbMb(OoQRu36"liueP0Y0%k+TBnO%\A^WG,'ajBk)nrT4jk(@ZlcOO2f>V\O28Uj0Xn@?-QS"+(4%8'MV*P:o-<XGJb3%HaaV2B%\0q#`8:C+`q#`UQ?IW+.W=BKc8!K=%'nlRk0_n7m\+gkCp*$S5p)tX6I>D4(C>?o"/GsPm5f3R%LTQ3j-r\6J/b^Cki?WHC0$@9S1>"sT0BXq.!.%->!'%%kdsrQ6pLR7Y%`fl&d=_+m)M[e-PZuON]+pLVKrfkTDJ*!s@+Z?Dt6E1]VQ:\kC3o:a5=piH"eE`CE[L#tm$*\Rc,NO+.-q25=9a`C:Ng\%!RfMj@%D&FK5%pc/c`9kDKj@g`5X-Nm5hZcUoDH]/;M.!jLq^4+^M3+Du\pM0KAJ-[OPm"$E5FNNnEq^+8`R`U.3(s6EA0M/)qJ?:NN6-5p%D]'NZ?#6lRAE8BLA7M<N(:egdNOOgBNlA9bAr@N,QZ!&GpV=NUL_Tpbq)fYt3CMj@K_Y2kW^PL_K6G.1b$3M,(ugD<<<*6&Ziu"&%Wn;D1-3sEk)+H\*ZeU+R[/G`22oI><QtV-PprgF1FJC6]^`EL4['0_M07ph/+n#f\8+$d.*6na+Y(a_&qLE59WY]M-Z>MQ]-W_bt%qIr>EZiFDmOepQESrJL+hMbC9PQT&t&@4L(QBZP>0B,,B0nB'c\WTn!-$tFLb.jC2i)g/YQDJLtD<GE3$Lc\l[=b,G=`!gXb)-C#%iA!F2TOSEmnQ>UNM5WPFe`;s-8LGuTb@=!Q'lPG-dkE86&g?l!Q7!b(ClNPj#L18U[MRb$hej(aSWTB*e6$8E+F7?HZC=90H]ce@%:(lGoo1!_BBT_i$W&X%>EY%4kr_O^*ool'k%R$-Jn1(Vm0.4mlkm]&<XG:6_2A0*(Ed6b53_uWSrM5]e4F/RY7JcOX79XJ@%]lA1%@I_gNHpfi9s+J\,jeMC%V3nQMe/f;-47oE:&-T?Tr'H7l=1*AUTWuJL!'L-Ym;;nPdXgs`9Ns6pX1KC,,p%qF?"pc.b&+o!c#KRE%#Red?M<A57nN$]--6Y"E6,jI3?]j?JZZ:5AIU6euG<\HNZIdOA'R2>]YP?K7HuUqKfF.5fF\LM@3'0W@]9^8+Y1jdEH8OaE&-m@)%P;tfUj:br5e$LrBT`Skp'Fpt6<DmUPP8cqTK@r`_UK4=bH^Z;)d(DQIfl48gNXA`X-VA@/#S4,$2hlQ_4&s23nO:>W.).kk5-rM1%G?B7Z2paHYMc@5'5EMrLnfD+ORCud_Fpm;g;`9[(,1;n/lTA&UG;5NQmf7P*"YI7P83&;JLGL<TR)eW.r3qh5&XSQR:=8iG8('[b%n\`P,`:<Ld:n/.EFG0Gnn*ct3+X*EV^+4B&a;%l0i97+H%'>';Nh`Le0Ju<7,#9@5BSnW80]uhH6YTs&b(buT<',o-iF2uP#*8O>%JJ*[>V0$$(V\b+qdJ>G0LqM`0P/Z&P'CIQ;`J>pq@[mV_%inJI,Z$W2lK*Lb\^A6hADHrIM`m3i_:hDUnWbmRblQ.sYPE[E?,4-e%]A]kOl"daH>Ws6o1^As#$oNjUjT_?p8ZhSs+LjtOpceiZL]6C[2b>=N<'1XTii'68Fnp#]2]6Sd-8+1[/1W7Y_qni^STKNLmNa9n%^T=ih$gsfpD#4ER;f4hlL3S@%:_c7m)fO*@2](Gu_LM<0_`p(4,0DW&6+Mh#b9\!o`.&?g6j!AG$'Jr?^-R,<On.NCr4%8A^7jb/%2rhVo5J7Wr5(\.AU']ZsVkku51&f;DiiefO$#Rg;SorL%.CW\67fA157,n]_U>:=2BSlt$N80ZVBfE508J6hS]Ne19S==*?lD6#@%"GHFW`n>o7!OU4'SqUo/5t20HNh_0HAMc\@.?[=($CZuFBbmq@Pu2oQRc(_9/u,-l6*TK_#qAOpB`5E;APulM-N+mo5$Yo^)DB?S%;'nTITe7C?Z*L=sC)IcJ=:XQ@YYdRoPX#dN3mL#_4IVr&'U6Do;8A)Qpl:3:4@d$BB9_=F)HtO=O9%mW,0J:e;)CX4j,cp\G<cY*%GdS-S!/a^f"q]$F'e=lJTe#=_BLT07M`X?@1l$hn+4-8)XTV'kD@E&4(gKE!,V+$=6^LGB([,OaVR;D6*$g;Ja%8It.:AkYPG%D8%E`!f9L*7.X#*GN*ojpg]UBpBgQA%)INSu9b6:X&-:MBVNQ&+J\GY6G@AcY^0bmPJe(gR.aAQVG"8hL3+@L0nh5SK#f!B)$\Z8<k:%j&n]I,#WsS=B=0+*[MFEN.ko=EK28`8R)>AP+52Jgfc-?M#_%B@o/O229\u9L9V0$'+pm%<6bSZE?9<j.A<I]a!TSe':qYj9Y(TU%q0<;V!e`PL:md`;1>lGm&Z8Ns,Ud(HAu7PV_$(el-REA",SD(d/4q\WOZ:PBc='Vu%*0GXct\EYbV[.TRT;,'$'q8>,`8AVRM)!s%G_2&)>:SXNmh$[o6kb/A8L,^C:7Okc7%?//-qu4"2`AL0>XC.h0B58.lo6NT6Sr1I2k^Yo(Ps9_.?TF<)WC?8/.^0q2kdIU9*d?V%n[OAVkr=FUnI3?eE+E5'EC:f2P;i_LS*'7bo/%E<Q4W&+TT;\_N!.TI6P?@dM\7/-_t))l*<$?P:K!ul<l:SDSekC<Jk!Tk-UcdF%#`"nM-/'s_U'r6KV2um!!5VcNkdjtaVi3TR63W@gA`JsC_5Q?M(mD55$pK?\\S89A"G(\R,8($BOE!l43u>r$cSDeD'8pV88CY-L%M'D!4-Etia*\0ZbR5Fr&W'"d[M@r$%.O?EmqZ*1"#Y$C3"G&!qE4i&JS-;4;6o?C8QWaH?:^lcl>/j5#--hE<$d0ic5U1s8jX=#l%e=K<77OK%`mnt#L%K_p""C_Jk-\=^#T-Yf3a<_*-+]2'M"aqLA7MKQsk0ReWW">[a6T,8D*)$m^`UR$^FO`&[5UD4):6[J`9dC!B%UHY@V&kAup(?SbqZ._gAGmU1A!4XrgJ)j=+7T"DDC9d.oA5.T:6-KJ?KOcN:L.q[]B(SHR+W_"Sjq9L5OmB6!,C2nT"!(r4*fitQ%*F+1c!HLac]XAP,g)ng1K&@:$>S;]lJcTQJ'$qjICO4<`7TENAD.VR7N!>Qb!_`*(:6g#k"(&@&=A_o%lp>1)%*F5(^/I[TdO^<5%Tb]@,`=X6Z7pt.AA'U7a.C.bCd30Q.b%_b/`R5b*&j-3U[Sem<8d7gb!aT1>Cd=4?UmSB(<$3@GKnN"5V[PS(63`Fpi>>GXTfPj`%+;#D+l%#F9Xaj$>\Rn7c:30f0ic,FfU&H>`=bAJi@i7C0UtF_%2Sjh\c&(7&3/Y^`JD!ANbVNX?o-RbkF;H&UEJ@Hbg/q:,,aB[[%;?p_=MP;]F<'NbKf";E4Q`^b`A/tM'<0AAd2W[5%+O:MLP2h[.L'!t,0[kPpN:V_dl=9:67Z>K_R3P8Ei1]s8M]8Jq^-`fudkq2Q%;7(!o&d_kq@;&!g2;edWhN/u#?jdBkJnCtE!%L9E<t0O?)M(/hH)qTDmc36sUFms#a!G3HH(NVE6=[j7$B121[0;@F6oCtnP,X;B%`<k+i9J\d$VlN7d#rBl@L,#?*Gaqt+Jd7RY+m)\8$P;.tJR)F3]22."e#noah??.g-*J:M(G[nNF+N%a9L@oI+N)!(M3XV>(`u$g%a&$b.PS.gDTIeB-)Xg"DUj*\25-9%663WW@hu\f4:?,Vnas?EWQZ-J?oe'&IK*u5Q!jkghiT$_GAl'(6EMV0J5\3o"1'U>gfFrjH%<9F=q#[djCj%;!.X=XaIe2eDM>`i,XE@ubraZ+H0AEQ92;4S*&9QDa&O=;`3MK=@F8^^:!lWiYr,j.Km-92lU1^Qo\#@Y)m+_Z]h%WcNa2K*eJ7!j/$O8Cb17_dbZXdlJ:9NM'C+`jn@Z!'$f9(C2oYrs@4m5Wt2G>&c/3Js0lL[ZW"E6Du>0S;UC-OdukRM?L(ZS-t:C%9CSs&J]Gl1SEaNr8ea3O;^V;YBMaj;8R;OOXg!uLCEUVogiTMq>df'DYCZP,_\sG#6_-]gf?apqnhkM8P-;,OAA,1_OG(iuMQajX%P`/r>2&HsrlNEJLI1<SPnMN-lP-9E;-1F6,nhh,')IJ+?@IXgg7I+_3=CA=Ge^je%'E^4M7b3eP^4of<q\gq0g"0'iBmbn?12&KU%L&G=8a>I"U1bgG6jCFB1.oYG1%#I)E,Tp]1C4&_RetbtQDd2IseFBsT#P@jFf'O!Xn*d]C#,2u/nA+N=/Al^q(:>e>,l%:0=\W*)%/<^(%WJM8)!ThSL1uBKY!(:0mL=?LF"*'P\A0Y2qae0n3"WbCAYUgW<P!p:Y'eKtj41H8,#*R-%+:%prX1PrLbAQ)2$g'\/QN<8)%\6IipO7n9+'\Gs.HiSFJVDi!H5\;>[gF`9jb=,;CFcK5^Ml%"ZOC2\F(*ufj\O9:U#k<"-3kkq*)dGapDb)n+&2s^<$E5g<RZo2@%0(Z(e#a:YmG$Ll6Q*ITZ,)djb@#S-W1`aCTQAp-I#HZkdU=,m4&.Nu%dLk2f5t_pp4b+?P9S!uX;I-Xc>K:?2=j]7Z)b<K81D`qM%c!T`_rS]kaf2$6!/J8k3bDZ)$5c,[2,dC(PD;Y\S]ZB@_A*Ud[/HOU98MJ;oYaOi\FgBX7,@?YOWJ6'(#Xj@P`KBXZIZKRE4LI$i%9MZZu'+c5h<Mn'[P5:F(\ubQfDq*]F7",msPa3WKTS(/GL7O+d3\GSA]W<2aV2iNiAV3B;JK07)83gQ%d927c&^kb<9s3?)pj8U-%Lt<qBWbc2_63"nXo*3DmBU9PJBaJ%@X*I\j9:/KpJR\/-)@QFn&jkW5ZR*D[oL8qBmcDf;&fAPL`D8b9@dXUl9$L3]%Un<m7HYGT%aH'Fe6hTMBAiW>P2Zkn)_PtF6L.#-V3T>\lYUd1;67'Z<gIiXuq^^nIP9b66KUCBmj`VEj:Ej0.&[7Cnb#bN6e/H2>lT0t0Hm0/u%3Ntc%?doa4EdgHPd!9;=MB3pe,giRRUi]Be%>J8ReCM"con^gkQiV7%^m/5n)RFp)-%KAW]aVGr7Fdk6rk-YJ/MS-$)pBp'js;j"%,Fefi=YVQ`*!]3^ck4DQKe)W1U*h/V?W8d7XR-qIbd4+nX'==^h2>LkfX03Tqbfi2La\$2X&"[+q!%"@N;l.Rr5Afm<rr1/R)tqj%@2lU:htPrFLI_]F!MHQ*Q?cdL/"f+&m$_%lf';=%h'fjcXJDn1XKtHG.L3B)H%*X`O(AXh3%qYZ>Zpat%PuFLR!F-'*%X%p+/ta:%bGj@i'/p[bBKeRgiG^X#OJ$[FH2`U'-bEo3r=S[eUT26)"6"kNkPBbWfOaOJ+cCOh_l^7aNX$JAba'a^iusXU>X*PO4)=HdL:hbZ%.ctjne3Wm"fjV&M*:FoFA$PS(6oq0JcMtp]jUB];IgfJiO#^Q7SH#3g%KFb;E(X_X_Wl1F!+599dLcK#U.oNt"<c,WECeil5nQTe%J148n!aq0rT=)DrN?8!9668CbIuC4DedlTK,pGE)o3O[m^M/!AKPeSa)iIfE_JtEn^i:O%eES&"B?2JNJ^ITL:CRh/SWH2sLVscX%RF!*I6kBh=(hp_tBO<5aQ%P8&O^1%1-21CO<u,MR_Iq]k1a"43mSs*TX>kSKfYtR`c+@DO\Y\E/?0NWj,>%MO^.^8hWBb!L78;^H%5c-f&<haec+>2c9N;Y571u3rCU-08Ga0$PPO4>8Vp`%2@C3N]:"s'1^)N0G7Dl/F'>kD2q<Wo#rI1Rs">VT.t%[ZYn7NXu/c6EFi%J?g_d`RmZteD;_M8U(&d,ah"d7hj/+.Nk];S0uc^E7gZe$C`IQ(RP\SdAc<Bp`\.$@=8.k@%V;Wo;9P=kWqlJ)RP2?d.a8*is.:b%M)uY@0Z<J`_i,\AUr6#:/Fu`2,7+':Vi),ia=::_djV+L1nZD9&B>FG=+_em8[H`Hht';Js4mQ;Ocil[Y/dM(Dt55CT-nG8&ARCb%J=ucOWM(=?i/j.s8-BSHUclXFd@hmj,?ID/Q2Y+/EG$9+8:48HPeu[4?G=9;j)Y3a6Yi/m.#:UJE\rqq@Alo=^,`&Y4-UTW]E%P_%Lbtpj+9;6.^eIYaMFbXGE)u]Ji_;q-6PLdm(m%"WK5?,dL?!@^KHaA*^Z.$]h[be^39<OFoMVr1EK3A$+O+L9,!G9HWpVD6"5!iq%_a$Sh7iF:e;JolEd1r,],QM7EUqh79O@8GtO*_'TC']XVc`a9+7,E`5"`-@7'ZZ%=U@=9#c8>04#./edU5'dX4Dhi$29="YWVm8A%YkS:n-H*Z8mQjn42@KS4`e9#*].%Mb'\^U<8qO`*')eA'LH0a&6e"D]$R6P2,6rgBS6Q6]J:BjH6@qSB,QT]T0?9N5$4GFp+YoI2%jghQM&J:P?@?[(i"),VV@A`9CpegD8E&)EPL'C<R6Mf@$nJD`=j_0"pOG#I*U+VZS1PG+MF>q)j68jt%Y.Z?Q/.$L"_sg>OJHs&&%H\Bu*abmj`mqT-9fKQ%g.@`)*U47!HTb/VNBFsao%[e7:>fZp3[YrAKM.,\$*C>eM.*12QgA"W%n?E=Me^$:]Me/0[kWpO2@KtR?%\rMfjle<!&L8*uE?KX`+hBYs28d3N\oi[?J2d2SP.UX\Qnc]+PfYJA<%ZIrqf]=jY>a;i4YRk<S`QhXu_Jr]sPqW%R7eS7n=NuP+%&0A#_]Clj,?Q,`cU<15o6Ho4da_`#DG8QSi(\Ru'$2,49-":gkFdS=^R0]&[?c8hXI>(Wf`'A<9"G]mZO!H6mZHpJdC;ph02!e\Q%Kd;:Bj@GLMp$?tC\f=_f`6bApWZKT%7XHCR\`_3;%HB4!"A8lUmDFgt\BH\Eb/uRLJt4ID+)OONGH?aGP]9<M;5-L&B_PHJKb^!g%&lf-f!C5ddE>SmF`ZN`mIIp)%"0St`1LI+]TQY)&Bs1FF3\_9M5r6@(HLkJeRS]n^jPG#Cs!K!/CY.EsN#2t3Om7@8C?!/.Z6C#-%T/R+kYqAFtL]FsX:'2&r=;U>kLtY\G:-FpjeJ=MgLR^>V(.A]A2FnNKJg-8&"aOr\<h1gPPTu/UeqdcOb9B`.EliW(JJ-4QW2H*j%g7XX;@ekr0:_CY!(%a.[Sb;c'UBP:9YcFGQ)J_NYhQ].9)$2Z5HQ18$fOA%Xg;n>Xje/&$hDc\?N?of'Rd/sn[+V;_?P_L#O;*[q%/`V1(<O&mM#n&_6$k%,-`0rPrf=m+t)kEcIk:_iU![B5(0LqAgoGM/!/A8tc8KkQ/U`4G-WJT3]=/Qn,5ogDReBq\o'7m+t>;5W9%EDf<*L6Gf"'O%g_F[UFe=H!2O_X#2]-Xam?TYVQjjp]N)7T:^IA^6hlS2m,=,G\NI7iO2L!<GAS)]:.cLmta`=BnrQc`,dT*@<Wn%CUBKg=Q9OC2;V&01[Gs;O;HL30O]rYFHeWuc?2njD$6_:F;RPBOObCEKF1NA8K;ZeAE0]sm].c#*J6:G@.HdB.;sk^54('oaOTet%:>Udr"`/YD='1KH20.lu5oXTM'o6L"f''K:XDpOj2;[Zn`ieL-oO+soiob?"@^NCNA5&5(ZuH/2Z8kTm,7?Omol8?u;4XJApki\*%66"%o8sZ$q`fdYLpC>p@&D)Z<CN%S>.;@-uX3]874#K!->IlFKd%;QBb)=.MXTG`,de-@eELtV?NeT85C*/Uk93`?6@:Cb"if%S:%HqNZY$u-Aq`0R`o,%m"$g**r<WnIXX/4%QMgfK9.r^/^ng]TC\Mg1[c9W8GgBX79#$dfRI6P#Y3pQ("X*AiSP*k`-o'ImLe&/*tO%$Ss,3r/t&7"+dPL$CkHH_dBNV58*f*1hSgfG%AuA8);e*g&a2V9"$P]^:DEY1('o;,].SmOghL7gL^o@YK"A=qV5&c-FG#0G!BQ^%hNat[]mR9*JMkps'(;e+"$o:5iuo+&<mjBlJV`!J:m0@h533KtM8bQ4CXqPZ,;20?KP\o:lD3EMXca*od'eNKF^%AE:sZt-B4$NU%f*,TLq7Pt^N<S>6o+i-SM;&54s.GZ8l`lXNbDAo-Bp_c@EGo8`b>Fn0Q:R_>S&U@T0i=@_Z<#5T1hLHXA!Rd,AncjU=__fF=PbLc%T,VE2hCe4A"Yaf(EB#[^2'^kT-b0\ra0K8KFj7t[@c7!LH"CQr=L1](]Cu&+H]^Z]U7gPdiP^?1#[hGj2\%!^;q/s`DEWs-Z5;A*%nr:NuMHgiH(_j(JJ5[j52+/1d+*lX$bT(forhCs?aTNbp_3sXToYr&gid;\%C7H%O(ZlZlBGTJ>@,VC-"-HNChM:_aDB,CEaIG#a%E0<e&fmLSE5Wm&G_[2$:]+>P:pFTL3)i#iaR>n/)D]I3N;mPdrS,0X7M#QAAPPZbd2%DV4a9thaNC/JDc*Q@R=s=r;FpF1eMEFs"%1.+G3HpQ%3oS%?F69=29+HW=l2*D0UIr1Q$JTiaYV>99e(I7]5%E<['W$$9:F6dZ/EfTIIF5/afT<g>8Oi3-3=N?CgLG_X\G(\<>%`ZY>rE<ngJ*(o;RCg8]u*hFT9haQR-<="BMRAV2`R5pPR0T76Kr!,;JRn1pGLCQpS*eO1,+nlUS!S,:W%Rc&2($3/eEoW6o8^&rV%q%&Rh2\&sqR@BW*`hCj[Q;bd,d2Rl8)SV2ABGIakH7+5Q1q7N2HcC72,hdnC1gGc)VX$Wh67c7@%b$o<'((79BMDk<bj)Fhj\c*!%!0QA]fYsT['Gr0V0*N'5Iu=*56Y6uA\b4.P(+sY88m+:(XD[\*H(tOUEV[t^Me>;.>=(J.f+be9KOrqmAeE&*>-Lqg6(gd`jk'qn%dEQf-*TV<$^Y3Biq:O/E<FmriiG:3!5U%PSVLqSkJ:=4lQ;rbBiG:p3`\q9+(m$B"G('Q@:jE3dl;+?s4N/G3==*hX@'JDg&f'o,%#r[Zg%>+80k1r;l9i3:be2b`nck)QgOtuNS5;6\Lk#c<6_1ra=X"m0MBlL`nEagF&d2['7ccQ#L_EBgPU!!U*Zn55p0>88`!9eiU%Fo*NOYXdK(D@9A?-nElei'WSD=SCsW9oXcL117c'k>qrIAT#;fL4jN[5@eiiAAGbpg;jk!;c73$\c<Tnl?T/\)iFd8O7RU#cA;C@%3QGboJ7F's^3Cj,X['UV6`ML/:Pdn9@"!,O#Afijj?K[a9D=.@@qT]3`NhHB'IB/uF%Al'Z+@H%TF!X[-5P,'R3^E3jA*tr7[K`+%C2bL'4;$fspc#l_Lu8PG$@l*i$&&)BNgO,g#Jq:<TJX>Ya:U%2FE-(`"N2jM$`5DIT-G%YUO9$PU0-erJmKq>DjHHh<_Y-q<VsTu%ke>hB6c=P3D;Si`8m'aOQsM7a=H]U2&AGkI'8%qQ,(QBDWf0T)[',fH<,<I<&.m9g'oX!0@%UJ=Oe\1uaBk;!V#(L%3\6%rDYQ<(%@@;"ZV[urYlugI\;[>rWlG30i+cspBMo9>W!,K)N.HJPX&!VL-:IuIY#5D)i6c-?5\6q[rkR<U'4m'dtPhfcs8Dh\m*trCaZ]ddb%A)0FQN'rm]'Ru8O6_"CRfH:bO.HFGUM6Q7bM82VEjFp!`-o/3TObf/GkA$09M7=lX>sH=Q9TlXdX3\&,4#Ju4iJ'G>fc5pK1i8Vq%)i5DfisQURMt;4Pp!P4AW1(7Ta[+I(O.J\r!X`:&YclbO\Mjir6nHC>&/-!.U69T6ao:?+'kb91/M)KW(!]q[=)f(4_'3X@1jm=f%J0!#lMi0=#BJHD00&(I8on9!uF<nmO9^B\C-=T*sG%ch)fPjM&i?2P@F*n1M!.qh/Sja2kgX.%"^hnP7+YXa"/WpV+=@@"hoJXHE%A`/P9(bdt'6%_L'"Bj("Ob:d_OaWo7r:3;K7&(rHbN/q^5gR^o((()$o@AmhR#7+q\A&O]EN@_2#18P$a>&Il+Bhfe@LStG]iJSN%@Nrf7$o/%7nA5q.M\q)Nl5YFAFV3nX%"`$3r@;@hNVZmCJJ`pt%gEL>?t,'Y=CmLVh!)W-P#HGo/2$V3@5EpC=s#86LKP%c+A46*%]Z4VXCR3dc(*gG0h`iuG(\f*bWHGb3nD2$%@8E=(O9i[`H#9fC\e#>\IW$r)Zq5&d/QRXan(TdV%N:YRQZ/T?iOas.VAi_.Edf\n%=!bX%*lC9`/gG`kTf(nWk,]=ZN9=tsP/pl6j5I=qTNmQ`_sF-cK3;+a[aG"\(dCX4iB)E5%u+Xgp($'.#K-=&1O/:@?B4!BNkfkc%"Hd"[p^Rbp#K,[o<?;5efc7_q5TerHKCGn&K^(Ppa)=h#XQY:F9_k'@B72HbT=SO&D)t2^%fPG.MX2Q-p$c0nH@k.,4Ml:P4!f7Z%S]Elkp!?MS&u,.%RXp8!jMA(rQ!V.]3'60I>H%+#fJn'e*QWkA!tutOnc=SFSejA.O7_!BN:24S_`9XpobrQPg'HTlce78"-2NM>%1eJYE4,6gUO`$71L[P5aK41U:n/Xtm*XjQ9"MaVU"r\kO:)m@*K4+kEaXdsWfiP[1^oq"*,S&]l,]!2#5uGOL\:;R1L5hrl<$qc.%&/dBO0Pl2<oYIae2Wj&6#%VNENci,J7cDuRT'aYa.7s;P5r<t5YMn#312Gtf]KdQlGm@*504Nt/H&$BD!@)M;%n4X6]abDp9U\sS%q32V%eR?-!o>X;klI!C"(+&Es@<7`(+GX;J.#3Q7-K:I*A.<#!`h:^Z(5.l%&FWcXkje76$dRa@-caC[GKFtT%3_\U;(;/'m+Ci;%]>`5IT0cS(]*4+%#W7[L;NBtT@[>!(@TRGscOt[mQP:=biM7-B(]L+jabY$M6Vp\nZff'&RMJjm<&s3J0bAg$m"KdUL.N.TP-IQh%%bYAlm;%O[aBZ(f$j;`FKG`KGLH^iR'2giN0I2^(KYrCH3eJ],C'7`"bA4%P>!<M^Z+P*6^T*`970m6+P<JZ6/c^gtGr*0`lq`Jf%f[RjlG7!j1S-G*$H78cOk<6jR-;p(!3bY&&i.XIMB6]gjhUdeQ`\`(*lB^[\Yq-pN,XaEGV9bmm5`Rl65neoD3_VKZ;c;1^QF"<Q%jl_UAS;Qf0-!j<_^M,)'R(QmjRtRL;GR1`0:pNJ-&Im[!2C7#&B74e6=U5Xt!Yc;q%LVcX?uGg1#lT<A;1X-Zqt`'7;>8=U9eKH7%!hhdf789_N,D6Yj_/RnFO#a[_AKP:uMK5(2kQ0Z:T<NM@c[b=Bd:g1#+H`UQb$,J,`4djgY4!RnO[:tPob[nFN_!-bqf`=]\?DX>%XbXSJ6;[_t!%3G5#t4lY2ho[+#t4mTQr;uM%rlCiiMX&HK1os0[9Q'rBVu9'I>,E)gG.>!+r'.#@t^QlD!2NIV@rWj+.lDRLZrbb%pG9TZ%_UgKSXg6&:Nl6n3T^l-5l<*i3Q-bJD`"`X&8RPXCuu;23p.(E&O5aD*$U5#1G6M46``i\#Lahk`&/_&qD"%EP0>.SIEj(o%WPPQih]HNGnVFPFjZq&^LlH4fEUJn=58%o+iXd%]Zdn'LW]7u;cG<cF7&EnQfPl`XLUFZPLY%DI6KR!3X*QFAIarNL%^4M[fmJ+L%L^3XbP!nu#<0!TA1TuW6o%c4qGLccW'jK0,IIesOM%cFY1gp/JK8*%;dj%R9[5^69"h<72-)*s?Y%iE>-YQ_-/s3`"n:LCjGN8#0%^?[(ik7R7"7lm+1Lj7jQ3.EpeDVf=4_\YWB5<<Gkcmj(M&2-`o:X^q^Ua%pJ+WaWNFDCY=6_#g"f^OSAaaBf4kBu6Z!h=<+VH=*[%@.;!@DM+"J^A*lJ(7W-kPBP1;9RFte)m&BAS&(#pp-";6]_9$a4TCulI!cWo`Ht:k4kt&!2*LUbgN$O'D7mt>j,=hs8dB0Pe,)@K%!T]XUmNu=Ao9EE'(?)hqD?qS0k'E;X`4$"=jG/j9+qb0_+dk4Gl5(?][l2Ap.flVH)0bZr%"HEg5&aoki!I^C[NP1*SFtsucj7@Q%j*3Yn[4rX#Y^bU2(Vetn84hd,:]L!@+$]euj*+;6q!+n5?XA3XnG?!G^;IGJM>s43s6r7cAH2@mR_&2/f2Uk*I#$jWBiu7GW;fZc%^M[QTjko5S#5n,"Ifj([kH;h^OA,TH:N*g5h^%hpq[$2Qq#Q)!GXNqX4^eO,0>elfAb.Q$J<6,Oq%'u:p?-X<BL.f$j.!2OZKOMH%/<.+I05f8/#d^hg7c$S?I(#LDS_q<J3)6DXqg0mHjfp?>ippZ)R$IVnU5<4oi(G@CdBLf(\dg?"G)'4'h^^o@\"bdfM7d%a\XlpA%_[3_&)W"ntm'VuM5f7t\iT)Qbg!>6F^*=l5M:Q=m*G/lrL1s0(G<C7)"7rog%Nd94[`>K9lSZnQF@'+eSFO6)?h]rAggQuE[?:2S%_h\euZHfV(/Ub[o(M0./>Kk69%;/dtRrKF8Y6FH'Clc6I/S8R$Y@.u94DjICN+^&MjtGHD@AE1sOnVDapmHspXg;eN9Ac6"EA.:G%@91rp(q1H!=Xm:if>3rfRh=C`<qQ(M`F^7eeO72/9>H"VEefX[f1+UAoePKaldQj*dWKRu0s/o<Mcj2dhM+;6bodM?f7MJMj(?*8%R$E*5L@HTYk==5QL+I4qe@[\`fI2)`j?:r\H18Eq^?Z.%StAm*3.*BgfI6%8$ZB-c#'"%b''+="0Du`oZEI:^5CnFi)lI"k7g?0?%3E9t%;>/_bH_fLn)lRk[;eodDms#W6Lgc]@43Wt4)Wk+`6<FYL@D8%X8F5usO"i/sfC8^e0>@A-Vgj3roXf<3rqQKaa5;?A5CEM'%e`WQRq#9N=T0E5@QV92Le+[MQ-s/Zh1EYSKs,_Buos+KDN'HB.Ba]iiJ'IN)caDB.hn6';*p!%0:@U=;jE`RrDU^W#N;%ht#&SCV%H?NaJ7=SNWg$u_8HiN4M#S,@oO.ST[m%ncE0RVmCDnj->MZ3VjS#a$UA;$INT<5EtLnU/*D3o9WiB(ErpV[$8P6gaRT=:B$C$Vpu%]6<&<ntqBg[sJX'ec1(#P+t3))N`?JjiQQanW0"*0e$9H*b&=F\sKk.0`G])>m.kWH?Rh9=KotYaK8qKj3$dD/,QG9_%)nr88/\A%k%d9TUiF&sQ/,kLp?,UkVb=^Tn+B=@cB%I>?1+pop=dT7UuA=(G3QW@@Y`pYU/9HjmP$0W29Z@XXXpjgbh%H5[a25bgd&4,lh,T?%anti/`V\]$A"(!a@AE1sOnVD]G^C1A7,RTe/NqGN(rXkq*G/lrI_.ckibKF!Y6D,&oc=p+>Kk7(>/PT1ZikZ4afpl>,&dKB8mE;a%&+iKN:S'pr4Z;Zt=HrP&04/mX=]qY(]G$]O.T+:=Jc((\Q8uOs7a]g<(!2;PRC.8\Y(jT(EeeAVlX&9ih$.-!/q*,q@S=K+$>WCP%+*X*;ot'64muFd)1,*'.dao&D`%>S4?a!cuIunt[oZMg^F0VrRCm;UknfDK^R0Rsq@d1L69Aa`Go;l^lGF4Zg)FeT[OqN-o"7ro7%3B?U22pa,OHMs-ZVjh#-3+C/&>]dNo7bMQ%mu`']>`S\f^?5T&HB-6iltb3sR$I@@XgGnJ*VHfKbh#b_nk!-=`"o\b5?l%)BIZWT%EqP%<K&=3$hjG>6jY7`d#r]up0IsbK(bb;frbYWjOacfP3F^)JaX<-(gWeTu@gsZ2!LD0c19i8?B5`j9=j*AK=(o*S3B?UJ`Ygu_%,!-60Che$Wh-kX>(CkbGV=,(er@II\@C,EHnlWfNAiT'ZbJ^8GjL%4lAhA5t?D6=YoMoM)rZ^d]0WaohYE<?Z/:W>4ZI_S&NJ?ul%S90KCW4s2Q3=C"UX;S45ATsN,rRR[H-b6+NQ@\j8pl^S<N`gO\=kVDBQnsG"=u=H!s.#!&2p`suD59>CDrGo:o%J0(I*Xg.GjXPr%RO,Xji=0AaB&XNq28DGR>ShZiC_V<2C-fPmW`d]MPZBs80J.V,97*I;n=L?2g24fpIM4(Ynd*/b]>L_Of.AWRkg(KA`.@_fE*5%>%Bp#pEXR,9'Mg*tfn[4,A*eE4pS@[KaU[5CNpIN3[ms'k4l+:Cthm9-B/cFI5<n;']d"gV//HbUPi/n,/="eQO=kQklR!62KfV2gL%bq5A8?CP/8PeB!G*bZDfc5'@OI5gN`R,5uqI+]NPAY"R$%t4/jqASL3_7mL9`T$5=/,OW%,A)!<MiHZi9Fm%:2p`suD59>C07Mpb%fiq+q(%XS,SI!?bQX9*a=k;mT0qbsKhuWX77]rVT\&Chaf..X<a1?3p%PG3$f\.pS7B_&PO*"V!f+jWi/%5'h&!>AMp2Pjj=g)$t%0^HkW%.gkLW`de[C\O3]rRpH>X6"0*Uq_$F5o;..@1Bh2G1+Z0YZZ.)=kQ6]i0K4<r,tYRqVX)k"&/OQ@nb'P)gSMnn790im;&-B%PR-^T(n7qgaa8_rH"Y.kg8B\1$S*e])P5U2jt+-^p):sMW4&Pg#0gK:p)'7s^6Q[[`AXpNV#l:HZkOTLZ[uCaO7et3>Z)S(=0U9e%*]rJ`p4t4=O0HNF1`U;HDf9GHXlJ-b]=(R2'`TjX46.u/?-`n%Gml8<l\jX6AC&!/Wb*rp.Q3C=E7:uDoi;j8S,%VNLRn.&D;;;`%!6`=cMiB+P=RE=ia0ho@Y%>s9s"YiF*V-?q`b<1@LN1K_-H=9?m@c/sc^1\@LWpb2ZgIecC%'lGY+E3'+.o0S*,!"bo^qnM^OP>e%^'OWP-(b'+]Q-Z-];s"u`bh",bo[e`1i3*(S=Z5dq:T&UB)bRg=:Y@A$bj0cHLpjRIk0E(rUDPm]Dm3Wq,b=WoChS?hL5.tO.Y>.%ol':`^\R;QGQ744l.sC@84@t,GP[Z(mlnMdiQ"`dh`q)/rMTYu6:JoWDr6$BgL%_kDmOQ&D?~>%AI9_PrivateDataEnd