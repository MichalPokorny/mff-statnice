%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 01-koule.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Karel Bilek
%%CreationDate: 8/20/11
%%BoundingBox: 0 0 456 385
%%HiResBoundingBox: 0 0 455.0635 384.1465
%%CropBox: 0 0 455.0635 384.1465
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">metr-prostor.dvi</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2011-08-20T05:26:53+02:00</xap:CreateDate>
         <xap:ModifyDate>2011-08-20T05:26:53+02:00</xap:ModifyDate>
         <xap:MetadataDate>2011-08-20T05:26:53+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>216</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA2AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7f8AmjH5lYaM2hLeuyTT&#xA;m/jspJ4me1+rt6iho/3YlO3omTbnTpucVQl95n86wh10bSrn9HwIjQC6trqS4NusMbM7vIxd5vV9&#xA;SIx7uaBxUdSqAj8xfmDFezXdtptzMb02sLm4troRxmM3QqkGxT1OMQdh8IrU0+0FWaPceaR5xFmE&#xA;U6BJCtytz6f2WQPHLbs3L7bO8UiGn2Q47VwKwfQtL1e78walZahDqUfl3U21KzHJLlkDvcrJbyNH&#xA;cqyRKIEZYpEWm9GIPDCr1aKMRxJGCSEUKCaAmgp2AH3DAq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgJ9c02HV7fSJJaX1zG0sScSRRa0BYCgLcWKg9eLeG&#xA;Ko/FXYq7FXYq7FXYq7FXYq7FXYq7FUvm17Totag0d2b65cRtKtFJQUrxVm6BnCsVH+SfaqqYYq7F&#xA;XYq7FXYq7FXYq7FXYq7FUv1XXdP0uS0ju2YG8k9KMqpYKO8klPsxqSoZugqK4qmGKuxV2KuxV2Ku&#xA;xV2KuxVCyIp1OAkAn0Zd6eDx0/XiqKxVZPPHBGZJDRBQVoTuTQbD3OKpPPeXVx9pjDGaUjRiCCDW&#xA;pdaH6OnzwqoejFVTwUshLKSBUMepB8Tiq+GSe3AEEhUAUEbVZKcuX2SdvDam30Yqm1nfR3AKkcJl&#xA;3aMmppWgYexwKicVdirsVdirsVQ0n/HSg/4wzf8AEosVROKuxVpmVVLMQFAqSdgAMVSe6vZLk/AW&#xA;ihBrGRVXJoRyb79lI9zvsFUbYX3rfupNp1BI/wApRQcugFd9xiqMxV2KuxV2KuxVDXf9/Zf8Zj/y&#xA;ZkxVE4qk+qIrX4LLXjGhUkg0PJ9wvVT79/oxVB/VbalPSSnHhTiPs1rT5V3wquEMIPIRrWvKtBXl&#xA;Slfniq36rbUp6SU48KcR9mtafKu+KrhDCDyEa1ryrQV5UpX54qitJSOO8CoqoPSYBQtNgy9COg36&#xA;YFTjFUNJ/wAdKD/jDN/xKLFUTiqTX0/rXRoQY4aotCd225E9qgintvvvTFVDCqhfahY2EBuL2dLe&#xA;AGhkkYKtfmfvxVXxVsSSxMJYieabha0DbfZb2OKp8jpIiyIQyOAysOhB3BwK3irsVdirsVQ0n/HS&#xA;g/4wzf8AEosVROKtO6IjO7BUUEsxNAANySTiqTXl210eIHG3BqEIFXIIKswIqtCNh9++wVUcKoG0&#xA;1nS72/u7C2uBJeacYzdwgMGjLljGakCtTG3TwxVkNhfeqBDMQJwNjsA/iVFe3fAqNxV2KuxV2Koa&#xA;7/v7L/jMf+TMmKonFUp1On13tX0k/Z3+037Xf5dvpxVC4VdiqyOeCRnSORXeI8ZFUglWpWjAdDiq&#xA;/FUXplfrZ609Nq/EKV5L1XqT79vpwKmuKoaT/jpQf8YZv+JRYqicVSBixlm5cq+rL9rc09RqfRTp&#xA;7YVaxVIPN+nNqVpBZS6ZJqenyMxu44LgW8y0WiFOTwq9STUFx49cVVJfMV3bx859C1FIhtzBtJaH&#xA;tUR3EjD/AFiKDqxA3xVedc1VkJi0C9LkfAXlsVSp6cmW4cge4U/LFWX6Zz/RtpzFH9GPkKUoeIrt&#xA;QU+7AqJxV2KuxV2KoaT/AI6UH/GGb/iUWKonFUr1V5zMsbjjb/C0ZFRyf4qg770G9Ke/yVQeFUJq&#xA;lzfW1oZrK0N7MrLW3V1Ritfi4lyq1p4n+mKpLb3eladd3eppoV7azXQBvrpYfUZlQswqsbyOQC7G&#xA;ir3OKotfMnrRLLBpmoPEw5RTCFYzQjZgsjo67eKg4qy7SLm9udOhnvLdrSaRQxgkKmRQRUCQLVQ/&#xA;iFJGBUZirsVdiqGu/wC/sv8AjMf+TMmKonFWNeY9RuLPUkVbC5u4nhBMtuYmCsHaitGzowqD9oAj&#xA;bCqVv5oiiZUn07UIpJNoV+rtJzb+XlEZEU/65XFWp/MGoGIi10S9kuDQRrIIY0qTSrMZdgOpxVfo&#xA;nl22028vr+N5frGpsstzC7q8aPyd6RkKhpylbriqb4qitMI+u02r6bU23+0vQ4FTbFUNJ/x0oP8A&#xA;jDN/xKLFUTiqSXcXo3kqAAK59VAAR9v7W/c86n6cKqWKuxVA65pEGsaVcabO7xxXAAZ46BhxYMKV&#xA;B7riqvbW5trOC0hbm8aLDCXCryZV4rVY1RR0qeKgDwAxVkkMSQwpCn2I1CLXc0UUGBV+KuxV2Kux&#xA;VDSf8dKD/jDN/wASixVE4qtlijlQpIoZT2/iMVSSeCS2kEcnxA/3cn81AK1oAA3thVZiqG1O0hvN&#xA;Nu7SaQxQ3MMkMko41VZFKlhzDLUV7gjFUV5X8tR6VpttavVktgRCjhKg82bm3HYnfbv3JLb4FT/F&#xA;XYq7FXYqhrv+/sv+Mx/5MyYqicVSnU6fXe1fST9nf7Tftd/l2+nFUg17y/b6wbAyyvE2n3S3kRQI&#xA;1XRWWhDqwpRz9OFU1xV2KuxVF6ZX62etPTavxCleS9V6k+/b6cCpriqGk/46UH/GGb/iUWKonFVC&#xA;8tEuY6GgkSpic1IViCKkArUb9K4qk8qSRSenKhRiWCE0IYLTcEV8e++FWsVaLjmI1HOVgSsS7sae&#xA;A+nFU0sLF4WM0x/ekFVQH4VWv4safR0HckKjcVdirsVdirsVQ0n/AB0oP+MM3/EosVROKuxVZNDF&#xA;NE0Uq8kbqOnTcbjFUluIJLZ+Ehqp+xLQAN1PHr9oAb4VRdhYMWW4nFKbxRGopUA8nH8w7Dt8+gVM&#xA;sVdirsVdirsVQ13/AH9l/wAZj/yZkxVE4qlGp1+vHrT0k/aBH2n/AGe3z7/RiqGwq7FXYq7FUVph&#xA;H12m1fTam2/2l6HAqbYqhpP+OlB/xhm/4lFiqJxV2KtOiupRwGRgQykVBB6gjFVAabpw6WsI+z/u&#xA;tf2Nl7fs9sVVYYIYU4QxrGla8UAUVPsMVX4q7FXYq7FXYq7FUNJ/x0oP+MM3/EosVROKuxV2KrXj&#xA;jkADqHAIYBgDRlNQd+4OKrsVdirsVdirsVdiqGu/7+y/4zH/AJMyYqicVUZrKzmf1JoI5H48Obor&#xA;Hj/LUjpviq39HafWv1WKtVP2F6rsp6du2KtfozTf+WSHoR/dr0br274q3+jtPBqLWGtVNfTXqmy9&#xA;u3bFXfo3TqU+qw03FPTXo32u3fviqpDa20LM0MKRswAYooUkKKCtPDtiqpiqWyahB+kYDxm/uZv9&#xA;0TfzRf5GKon9IQfyTf8AIib/AJoxV36Qg/km/wCRE3/NGKu/SEH8k3/Iib/mjFXfpCD+Sb/kRN/z&#xA;Rirv0hB/JN/yIm/5oxV36Qg/km/5ETf80YqhtR122srGa7aOVlhXmVMUiVA7BnULU9qkb98VRtnc&#xA;i6tYblY5IhMiuIpkMci8hXi6NurDuMVVcVdiriaCuKpbJqEH6RgPGb+5m/3RN/NF/kYqif0hB/JN&#xA;/wAiJv8AmjFXfpCD+Sb/AJETf80Yq79IQfyTf8iJv+aMVd+kIP5Jv+RE3/NGKu/SEH8k3/Iib/mj&#xA;FXfpCD+Sb/kRN/zRiqD1fzFa6bYSXjQTzCMqPSSGQO3JgvFOaqGY1+Fa7nYb4qmkbh0VwCAwBAYF&#xA;SK77g7jFW8VdiqXXt9CtzaKVlqs7A0hlI2ikGxC0P0YqiP0hB/JN/wAiJv8AmjFXfpCD+Sb/AJET&#xA;f80Yq79IQfyTf8iJv+aMVd+kIP5Jv+RE3/NGKu/SEH8k3/Iib/mjFXfpCD+Sb/kRN/zRiqleaxbW&#xA;1pPcFZKQxtIecUsafCpPxOUoo23J6YqqaVqMepadBfRwywJcLzENwhjlX2ZT0/zpiquYkMyyn7aK&#xA;yD5MVJ/4iMVX4q7FXYq7FXYq7FXYq7FXYq7FXYqsMSGZZT9tFZB8mKk/8RGKr8VdirsVdirsVdir&#xA;sVdirsVdiqx4kdo2brE3NfmVK/qY4qvxV2KuxV2KuxV2KuxV2KuxV2KpX5qvb+x8s6reaepa+t7S&#xA;eW2CrzPqJGSpCUPOh349+mKsAjHmJPPbvC2qXPlhJ4oWlJu7iOSGfTzFyWOUNBLF9ZYO7qGIIB+w&#xA;WwqnFzr8ulXeneU/Lqm7ktFMF2s9vOWCRPaDiJYhDGn7m85+tQqCtPtVwKyLyfdXl1oMUt25lZZr&#xA;qKCcnkZbaG5kjtpS37RkgRHr3riqc4q7FXYq7FXYq7FXYq7FUPqU1zBp11Nax+tcxQyPBD/PIqkq&#xA;u3idsVeWR3fmlvMenajatql1pMVno1zqMqm7dJWl+t/W2giA+rTV9WAyogqF3RarhVPdV1yby1Db&#xA;eW/K8P1vUl9ef0Z7aUq3MPcLGPQWCNPVc8eY+GP9oYqn3lfVHv73WWhla40xLiM2Uz8qgyQI8sY5&#xA;/FxVjyFenKg2AGBWQYq7FXYq7FXYq7FXYq7FXnv5hX2uNLqtnYNepPBaadLpkdiJ+cjTXrrdv/o/&#xA;xsEiiQN/KG/yxhVV8sUsbK31PzK15DqumTz2BkmilmR0v7v/AEcRzNG80sSq0aq7NVR/eUPLFVTy&#xA;754GqaYB5gkGnDU44pNOljjuLRjFPAjt8UhJBjdyol5ANSoGKsl8qXd/e+WNJu9RFL64s4Jbn4eF&#xA;ZHjBY8D9mp349umBU0xV2KuxV2KuxVbHHHGgjjUIiiiooAAHsBiqxrW2aX1WhQy8Wj9QqOXBiCy1&#xA;60JAqMVVFVVUKoAUCgA2AAxVvFXYq7FXYq7FXYq7FXYq7FVsccca8Y1CLUnioAFWNSdvEmuKtG3g&#xA;MyzGNTMlQkhUcgGoGoeu/EV+WKuhgggjEcEaxRgkhEAVasSxNB4k1xVfirsVdirsVdirsVdirsVW&#xA;mOMushUF0BCOQKgN1ofemKtuiOpV1DKeoIqMVQz6VpcixJJZwOkChYFaNCEVfshAR8IFNqYqisVd&#xA;irsVSvXPM+iaEIDqk7QC49T0WEUsgPooZHFY1cA8ASAevapxVGx31q8SSep6YdVcLKDE4DbDkkgV&#xA;132oRiqhb63plxfXNlFMGntVhebYhaXHIRcXPwty9M/ZOKor6xb+oYvVT1QQDHyHKpFQKdem+Ksd&#xA;b8wtBP6Rih9WS906O5ke0KFGk+pOsU6xu3wMUeRF2b9oU64qyWNw6K4qAwDCooaHfcHFW8VdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirF/PPkdfNa6cr3rWX6N&#xA;me6gliUmVbjgVhlRw6cTEx57gg99sVSq/wDyun1KeW61DVxNeygO1wtsE/frFHBWnqH90VhVjECP&#xA;3lWBHTDaoeX8oTOtJ9XqOUZKR2/BCifWKqU9UrX/AEo8T2oNiKjG1ZU/lSwbzWvmPkRcCBYngoPT&#xA;aSPmsU/j6iRzSR1/lb2GBUr0T8v/ANE+YZtdgv63V3PdSXielRJYbqQS+lQu3Fo3WquPcEHsqy/F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FV&#xA;K7S5e1lS1kWG4ZCsUrLyCMRQMV25U6074qh9FN4dJtDeyie5MSmSYDjzqNmIGwYj7VNq9NsVRuKu&#xA;xV2KuxV2KuxV2KuxV2KuxVK9J076tqOqXH1meY3E6lo5X5RqRGrDgtBxorBduoUV3qSqmmKuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVRa7j5FI1aVxsQgqBvQ1c0So7itcVQct/qckzwW&#xA;VrFJJHX1JJJisaE0KqeKMS5UglRsPHpVVCaXca9FZWiSxWswkiT0nDyQgfACFPwzVPXw/HZVH/pX&#xA;0TS+ge0FaeuaPAad/UX7C+8gXFUajo6K6MGRgCrA1BB6EHFVssqxKCakseKKOrMewxVfirsVdirs&#xA;VdirsVU5phGAAOcr7Rxjv/QDucVSfTZ7yO8vppGM0EtyyNGBujRRIv7sDc14sePgP5uqqdqyuoZS&#xA;GVhVWG4IPQg4q3irsVdirsVdirsVdiqG/Sem/wDLXDtsf3i/1xVp9SsCjBLyBXIPFi6kA9jSoriq&#xA;XeXri3tNPMFxqwvWWaYJPcSIZeIkIozAiu9abbDbtiqZfpPTf+WuH/kYv9cVd+k9N/5a4f8AkYv9&#xA;cVafVtLRSzXkIUbk+ov9cVVra4juIVmjNUetDUHoafskjFVTFXEgAkmgG5JxVD8Xud3qluR8KAkM&#xA;9e7U3A9vv8MVW30xtLFjAqiT4YrZCPgEjkRxghafCGYVp2xVVtbaO2t0hQkha1Zt2ZiaszHuzEkn&#xA;3xVQsoll0i2jJIDQRjkOoPEUIr3HUYqiLeR3iBf+8UlX/wBZTQkexpUYqgp7Y2JE9gAvI0axGySk&#xA;7/ux0STqa/ZO/L+ZVVewdbiMXbGsr1Ur/vuho0YB7hh8XifagCqKxV2KuxV2KuxVTmmEYAA5yvtH&#xA;GO/9AO5xVSf/AEW3mupP3kqoXc9KhQTxXwGKqGn2vCG5ti1SjonOn7SwRfF8674qqRs8amVVqtf9&#xA;JgUElX6syDrv1I79Rv8AaVRYkQoJAwMZHIODtTrWvhiqyGUyguF4x/7rY9WHjTsPDFVTFXYq7FXY&#xA;qhiTdEqppbDZ3H7f+Sv+T4nFV1koWEqAFAkloAKD+8btiqviqG0/+4f/AIzT/wDJ58VROKtSSJGh&#xA;dzxVdyTiqAAlvZamqQIabbGo2IBH7Xif2eg+KpVVW0xVS1KqAqrLMFUbAATPQAYqisVQ8o9eb0SA&#xA;0KfFNXoSfspT8T9HjiqIxVA3VZNUsIuixia5r3JRREF+VLgn6MVRrMqirEKNhUmg32GKoTSJoZdM&#xA;tTE6uBDGCVIP7A8MVXNKsFxKCCfVCMiAfE77qQtdjso+XU7YqqwwsGMspDTMKbfZRf5V/ie/3AKo&#xA;acfVL5LkE+hcssVyvUCRqLFJT3NEPzHZcVR2KuxV2KuxVTmm9OiqOcz19OOtK06knso7n+NBirUM&#xA;AQl2POZ/tyUpX2A7KOw/jU4qp3vxfV4f9+TIa+Hp/venv6dPpxV1p/f3v/GYf8mY8VXSH0ZhKT+7&#xA;cBH8FIrxb8aH6MVQpjdnMyqTYk8mgA3Y9fUC+Hcp369dmVTBWV1DKQysKqw3BB6EHFW8VdirsVS+&#xA;XULKaV4WuY44o2Ky8nVWZgaFaE1A8cVVxqWmAAC6gAGwAkT+uKqNpqenek1bqEfvJf21H+7G98VV&#xA;v0npv/LXD/yMX+uKobT9S04QNW6h/vp/92L/AL+f3xVEPq2lopZryEKNyfUX+uKoeKT9JSF0f/R4&#xA;zSqNvWgNAR+1Q7n9nt8W6qpiqqihVAVVFFUbAAdABiqH0/8AuH/4zT/8nnxVE4qhIp6R0RfUuZR6&#xA;3DpQOfg5sK0AApXvTatMVVPSunNZJuA7JEB0puCzBid+444qgorO2OtXAdfV9O2t/T9VjIVq8wJH&#xA;PlSvEVPfFUfHaWsbBo4Y0YbAqoBHXwHviqEt0tTpdoZ4lmZoUREKhmbkg+EV8ab9u52xVYNMtxfR&#xA;TyRqszxyLyi5IFqVPBWXj2Bqep/AKoz6vKprFOwFa8JAHXcUpvR+u/2sVUblfrNtLZXg9IXEZT1U&#xA;NVq44/CxHwsCdq/RXeiqrptw9zp9tcSUEksSNIB0DlRyG/gcVRGKuxVTmm9OiqOcz19OOtK06kns&#xA;o7n+NBiroYfTqzHnM9PUkpStOgA7KOw/jU4qskvrRJDGZA0o3MSVd/8AgFq34YqhBczz6gGht2Kx&#xA;RUDyn0x+9apqPicH92KAr33xVq1jvWmvTLOsC+sCREoJFIU/bk5Ain+QMVUrjTob30vWVpYGkTis&#xA;xLq5U8y7Rt8CghSBxXv4Yqoxa6o8xXGh2qTTS2sSzztMV9KjkERxyljIZKNy4spFO67VVTCO5RJT&#xA;6aspNXmtGFJF3+KRAK8hU/FxqD1G/wBpVGqyuoZSGVhVWG4IPQg4q3irsVQ2n/3D/wDGaf8A5PPi&#xA;qJxVRtBSJv8AjJL7f7sbxxVWxVCWUiR2sjueKrNOST/xmfFV8cbzOJphxVd4oj2/ym/yv1Yq1af3&#xA;97/xmH/JmPFUTiqG0/8AuH/4zT/8nnxV3qal/viH/kc3/VLFUHo7X36MtnS3gHqxJIx9Z9yyD/ir&#xA;6B4DbFUZ6mpf74h/5HN/1SxVA28upnWL3lBECIoAo9ZqcayGo/dfzEjFUv8AOGm6/qVjarZTrY3F&#xA;rdR3KCKWQmcxq1IDRY9mJqSTQUqcVQuj+Y9VSwt5bvQbuOb01jVaGUBQB9j0FmFGoDWu/wBwBVXu&#xA;fOFwhhkk0i8VEcszCC7YgBGqQqQMzfIA/LFW7Xz2l5GZbLTrq6hDMhlS3u1HJTRhSS3Rtj7Yqqt5&#xA;pvpI3VdCu5tviiMcicgdiP3saKfvxVW8r3OpTaLHN9VSP1JbhgktxzcA3EhHJkSRGNO6sQexpgVG&#xA;6dd6xOl39bskt3imaO1PqErNGDs/2eSeG43pXocVVZptWWGRorWGSVVJjj9dhyYDYVMW1TiqW6fc&#xA;avcczSCGdxWVC7+sOJod2jK0BNNlIHz3wqixZXZr60KXBNOYluJGRqdKxiIR/cuBUQn1+NAkdtAi&#xA;LsqrKwA+QEWKpPqmnajrGhajaUggF+XBlZ2dAqkIDx4LyVkjH7Q64VSPQtJ89W9jb6XYz6elhpqx&#xA;27zXcc8z3HowRxxEKkkXEcFViWJqe3fFU1MH5hPdEC+0gPFH1Fpcbeofe4O/wYFQY8p+c11Q6wus&#xA;2/6UaL0Graweh6exoAIhcfaFd5yPbphVEXY86OTDPf6M8i0IiW0umlU9QyqlyXBHWo6dcVa0B/Pl&#xA;vqklvfrZXtjIDIs0YltHjJqfijc3BPI0/lJ3JHUlVP7+41uKymktbWGS4VCYY/UZuTdloUjG/uw+&#xA;eBURDPd/U4ZZ7Urcuqma2idX4MRVlDt6Yah2riqF0+6n9Bv9DmP76fvD/v5/+LMVRP1uf/lim++H&#xA;/qpiqjaXU4ib/Q5v7yU9Yh1kbxkxVK/N1vreo6M9vpss+lXIcOLxTGSAoO1FmUmppt36Yqq6Jd31&#xA;zai4utOniPrTlLctD8J9Z92/efa/Viqa/W5/+WKb74f+qmKoa1up/XvP9Dm/vh3h/wB8x/8AFmKo&#xA;n63P/wAsU33w/wDVTFUrfVNUt7NGtNLlupHu5EaLlGvwtM/I8w7BePX4tj06kYqnuKoG1SeCBRFS&#xA;RE+BoaBDVTxLJvsDTlxP34qiEvLdnEZbhISQqSAoxI68Q1OXzGKoX1li1i6JBYtb2yoij4mbnPsP&#xA;89up2xVFwwsGMspDTMKbfZRf5V/ie/3AKqemf8c20/4wx/8AERiq+T4rqBD0UPIOtaii/dRziqVa&#xA;TY6H5Ztm06C4YmWRp1gdvVnJkNPhRBzYDj4HYb4qipHvLxCSGsrGhMrv8M7r1+ECvpqR1J+P2U74&#xA;qirGIRWkKBBHRQSg6AncgDagqemKq+KuxVC3dmsh9RUDMCCyVpyoKAq23FwOjfR8lVsT3CoHiJuY&#xA;enBqLKtNqVNA1P8AKofc4qunv4hZzzQsDJEpIRqgh6fCrKaMOR6DviqHSS1SOGGSUJbxqohiYj1J&#xA;QooDxG56bADfFXWt3I8956FvI4Mwo7j0lB9GP7Qej/cpxVfbLfTCSX1I4Elcniil2ooCVV24rvwr&#xA;9jFVb6hC39+z3BPUSNVD4VjHGPb/AFcVbJWIC2tEVGArQABIwT1IFOvYd8VVYYUiTitSSasx3LE9&#xA;ziq/FXYqhtP/ALh/+M0//J58VROKoeCRI7d3chVWSUk0I/3Y3jiro43mcTTDiq7xRHt/lN/lfqxV&#xA;rT/7h/8AjNP/AMnnxVE4qhrT+/vf+Mw/5Mx4qicVQ2n/ANw//Gaf/k8+KonFVGnpXBP7E/Uk9JAA&#xA;B/wSj8PfFW7l4liKyL6gk+ARUBLkj7NDsajx2p12xVLW0a0+vxXEqtFNKjxH6u8sK9mVKxMlaBW3&#xA;YfdsMVRX6MdNoL25hTuvNZqmlK8p1lYfIGn44qhtN06dtOtRJqFy8Zhj5R/ukqOA25Rxo4+hq4qu&#xA;XR7J7x/U9WaOJFASS4nkQs1eSujuyNsFNDXFUfbWlpax+nawxwR1rwiUItaAVooHYYqtnJkkS3Wt&#xA;DR5WFNkB2U1r9sinyriqvirsVdirsVUJo2jY3EVAwH71CaBwPc9GHY/f7KoG6tItYt/U4j00IaAN&#xA;VSzowYCSnxBOS7r3xVHWS2ogDW8Swo+7IqhSGGxDAdwRQ4qpRyGNtQcULCUcQa7t6MdBtU7nFUTD&#xA;H6UKR1rwULU96CmKrJpn5+jDQykVJO4QHuf4Dviq+GFIk4rUkmrMdyxPc4qvxV2KuxVDaf8A3D/8&#xA;Zp/+Tz4qvurlII+RoXP2VJpX59dh3xVC29rfNSSSSNQCzRxGNtmY8ubD1OtSdu2Kooreb0ljHXjW&#xA;NtvCvx4qhrBbz6u9JY/76en7tv8Afzf5eKokpedpYx4VjY/8b4qhrZbz173jLGP3w6xsf90x/wCW&#xA;MVWavqi6VYy3t5cwxQRqTVo28KD9vf4vDr0G+Kt+X3vpNKilvYPq1zM0srQHqqySs6BhvRuBHIV2&#xA;O2Kpjiqhcy2/BopPjY0pCp+Mk140FRT7Joe1K9sVUrf1YpAbwhp3HGOQfZp/INhQ+P8AN+AVV7pW&#xA;MXNBykiPNBUitOo2r1FRiqorKyhlIKkVBG4IOKobTmVdLtWYgKIIySdgAEGKqlqGMXqMCrykuVbq&#xA;AfsgjsQtAcVbknAf0o6PMeo7KPFv898VXQxempBPJ2PJ3PUnxxVfirsVdiriQASTQDck4qhgDdEM&#xA;wpbDdEP7f+U3+T4DFV8sTq5mhHx/7sj6BwP1MOx+g+yqjDKi3FUP7m6JoOhWZR8SkdqqtfYg+OKq&#xA;a1a6niBA5XKsw78Y4Y2qP9lxB+eKoqaZ+fow0MpFSTuEB7n+A74qvhhSJOK1JJqzHcsT3OKr8Vdi&#xA;rsVdiqAguVgtHY7sZp+Kk0/3c/U9gP8AOp2xVfbW0jv69xu5oVUilKdCRvT2Hb51OKozFXYqhtP/&#xA;ALh/+M0//J58VROKpVeatY6VBqN7eyiKGKUEk/8AGGP/AD/txVius3Gorbp5o1W3ggW2MbaRpt7K&#xA;UPrMW/eTKBwSTjxEYLER/E7GuylWU+WvMdpr9jLeWsbxxxTyW5WXiG5RGhNFLU69/wBVDgVNsVQf&#xA;6Js/0sdV/efXDCtvUSOE9NWZgDGCEO8h3IxVFsqupVgGU7FSKg4qoC2li/3nkogBpE45KPCh2Yff&#xA;T2xVR539vI5Fr6sTlm4RSKWU+3qCIfGffY/PFUPYG7uLC1RrbjCsUdFkZaPSMEcuJfavan9CqjzF&#xA;dSH95KI0rXhENyKUoXP3/CAffxVVYoo4kCRiijfxJJ6kk7knuTiq7FXYq7FXYqlzQ6tJqz+sITpH&#xA;BPSUO3q+qKluacKFTUft9umKpjirsVQl7aNIjtDtIaFlH7RU1Vt9uSkCn3H2VS7S757u8vDEtJ0d&#xA;UkBHwxOY4/U5A/F+yKDv99CqcwwpEnFakk1ZjuWJ7nAq/FXYq7FXYq7FUg0nT9Ulnupr71bUrcTG&#xA;1QGB1aMyuyN0kI+Eg0J61wqm31Sf/ltm+6H/AKp4Fd9Un/5bZvuh/wCqeKu+qT/8ts33Q/8AVPFU&#xA;Np9rP6Df6ZMP30/aH/fz/wDFeKon6pP/AMts33Q/9U8VQH+GLGTVV1K7lmvJI2WSCGYoYY5VAUSq&#xA;iInxgDYtWnahriqcYq7FXYq7FXYq7FXYqhtM/wCObaf8YY/+IjFUTirsVdirsVdirsVdirsVdirs&#xA;VQtmoFxfEChM4J9z6MYxVFYq7FXYq7FXYq7FXYq7FXYq7FWlVVFFAUVJoNtyak/ScVbxV2KuxV2K&#xA;uxV2KuxV2KtMyqpZiAoFSTsABiqhpoA061AYMBDHRlIZT8I3BGxGKojFXYq7FXYq7FXYq7FXYq7F&#xA;XYqo2ptnV57eQSxztz5qwZSQoTYj/UxVWxV2KuxV2KuxV2KuxV2KuxVZNNDDE0szrHEgq8jkKoHi&#xA;SdsVX4q7FXYq7FXYq7FXYq7FUp82z6nb+V9Vn0sMdQjtZWtig5OHCH4kWh5MvVRTc7YqwW20rVo/&#xA;PTanYQTt5cNwsJkhDs8kE2nRxJMGkZ0nt1mUll4luf7zcVqVTO+12+ttTsfKvl+I/V7BFhvDcRsy&#xA;NDC9qkimUFQii2uHYSfzLSh+yVWR+TZr+by5ayXrM8pMwikcku9uJnFs7lviLNAEJJ6nueuBU6xV&#xA;2KuxV2KuxV2KuxVC6rJex6XeSWKepepBI1rGejShCUH0tTFXldvY6+3mu012wjubvSIYNIknlQSe&#xA;vNRbpLxo3LBGKtPE08ZBLgUX4kphVkWs6ze6NJB5Z8sRs2oxiWdRNEXSWRv33AsvFUV3l/eMB+7q&#xA;NgCMVTjydqf6Sm1e6tZGm0eS5RtPd+XV4EadV5b8RKx+Tcl2pTArJMVdirsVdirsVdirsVSPzhcX&#xA;UOkxGElIJLu1jv5VJBS0edFnao+yvCoZqjipLV2xVhPlvy7q7a7qsepWtzHoOrvqdqEVWXiHvWli&#xA;adJOYKyQGkLoo9MVRv2aFU3u/P1wuutLHWHy/p5Caq0tvIxCsbiIyB05EMJ4olRAp5Kxbpuqqb+W&#xA;dVj1PWNUudOmNxoUsNpLbyHmALt/V+sIquAUpGsDFf5mPc4FZJirsVdir//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:673467FF6DCCE011A675D2968EA05CBF</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:683467FF6DCCE011A675D2968EA05CBF</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:663467FF6DCCE011A675D2968EA05CBF</stRef:instanceID>
            <stRef:documentID>uuid:B416FC406CCCE011A675D2968EA05CBF</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>161.486999</stDim:w>
            <stDim:h>140.022999</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -384.146 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 384.146 li
455.063 384.146 li
455.063 0 li
cp
clp
[1 0 0 1 0 0 ]ct
238.824 100.61 mo
203.379 65.165 li
238.824 29.7217 li
274.268 65.165 li
238.824 100.61 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0.100098 cmyk
ef
0.569751 lw
0 lc
0 lj
2.6131 ml
[2.84876 2.84876 ] 0 dsh
true sadj
238.824 100.61 mo
203.379 65.165 li
238.824 29.7217 li
274.268 65.165 li
238.824 100.61 li
cp
0 0 0 1 cmyk
@
65.8447 29.4404 mo
85.3604 29.4404 101.277 45.542 101.277 65.2852 cv
101.277 85.0273 85.3604 101.129 65.8447 101.129 cv
46.3291 101.129 30.4121 85.0273 30.4121 65.2852 cv
30.4121 45.542 46.3291 29.4404 65.8447 29.4404 cv
0 0 0 0.100098 cmyk
ef
65.8447 29.4404 mo
85.3604 29.4404 101.277 45.542 101.277 65.2852 cv
101.277 85.0273 85.3604 101.129 65.8447 101.129 cv
46.3291 101.129 30.4121 85.0273 30.4121 65.2852 cv
30.4121 45.542 46.3291 29.4404 65.8447 29.4404 cv
cp
0 0 0 1 cmyk
@
0.215427 lw
[] 0 dsh
8.11719 25.3125 mo
8.11719 132.429 li
@
1.00798 lw
10.6963 28.5078 mo
8.11719 24.5313 li
5.53711 28.5078 li
@
0.215427 lw
0 124.793 mo
114.511 124.793 li
@
1.00798 lw
111.314 122.215 mo
115.292 124.793 li
111.314 127.373 li
@
65.6289 63.2148 mo
66.4355 63.2148 67.0947 64.0049 67.0947 64.9736 cv
67.0947 65.9443 66.4355 66.7344 65.6289 66.7344 cv
64.8203 66.7344 64.1611 65.9443 64.1611 64.9736 cv
64.1611 64.0049 64.8203 63.2148 65.6289 63.2148 cv
0 0 0 0.300049 cmyk
ef
0.215427 lw
65.6289 63.2148 mo
66.4355 63.2148 67.0947 64.0049 67.0947 64.9736 cv
67.0947 65.9443 66.4355 66.7344 65.6289 66.7344 cv
64.8203 66.7344 64.1611 65.9443 64.1611 64.9736 cv
64.1611 64.0049 64.8203 63.2148 65.6289 63.2148 cv
cp
0 0 0 1 cmyk
@
69.5977 59.6182 mo
69.0479 60.0439 68.7012 60.29 68.5596 60.3564 cv
68.3496 60.4541 68.125 60.5029 67.8877 60.5029 cv
67.5156 60.5029 67.21 60.376 66.9697 60.1221 cv
66.7295 59.8672 66.6094 59.5332 66.6094 59.1201 cv
66.6094 58.8564 66.667 58.6309 66.7852 58.4404 cv
66.9453 58.1758 67.2236 57.9258 67.6191 57.6904 cv
68.0156 57.4561 68.6758 57.1719 69.5977 56.835 cv
69.5977 56.624 li
69.5977 56.0898 69.5137 55.7217 69.3438 55.5215 cv
69.1738 55.3242 68.9258 55.2236 68.6016 55.2236 cv
68.3555 55.2236 68.1592 55.29 68.0156 55.4238 cv
67.8672 55.5557 67.7939 55.708 67.7939 55.8799 cv
67.8057 56.2197 li
67.8057 56.3994 67.7598 56.5381 67.667 56.6357 cv
67.5752 56.7334 67.4551 56.7822 67.3076 56.7822 cv
67.1611 56.7822 67.0439 56.7314 66.9512 56.6299 cv
66.8594 56.5283 66.8135 56.3896 66.8135 56.2139 cv
66.8135 55.8779 66.9854 55.5703 67.3291 55.2881 cv
67.6738 55.0078 68.1553 54.8662 68.7773 54.8662 cv
69.2539 54.8662 69.6436 54.9463 69.9492 55.1064 cv
70.1797 55.2275 70.3496 55.418 70.46 55.6758 cv
70.5293 55.8438 70.5635 56.1846 70.5635 56.7061 cv
70.5635 58.5283 li
70.5635 59.0391 70.5732 59.3525 70.5938 59.4688 cv
70.6133 59.584 70.6455 59.6621 70.6895 59.6992 cv
70.7354 59.7402 70.7871 59.7598 70.8457 59.7598 cv
70.9072 59.7598 70.9639 59.7461 71.0098 59.7168 cv
71.0918 59.668 71.249 59.5244 71.4834 59.2891 cv
71.4834 59.6182 li
71.0479 60.2041 70.6299 60.498 70.2295 60.498 cv
70.0391 60.498 69.8877 60.4307 69.7734 60.2979 cv
69.6592 60.165 69.6016 59.9365 69.5977 59.6182 cv
cp
69.5977 59.2383 mo
69.5977 57.1924 li
69.0078 57.4277 68.6279 57.5938 68.4551 57.6904 cv
68.1455 57.8623 67.9258 58.042 67.7939 58.2295 cv
67.6592 58.417 67.5938 58.6221 67.5938 58.8457 cv
67.5938 59.126 67.6777 59.3604 67.8457 59.5459 cv
68.0137 59.7295 68.207 59.8242 68.4258 59.8242 cv
68.7236 59.8242 69.1133 59.6279 69.5977 59.2383 cv
ef
178.611 24.8486 mo
178.611 132.429 li
@
1.00798 lw
181.19 28.0439 mo
178.611 24.0674 li
176.031 28.0439 li
@
0.215427 lw
170.494 124.793 mo
284.078 124.793 li
@
1.00798 lw
280.883 122.215 mo
284.859 124.793 li
280.883 127.373 li
@
238.881 63.5498 mo
239.688 63.5498 240.348 64.3398 240.348 65.3096 cv
240.348 66.2803 239.688 67.0703 238.881 67.0703 cv
238.072 67.0703 237.412 66.2803 237.412 65.3096 cv
237.412 64.3398 238.072 63.5498 238.881 63.5498 cv
0 0 0 0.300049 cmyk
ef
0.215427 lw
238.881 63.5498 mo
239.688 63.5498 240.348 64.3398 240.348 65.3096 cv
240.348 66.2803 239.688 67.0703 238.881 67.0703 cv
238.072 67.0703 237.412 66.2803 237.412 65.3096 cv
237.412 64.3398 238.072 63.5498 238.881 63.5498 cv
cp
0 0 0 1 cmyk
@
247.51 58.5576 mo
246.959 58.9844 246.613 59.2295 246.471 59.2959 cv
246.262 59.3936 246.037 59.4443 245.799 59.4443 cv
245.428 59.4443 245.121 59.3164 244.881 59.0615 cv
244.641 58.8076 244.521 58.4736 244.521 58.0596 cv
244.521 57.7979 244.578 57.5723 244.697 57.3799 cv
244.857 57.1162 245.135 56.8662 245.531 56.6299 cv
245.928 56.3955 246.588 56.1123 247.51 55.7764 cv
247.51 55.5635 li
247.51 55.0303 247.426 54.6621 247.256 54.4619 cv
247.086 54.2637 246.838 54.1641 246.514 54.1641 cv
246.268 54.1641 246.07 54.2295 245.928 54.3643 cv
245.779 54.4961 245.705 54.6475 245.705 54.8203 cv
245.717 55.1602 li
245.717 55.3398 245.672 55.4775 245.578 55.5762 cv
245.486 55.6738 245.367 55.7217 245.219 55.7217 cv
245.072 55.7217 244.955 55.6719 244.863 55.5703 cv
244.771 55.4678 244.725 55.3301 244.725 55.1543 cv
244.725 54.8184 244.896 54.5098 245.24 54.2275 cv
245.586 53.9482 246.066 53.8057 246.689 53.8057 cv
247.164 53.8057 247.555 53.8857 247.861 54.0459 cv
248.092 54.168 248.262 54.3584 248.371 54.6162 cv
248.441 54.7842 248.475 55.126 248.475 55.6455 cv
248.475 57.4678 li
248.475 57.9795 248.484 58.2939 248.506 58.4102 cv
248.525 58.5244 248.557 58.6016 248.602 58.6396 cv
248.646 58.6797 248.699 58.7002 248.758 58.7002 cv
248.818 58.7002 248.875 58.6855 248.922 58.6582 cv
249.004 58.6084 249.16 58.4639 249.395 58.2295 cv
249.395 58.5576 li
248.959 59.1436 248.541 59.4375 248.141 59.4375 cv
247.951 59.4375 247.799 59.3721 247.686 59.2383 cv
247.57 59.1064 247.514 58.8779 247.51 58.5576 cv
cp
247.51 58.1777 mo
247.51 56.1318 li
246.92 56.3682 246.539 56.5342 246.367 56.6299 cv
246.057 56.8018 245.838 56.9814 245.705 57.1699 cv
245.57 57.3584 245.506 57.5615 245.506 57.7861 cv
245.506 58.0664 245.59 58.2998 245.758 58.4863 cv
245.926 58.6699 246.119 58.7637 246.338 58.7637 cv
246.635 58.7637 247.025 58.5684 247.51 58.1777 cv
ef
362.133 101.044 mo
433.99 101.044 li
433.99 29.1855 li
362.133 29.1855 li
362.133 101.044 li
cp
0 0 0 0.100098 cmyk
ef
0.569751 lw
[2.84876 2.84876 ] 0 dsh
362.133 101.044 mo
433.99 101.044 li
433.99 29.1855 li
362.133 29.1855 li
362.133 101.044 li
cp
0 0 0 1 cmyk
@
0.215427 lw
[] 0 dsh
337.338 24.8486 mo
337.338 132.429 li
@
1.00798 lw
339.918 28.0439 mo
337.338 24.0674 li
334.758 28.0439 li
@
0.215427 lw
329.221 124.793 mo
442.805 124.793 li
@
1.00798 lw
439.609 122.215 mo
443.586 124.793 li
439.609 127.373 li
@
397.605 63.5498 mo
398.414 63.5498 399.072 64.3398 399.072 65.3096 cv
399.072 66.2803 398.414 67.0703 397.605 67.0703 cv
396.799 67.0703 396.141 66.2803 396.141 65.3096 cv
396.141 64.3398 396.799 63.5498 397.605 63.5498 cv
0 0 0 0.300049 cmyk
ef
0.215427 lw
397.605 63.5498 mo
398.414 63.5498 399.072 64.3398 399.072 65.3096 cv
399.072 66.2803 398.414 67.0703 397.605 67.0703 cv
396.799 67.0703 396.141 66.2803 396.141 65.3096 cv
396.141 64.3398 396.799 63.5498 397.605 63.5498 cv
cp
0 0 0 1 cmyk
@
403.451 60.8779 mo
402.9 61.3037 402.555 61.5498 402.414 61.6162 cv
402.203 61.7139 401.979 61.7637 401.742 61.7637 cv
401.369 61.7637 401.063 61.6357 400.824 61.3818 cv
400.584 61.1279 400.463 60.7939 400.463 60.3799 cv
400.463 60.1182 400.521 59.8916 400.641 59.7002 cv
400.799 59.4355 401.078 59.1855 401.475 58.9502 cv
401.869 58.7158 402.529 58.4316 403.451 58.0957 cv
403.451 57.8838 li
403.451 57.3496 403.367 56.9814 403.197 56.7822 cv
403.027 56.584 402.779 56.4844 402.455 56.4844 cv
402.209 56.4844 402.014 56.5498 401.869 56.6836 cv
401.721 56.8164 401.646 56.9678 401.646 57.1396 cv
401.66 57.4795 li
401.66 57.6602 401.613 57.7979 401.521 57.8955 cv
401.43 57.9941 401.309 58.042 401.162 58.042 cv
401.016 58.042 400.896 57.9922 400.805 57.8896 cv
400.713 57.7881 400.668 57.6504 400.668 57.4736 cv
400.668 57.1377 400.84 56.8301 401.184 56.5479 cv
401.527 56.2676 402.01 56.126 402.631 56.126 cv
403.107 56.126 403.498 56.2061 403.803 56.3662 cv
404.033 56.4883 404.203 56.6777 404.313 56.9355 cv
404.383 57.1035 404.418 57.4463 404.418 57.9658 cv
404.418 59.7881 li
404.418 60.2998 404.428 60.6143 404.447 60.7295 cv
404.467 60.8438 404.5 60.9219 404.543 60.96 cv
404.59 61 404.641 61.0195 404.699 61.0195 cv
404.762 61.0195 404.816 61.0059 404.863 60.9775 cv
404.945 60.9277 405.104 60.7842 405.338 60.5498 cv
405.338 60.8779 li
404.9 61.4639 404.482 61.7578 404.084 61.7578 cv
403.893 61.7578 403.742 61.6924 403.627 61.5576 cv
403.514 61.4258 403.455 61.1982 403.451 60.8779 cv
cp
403.451 60.498 mo
403.451 58.4521 li
402.861 58.6875 402.48 58.8535 402.309 58.9502 cv
402 59.1221 401.779 59.3018 401.646 59.4902 cv
401.514 59.6777 401.447 59.8818 401.447 60.1064 cv
401.447 60.3857 401.531 60.6201 401.699 60.8057 cv
401.867 60.9902 402.061 61.084 402.279 61.084 cv
402.578 61.084 402.967 60.8877 403.451 60.498 cv
ef
83.7197 73.5166 mo
82.9492 73.2432 82.5654 72.8291 82.5654 72.2754 cv
82.5654 71.8369 82.7695 71.4873 83.1777 71.2266 cv
83.5859 70.9648 84.0918 70.833 84.6973 70.833 cv
85.2471 70.833 85.6855 70.9248 86.0098 71.1064 cv
86.333 71.2871 86.4951 71.5049 86.4951 71.7588 cv
86.4951 71.8926 86.4453 72.0088 86.3438 72.1094 cv
86.2432 72.207 86.125 72.2568 85.9932 72.2568 cv
85.7734 72.2568 85.5938 72.1045 85.4531 71.8008 cv
85.2578 71.3789 84.9658 71.167 84.5752 71.167 cv
84.2656 71.167 84.0117 71.2686 83.8135 71.4727 cv
83.6133 71.6748 83.5137 71.959 83.5137 72.3213 cv
83.5137 73.0371 83.8838 73.3945 84.6211 73.3945 cv
84.6992 73.3945 84.7891 73.3867 84.8916 73.3711 cv
85.0674 73.3467 85.2031 73.335 85.3018 73.335 cv
85.5391 73.335 85.6592 73.4033 85.6592 73.541 cv
85.6592 73.6934 85.5371 73.7686 85.2959 73.7686 cv
85.21 73.7686 85.0791 73.7549 84.9092 73.7285 cv
84.7793 73.7051 84.6797 73.6934 84.6094 73.6934 cv
83.8271 73.6934 83.4375 74.0908 83.4375 74.8887 cv
83.4375 75.2754 83.541 75.5869 83.7471 75.8232 cv
83.9551 76.0586 84.2432 76.1768 84.6152 76.1768 cv
85.0791 76.1768 85.3896 75.9365 85.541 75.457 cv
85.6191 75.2031 85.7051 75.0273 85.8018 74.9287 cv
85.8975 74.8311 86.0254 74.7832 86.1855 74.7832 cv
86.3193 74.7832 86.4395 74.8311 86.5459 74.9268 cv
86.6533 75.0225 86.707 75.1445 86.707 75.293 cv
86.707 75.6494 86.5078 75.9414 86.1094 76.1748 cv
85.7119 76.4072 85.2295 76.5225 84.6611 76.5225 cv
84.041 76.5225 83.4893 76.375 83.0078 76.0771 cv
82.5254 75.7813 82.2832 75.3848 82.2832 74.8887 cv
82.2832 74.2666 82.7617 73.8105 83.7197 73.5166 cv
ef
255.906 73.7207 mo
255.137 73.4473 254.752 73.0332 254.752 72.4785 cv
254.752 72.04 254.957 71.6904 255.363 71.4307 cv
255.771 71.1689 256.277 71.0371 256.885 71.0371 cv
257.434 71.0371 257.873 71.1279 258.195 71.3096 cv
258.52 71.4902 258.682 71.708 258.682 71.9619 cv
258.682 72.0957 258.633 72.2119 258.529 72.3115 cv
258.43 72.4102 258.313 72.46 258.18 72.46 cv
257.961 72.46 257.779 72.3076 257.641 72.0049 cv
257.443 71.583 257.152 71.3711 256.762 71.3711 cv
256.453 71.3711 256.197 71.4727 256 71.6758 cv
255.801 71.8779 255.701 72.1631 255.701 72.5244 cv
255.701 73.2402 256.07 73.5986 256.809 73.5986 cv
256.887 73.5986 256.977 73.5898 257.078 73.5742 cv
257.254 73.5498 257.391 73.5391 257.488 73.5391 cv
257.727 73.5391 257.846 73.6064 257.846 73.7441 cv
257.846 73.8955 257.725 73.9727 257.482 73.9727 cv
257.396 73.9727 257.266 73.958 257.096 73.9326 cv
256.967 73.9082 256.867 73.8955 256.797 73.8955 cv
256.014 73.8955 255.625 74.2939 255.625 75.0918 cv
255.625 75.4775 255.729 75.79 255.934 76.0264 cv
256.143 76.2617 256.43 76.3799 256.803 76.3799 cv
257.266 76.3799 257.576 76.1396 257.729 75.6602 cv
257.807 75.4072 257.893 75.2295 257.988 75.1318 cv
258.084 75.0352 258.213 74.9863 258.373 74.9863 cv
258.506 74.9863 258.627 75.0352 258.732 75.1299 cv
258.84 75.2256 258.895 75.3477 258.895 75.4961 cv
258.895 75.8516 258.693 76.1436 258.297 76.3779 cv
257.898 76.6104 257.416 76.7256 256.85 76.7256 cv
256.229 76.7256 255.676 76.5781 255.193 76.2803 cv
254.713 75.9854 254.471 75.5889 254.471 75.0918 cv
254.471 74.4707 254.947 74.0137 255.906 73.7207 cv
ef
379.678 73.7881 mo
378.908 73.5137 378.523 73.0996 378.523 72.5459 cv
378.523 72.1084 378.727 71.7578 379.135 71.498 cv
379.543 71.2363 380.049 71.1035 380.656 71.1035 cv
381.207 71.1035 381.643 71.1963 381.967 71.3779 cv
382.291 71.5576 382.453 71.7764 382.453 72.0303 cv
382.453 72.1641 382.402 72.2803 382.301 72.3799 cv
382.201 72.4775 382.084 72.5283 381.951 72.5283 cv
381.73 72.5283 381.551 72.376 381.412 72.0723 cv
381.215 71.6504 380.924 71.4375 380.533 71.4375 cv
380.225 71.4375 379.969 71.54 379.771 71.7441 cv
379.57 71.9463 379.473 72.2295 379.473 72.5918 cv
379.473 73.3076 379.842 73.666 380.58 73.666 cv
380.658 73.666 380.748 73.6582 380.85 73.6416 cv
381.025 73.6182 381.162 73.6064 381.26 73.6064 cv
381.498 73.6064 381.617 73.6738 381.617 73.8115 cv
381.617 73.9639 381.496 74.04 381.254 74.04 cv
381.168 74.04 381.037 74.0264 380.867 74 cv
380.736 73.9756 380.637 73.9639 380.566 73.9639 cv
379.785 73.9639 379.395 74.3623 379.395 75.1602 cv
379.395 75.5459 379.5 75.8584 379.705 76.0938 cv
379.914 76.3301 380.201 76.4482 380.572 76.4482 cv
381.037 76.4482 381.348 76.208 381.5 75.7275 cv
381.578 75.4736 381.664 75.2979 381.76 75.2002 cv
381.855 75.1016 381.982 75.0537 382.143 75.0537 cv
382.277 75.0537 382.396 75.1016 382.504 75.1982 cv
382.611 75.2939 382.666 75.416 382.666 75.5635 cv
382.666 75.9199 382.465 76.2119 382.066 76.4463 cv
381.67 76.6777 381.188 76.7939 380.621 76.7939 cv
380 76.7939 379.447 76.6455 378.965 76.3477 cv
378.482 76.0518 378.242 75.6563 378.242 75.1602 cv
378.242 74.5381 378.721 74.082 379.678 73.7881 cv
ef
65.0186 64.583 mo
66.0732 64.583 li
66.1006 65.1143 66.4688 65.4775 67.1709 65.6738 cv
67.8721 65.8682 69.2686 65.9648 71.3535 65.9648 cv
74.167 65.9648 li
77.1855 65.9648 79.2354 66.082 80.3184 66.3115 cv
81.4023 66.5439 82.1514 66.9668 82.5811 67.5869 cv
83.0039 66.9639 83.7598 66.5371 84.8496 66.3096 cv
85.9336 66.0801 87.9834 65.9648 91.002 65.9648 cv
93.8213 65.9648 li
95.9063 65.9648 97.2969 65.8701 97.9902 65.6758 cv
98.6797 65.4814 99.04 65.1182 99.0674 64.583 cv
100.124 64.583 li
100.124 64.6416 li
100.124 65.499 99.6338 66.0898 98.6445 66.4102 cv
97.6631 66.7314 95.8525 66.8916 93.2227 66.8916 cv
89.0947 66.8916 li
86.9541 66.8916 85.4766 67.0059 84.6729 67.2363 cv
83.8613 67.4648 83.3711 67.8896 83.2012 68.5098 cv
81.9199 68.5098 li
81.749 67.8838 81.2598 67.4561 80.4551 67.2295 cv
79.6514 67.0039 78.1807 66.8916 76.04 66.8916 cv
71.9326 66.8916 li
69.2891 66.8916 67.4775 66.7314 66.4893 66.4102 cv
65.5088 66.0898 65.0186 65.499 65.0186 64.6416 cv
65.0186 64.583 li
ef
238.699 65.5156 mo
239.729 65.5156 li
239.754 66.0459 240.111 66.4102 240.795 66.6064 cv
241.479 66.7998 242.838 66.8975 244.867 66.8975 cv
247.605 66.8975 li
250.545 66.8975 252.541 67.0137 253.596 67.2441 cv
254.65 67.4756 255.379 67.8994 255.797 68.5186 cv
256.209 67.8955 256.943 67.4688 258.006 67.2422 cv
259.061 67.0117 261.057 66.8975 263.994 66.8975 cv
266.738 66.8975 li
268.77 66.8975 270.121 66.8018 270.799 66.6084 cv
271.469 66.4141 271.82 66.0498 271.846 65.5156 cv
272.875 65.5156 li
272.875 65.5742 li
272.875 66.4307 272.396 67.0215 271.434 67.3418 cv
270.479 67.6641 268.717 67.8242 266.156 67.8242 cv
262.137 67.8242 li
260.055 67.8242 258.615 67.9375 257.834 68.168 cv
257.043 68.3975 256.566 68.8223 256.4 69.4424 cv
255.152 69.4424 li
254.988 68.8164 254.51 68.3877 253.727 68.1621 cv
252.945 67.9346 251.514 67.8242 249.43 67.8242 cv
245.432 67.8242 li
242.857 67.8242 241.096 67.6641 240.133 67.3418 cv
239.178 67.0215 238.699 66.4307 238.699 65.5742 cv
238.699 65.5156 li
ef
361.877 65.5156 mo
362.936 65.5156 li
362.963 66.0459 363.332 66.4102 364.035 66.6064 cv
364.736 66.7998 366.137 66.8975 368.225 66.8975 cv
371.045 66.8975 li
374.068 66.8975 376.123 67.0137 377.207 67.2441 cv
378.293 67.4756 379.043 67.8994 379.475 68.5186 cv
379.896 67.8955 380.654 67.4688 381.748 67.2422 cv
382.832 67.0117 384.887 66.8975 387.91 66.8975 cv
390.736 66.8975 li
392.824 66.8975 394.217 66.8018 394.914 66.6084 cv
395.604 66.4141 395.965 66.0498 395.992 65.5156 cv
397.051 65.5156 li
397.051 65.5742 li
397.051 66.4307 396.559 67.0215 395.568 67.3418 cv
394.586 67.6641 392.77 67.8242 390.135 67.8242 cv
386 67.8242 li
383.855 67.8242 382.375 67.9375 381.568 68.168 cv
380.758 68.3975 380.266 68.8223 380.096 69.4424 cv
378.811 69.4424 li
378.641 68.8164 378.15 68.3877 377.344 68.1621 cv
376.539 67.9346 375.064 67.8242 372.922 67.8242 cv
368.805 67.8242 li
366.156 67.8242 364.342 67.6641 363.352 67.3418 cv
362.369 67.0215 361.877 66.4307 361.877 65.5742 cv
361.877 65.5156 li
ef
44.5352 157.102 mo
44.5352 157.361 li
43.8281 157.006 43.2373 156.588 42.7646 156.11 cv
42.0898 155.431 41.5693 154.63 41.2051 153.706 cv
40.8379 152.782 40.6553 151.824 40.6553 150.831 cv
40.6553 149.376 41.0156 148.052 41.7305 146.854 cv
42.4473 145.657 43.3838 144.8 44.5352 144.284 cv
44.5352 144.579 li
43.959 144.897 43.4863 145.333 43.1152 145.887 cv
42.7451 146.438 42.4688 147.14 42.2871 147.989 cv
42.1045 148.837 42.0137 149.724 42.0137 150.646 cv
42.0137 151.649 42.0898 152.561 42.2441 153.382 cv
42.3662 154.03 42.5146 154.548 42.6875 154.938 cv
42.8604 155.331 43.0938 155.707 43.3857 156.067 cv
43.6787 156.43 44.0625 156.772 44.5352 157.102 cv
cp
47.0313 150.092 mo
47.0313 147.92 li
47.0313 147.36 47.0127 146.722 46.9736 146.002 cv
46.9375 145.282 46.8906 144.716 46.835 144.303 cv
45.1475 144.058 li
45.1475 143.989 li
49.7676 143.989 li
50.6436 143.989 51.3447 144.164 51.8643 144.512 cv
52.3877 144.862 52.75 145.261 52.9512 145.707 cv
53.1533 146.156 53.2549 146.542 53.2549 146.864 cv
53.2549 147.31 53.1533 147.706 52.9512 148.057 cv
52.75 148.407 52.4863 148.683 52.1621 148.889 cv
51.8369 149.096 51.5049 149.218 51.166 149.257 cv
51.166 149.283 li
51.4854 149.41 51.749 149.578 51.9609 149.789 cv
52.127 149.955 52.3135 150.185 52.5244 150.483 cv
52.7363 150.78 53.0146 151.186 53.3604 151.702 cv
53.707 152.218 53.9863 152.621 54.1973 152.912 cv
54.4082 153.202 54.6035 153.438 54.7803 153.622 cv
55.1748 154.015 55.5635 154.212 55.9463 154.212 cv
55.9463 154.282 li
54.7256 154.282 li
54.0391 154.282 53.4961 154.076 53.0938 153.663 cv
52.9355 153.504 52.7764 153.315 52.6182 153.099 cv
52.4629 152.88 52.2129 152.522 51.874 152.026 cv
51.5332 151.529 51.248 151.119 51.0156 150.795 cv
50.7822 150.471 50.5996 150.243 50.4639 150.106 cv
50.2617 149.904 50.0762 149.77 49.9111 149.701 cv
49.7451 149.633 49.502 149.599 49.1768 149.599 cv
48.8828 149.599 48.6514 149.616 48.4854 149.65 cv
48.46 149.902 48.4453 150.183 48.4453 150.492 cv
48.4453 151.793 li
48.4453 152.343 48.5029 153.065 48.6201 153.965 cv
50.3721 154.212 li
50.3721 154.282 li
45.1475 154.282 li
45.1475 154.212 li
46.7988 153.965 li
46.8682 153.492 46.9268 152.827 46.9668 151.968 cv
47.0107 151.112 47.0313 150.485 47.0313 150.092 cv
cp
48.4307 146.878 mo
48.4307 148.033 li
48.4307 148.44 48.4453 148.82 48.4736 149.17 cv
48.6563 149.199 48.9209 149.213 49.2686 149.213 cv
49.8672 149.213 50.3525 149.11 50.7207 148.904 cv
51.0879 148.698 51.3516 148.429 51.5078 148.097 cv
51.665 147.769 51.7422 147.406 51.7422 147.012 cv
51.7422 146.624 51.667 146.264 51.5146 145.935 cv
51.3633 145.609 51.166 145.33 50.9238 145.102 cv
50.6816 144.874 50.4121 144.699 50.1152 144.574 cv
49.8174 144.449 49.5244 144.39 49.2393 144.39 cv
48.9678 144.39 48.7549 144.406 48.5986 144.445 cv
48.5576 144.716 48.5195 145.106 48.4834 145.614 cv
48.4473 146.12 48.4307 146.54 48.4307 146.878 cv
cp
50.9629 150.365 mo
52.4883 152.58 li
52.8535 153.101 53.1807 153.473 53.4658 153.696 cv
53.752 153.917 54.0898 154.032 54.4785 154.037 cv
54.4785 153.965 li
54.1084 153.856 53.6338 153.382 53.0508 152.539 cv
51.8281 150.78 li
51.5645 150.396 51.3193 150.106 51.0898 149.909 cv
50.8594 149.712 50.5781 149.58 50.2441 149.516 cv
50.2168 149.571 li
50.4805 149.741 50.7275 150.005 50.9629 150.365 cv
cp
47.2061 144.262 mo
47.2061 154.008 li
47.7129 154.008 li
47.7129 144.262 li
47.2061 144.262 li
cp
49.1338 144.142 mo
49.1338 144.212 li
49.7764 144.226 50.3145 144.382 50.748 144.68 cv
51.1807 144.978 51.4971 145.342 51.6943 145.774 cv
51.8906 146.207 51.9893 146.631 51.9893 147.053 cv
51.9893 147.992 51.5811 148.669 50.7666 149.086 cv
50.8086 149.115 li
51.2861 148.992 51.6807 148.733 51.9922 148.335 cv
52.3047 147.937 52.4609 147.459 52.4609 146.907 cv
52.4609 146.475 52.377 146.084 52.208 145.736 cv
52.0371 145.385 51.8096 145.095 51.5215 144.86 cv
51.2334 144.624 50.9092 144.447 50.5547 144.325 cv
50.1963 144.202 49.8398 144.142 49.4766 144.142 cv
49.1338 144.142 li
cp
59.2617 146.165 mo
58.9277 147.082 li
56.1143 147.082 li
56.1143 146.953 li
56.9424 146.197 57.5264 145.582 57.8623 145.102 cv
58.2002 144.624 58.3682 144.188 58.3682 143.792 cv
58.3682 143.49 58.2773 143.24 58.0928 143.046 cv
57.9072 142.851 57.6846 142.755 57.4277 142.755 cv
57.1924 142.755 56.9834 142.823 56.7969 142.959 cv
56.6094 143.098 56.4727 143.298 56.3838 143.563 cv
56.2549 143.563 li
56.3115 143.13 56.4629 142.796 56.7051 142.565 cv
56.9473 142.333 57.249 142.218 57.6123 142.218 cv
58.002 142.218 58.3232 142.34 58.582 142.59 cv
58.8418 142.837 58.9717 143.132 58.9717 143.468 cv
58.9717 143.71 58.9131 143.95 58.8037 144.193 cv
58.6279 144.572 58.3477 144.975 57.958 145.397 cv
57.374 146.036 57.0107 146.42 56.8633 146.552 cv
58.1094 146.552 li
58.3613 146.552 58.5391 146.542 58.6426 146.522 cv
58.7422 146.504 58.8369 146.465 58.9189 146.408 cv
58.999 146.353 59.0713 146.271 59.1328 146.165 cv
59.2617 146.165 li
cp
60.333 156.679 mo
60.333 156.37 li
60.8164 156.211 61.1904 155.964 61.457 155.628 cv
61.7217 155.292 61.8535 154.937 61.8535 154.563 cv
61.8535 154.474 61.8311 154.399 61.79 154.337 cv
61.7578 154.296 61.7236 154.275 61.6924 154.275 cv
61.6396 154.275 61.5264 154.323 61.3535 154.416 cv
61.2695 154.457 61.1816 154.478 61.0879 154.478 cv
60.8574 154.478 60.6748 154.411 60.5381 154.275 cv
60.4033 154.138 60.333 153.951 60.333 153.713 cv
60.333 153.483 60.4229 153.286 60.5986 153.123 cv
60.7734 152.957 60.9893 152.876 61.2402 152.876 cv
61.5508 152.876 61.8262 153.01 62.0664 153.281 cv
62.3086 153.55 62.4287 153.907 62.4287 154.351 cv
62.4287 154.834 62.2617 155.282 61.9277 155.698 cv
61.5918 156.113 61.0605 156.438 60.333 156.679 cv
ef
64.9893 157.361 mo
63.7871 157.361 li
63.9609 156.823 64.0469 156.007 64.0469 154.915 cv
64.0469 150.948 li
64.0469 149.83 64.3633 149 64.9961 148.46 cv
65.6279 147.922 66.3262 147.651 67.0918 147.651 cv
67.9199 147.651 68.5898 147.937 69.0957 148.505 cv
69.6025 149.077 69.8545 149.823 69.8545 150.744 cv
69.8545 151.752 69.5391 152.628 68.9102 153.367 cv
68.2842 154.109 67.5674 154.478 66.7607 154.478 cv
66.2168 154.478 65.6992 154.306 65.208 153.958 cv
65.208 154.879 li
65.208 155.858 65.1338 156.686 64.9893 157.361 cv
cp
65.208 152.328 mo
65.208 152.894 65.3574 153.326 65.6563 153.624 cv
65.9561 153.922 66.3389 154.071 66.8037 154.071 cv
67.3516 154.071 67.8096 153.835 68.1768 153.365 cv
68.5469 152.892 68.7285 152.271 68.7285 151.498 cv
68.7285 150.519 68.4785 149.741 67.9775 149.17 cv
67.4756 148.599 66.916 148.313 66.3047 148.313 cv
65.8877 148.313 65.5996 148.443 65.4424 148.702 cv
65.2842 148.964 65.208 149.386 65.208 149.971 cv
65.208 152.328 li
cp
70.6699 144.579 mo
70.6699 144.284 li
71.3828 144.634 71.9756 145.049 72.4482 145.53 cv
73.1172 146.214 73.6367 147.015 74.002 147.937 cv
74.3682 148.858 74.5508 149.818 74.5508 150.817 cv
74.5508 152.268 74.1934 153.593 73.4785 154.79 cv
72.7627 155.988 71.8262 156.845 70.6699 157.361 cv
70.6699 157.102 li
71.2461 156.778 71.7217 156.341 72.0928 155.789 cv
72.4658 155.239 72.7432 154.539 72.9238 153.687 cv
73.1035 152.837 73.1943 151.949 73.1943 151.028 cv
73.1943 150.029 73.1152 149.117 72.9619 148.292 cv
72.8447 147.644 72.6982 147.128 72.5225 146.737 cv
72.3447 146.348 72.1123 145.974 71.8223 145.614 cv
71.5313 145.251 71.1475 144.908 70.6699 144.579 cv
ef
216.245 157.101 mo
216.245 157.36 li
215.537 157.005 214.947 156.587 214.475 156.109 cv
213.8 155.43 213.279 154.629 212.914 153.705 cv
212.548 152.781 212.364 151.823 212.364 150.83 cv
212.364 149.375 212.725 148.051 213.44 146.853 cv
214.157 145.655 215.094 144.799 216.245 144.283 cv
216.245 144.578 li
215.67 144.896 215.196 145.331 214.824 145.886 cv
214.455 146.438 214.18 147.139 213.996 147.988 cv
213.814 148.835 213.724 149.723 213.724 150.645 cv
213.724 151.647 213.8 152.56 213.953 153.381 cv
214.075 154.029 214.225 154.547 214.397 154.938 cv
214.57 155.33 214.804 155.706 215.097 156.066 cv
215.39 156.429 215.772 156.771 216.245 157.101 cv
cp
218.741 150.09 mo
218.741 147.918 li
218.741 147.359 218.723 146.721 218.684 146.001 cv
218.648 145.281 218.6 144.715 218.545 144.302 cv
216.857 144.057 li
216.857 143.987 li
221.478 143.987 li
222.354 143.987 223.054 144.162 223.574 144.511 cv
224.099 144.861 224.461 145.259 224.662 145.706 cv
224.863 146.155 224.965 146.541 224.965 146.862 cv
224.965 147.309 224.863 147.705 224.662 148.055 cv
224.461 148.406 224.196 148.682 223.872 148.888 cv
223.547 149.094 223.215 149.217 222.877 149.255 cv
222.877 149.281 li
223.195 149.409 223.46 149.577 223.671 149.788 cv
223.837 149.954 224.023 150.184 224.234 150.481 cv
224.446 150.779 224.725 151.185 225.069 151.701 cv
225.417 152.217 225.696 152.62 225.907 152.91 cv
226.118 153.201 226.313 153.438 226.49 153.621 cv
226.885 154.014 227.273 154.211 227.657 154.211 cv
227.657 154.281 li
226.436 154.281 li
225.749 154.281 225.207 154.074 224.804 153.662 cv
224.646 153.503 224.486 153.313 224.328 153.098 cv
224.173 152.879 223.923 152.521 223.585 152.024 cv
223.243 151.528 222.958 151.117 222.726 150.794 cv
222.492 150.469 222.311 150.242 222.174 150.104 cv
221.972 149.903 221.787 149.769 221.621 149.699 cv
221.455 149.632 221.211 149.598 220.888 149.598 cv
220.592 149.598 220.361 149.615 220.195 149.649 cv
220.17 149.901 220.155 150.181 220.155 150.491 cv
220.155 151.792 li
220.155 152.342 220.213 153.063 220.33 153.964 cv
222.082 154.211 li
222.082 154.281 li
216.857 154.281 li
216.857 154.211 li
218.509 153.964 li
218.578 153.491 218.636 152.826 218.677 151.967 cv
218.72 151.11 218.741 150.484 218.741 150.09 cv
cp
220.141 146.877 mo
220.141 148.031 li
220.141 148.438 220.155 148.818 220.184 149.169 cv
220.366 149.198 220.631 149.212 220.979 149.212 cv
221.578 149.212 222.063 149.109 222.431 148.903 cv
222.798 148.696 223.062 148.427 223.218 148.096 cv
223.375 147.767 223.452 147.405 223.452 147.011 cv
223.452 146.623 223.379 146.262 223.225 145.934 cv
223.073 145.606 222.877 145.329 222.635 145.101 cv
222.392 144.873 222.122 144.698 221.825 144.573 cv
221.527 144.448 221.235 144.388 220.949 144.388 cv
220.679 144.388 220.465 144.405 220.309 144.444 cv
220.268 144.715 220.229 145.106 220.193 145.612 cv
220.157 146.119 220.141 146.539 220.141 146.877 cv
cp
222.673 150.364 mo
224.198 152.579 li
224.563 153.1 224.89 153.472 225.176 153.695 cv
225.462 153.916 225.8 154.031 226.188 154.036 cv
226.188 153.964 li
225.818 153.856 225.344 153.381 224.761 152.538 cv
223.539 150.779 li
223.274 150.395 223.03 150.104 222.8 149.908 cv
222.569 149.711 222.288 149.579 221.955 149.515 cv
221.927 149.569 li
222.19 149.74 222.438 150.004 222.673 150.364 cv
cp
218.916 144.261 mo
218.916 154.007 li
219.424 154.007 li
219.424 144.261 li
218.916 144.261 li
cp
220.844 144.141 mo
220.844 144.211 li
221.487 144.225 222.024 144.381 222.458 144.679 cv
222.891 144.976 223.207 145.341 223.404 145.772 cv
223.602 146.205 223.699 146.63 223.699 147.052 cv
223.699 147.99 223.291 148.667 222.476 149.085 cv
222.519 149.114 li
222.996 148.991 223.391 148.731 223.701 148.334 cv
224.015 147.935 224.17 147.458 224.17 146.906 cv
224.17 146.474 224.086 146.082 223.917 145.735 cv
223.747 145.384 223.52 145.094 223.231 144.859 cv
222.943 144.623 222.619 144.446 222.265 144.323 cv
221.907 144.201 221.55 144.141 221.188 144.141 cv
220.844 144.141 li
cp
230.973 146.167 mo
230.639 147.083 li
227.825 147.083 li
227.825 146.954 li
228.654 146.198 229.236 145.583 229.572 145.103 cv
229.91 144.626 230.078 144.188 230.078 143.793 cv
230.078 143.491 229.988 143.241 229.803 143.047 cv
229.617 142.852 229.395 142.756 229.139 142.756 cv
228.902 142.756 228.695 142.824 228.508 142.96 cv
228.32 143.099 228.183 143.299 228.094 143.565 cv
227.965 143.565 li
228.021 143.131 228.174 142.797 228.416 142.567 cv
228.658 142.334 228.961 142.219 229.322 142.219 cv
229.713 142.219 230.033 142.341 230.293 142.591 cv
230.553 142.838 230.682 143.133 230.682 143.469 cv
230.682 143.712 230.623 143.951 230.514 144.194 cv
230.338 144.573 230.059 144.976 229.67 145.397 cv
229.086 146.037 228.721 146.421 228.574 146.553 cv
229.82 146.553 li
230.072 146.553 230.25 146.543 230.354 146.524 cv
230.453 146.505 230.547 146.467 230.629 146.409 cv
230.711 146.354 230.783 146.271 230.842 146.167 cv
230.973 146.167 li
cp
232.045 156.678 mo
232.045 156.369 li
232.527 156.21 232.902 155.963 233.168 155.627 cv
233.432 155.291 233.564 154.936 233.564 154.562 cv
233.564 154.473 233.541 154.397 233.5 154.336 cv
233.469 154.295 233.434 154.274 233.402 154.274 cv
233.35 154.274 233.238 154.321 233.064 154.415 cv
232.98 154.456 232.893 154.477 232.799 154.477 cv
232.568 154.477 232.385 154.41 232.248 154.274 cv
232.115 154.137 232.045 153.949 232.045 153.712 cv
232.045 153.481 232.133 153.285 232.309 153.122 cv
232.484 152.956 232.699 152.874 232.951 152.874 cv
233.262 152.874 233.537 153.009 233.777 153.28 cv
234.02 153.549 234.141 153.906 234.141 154.35 cv
234.141 154.833 233.973 155.281 233.639 155.696 cv
233.303 156.112 232.771 156.438 232.045 156.678 cv
ef
236.701 157.36 mo
235.498 157.36 li
235.672 156.822 235.758 156.006 235.758 154.914 cv
235.758 150.947 li
235.758 149.829 236.074 148.998 236.707 148.458 cv
237.34 147.921 238.037 147.649 238.803 147.649 cv
239.631 147.649 240.301 147.935 240.809 148.504 cv
241.314 149.075 241.566 149.822 241.566 150.743 cv
241.566 151.751 241.25 152.627 240.621 153.366 cv
239.996 154.108 239.277 154.477 238.473 154.477 cv
237.928 154.477 237.41 154.305 236.92 153.957 cv
236.92 154.878 li
236.92 155.856 236.846 156.685 236.701 157.36 cv
cp
236.92 152.327 mo
236.92 152.893 237.068 153.325 237.367 153.623 cv
237.668 153.921 238.051 154.069 238.516 154.069 cv
239.063 154.069 239.521 153.834 239.889 153.364 cv
240.258 152.891 240.439 152.269 240.439 151.497 cv
240.439 150.518 240.189 149.74 239.689 149.169 cv
239.188 148.598 238.629 148.312 238.016 148.312 cv
237.6 148.312 237.311 148.442 237.154 148.701 cv
236.996 148.962 236.92 149.385 236.92 149.97 cv
236.92 152.327 li
cp
243.008 155.55 mo
243.246 155.198 243.426 154.864 243.549 154.547 cv
243.67 154.233 243.732 153.947 243.732 153.69 cv
243.732 153.565 243.715 153.469 243.678 153.405 cv
243.639 153.34 243.584 153.307 243.512 153.307 cv
243.354 153.307 243.229 153.433 243.141 153.69 cv
243.051 153.945 243.008 154.305 243.008 154.768 cv
243.008 155.55 li
cp
243.008 156.575 mo
243.008 156.762 243.023 156.885 243.051 156.94 cv
243.08 156.995 243.135 157.021 243.213 157.021 cv
243.357 157.021 243.531 156.928 243.729 156.743 cv
243.926 156.558 244.102 156.313 244.264 156.011 cv
244.324 156.035 li
244.143 156.381 243.932 156.654 243.691 156.856 cv
243.449 157.057 243.219 157.158 243 157.158 cv
242.887 157.158 242.799 157.115 242.744 157.031 cv
242.689 156.947 242.662 156.812 242.662 156.63 cv
242.662 154.876 li
242.662 154.403 242.758 154.005 242.949 153.683 cv
243.143 153.362 243.365 153.201 243.617 153.201 cv
243.732 153.201 243.822 153.242 243.885 153.321 cv
243.949 153.4 243.98 153.513 243.98 153.662 cv
243.98 153.863 243.896 154.137 243.73 154.481 cv
243.564 154.825 243.324 155.226 243.008 155.68 cv
243.008 156.575 li
cp
243.98 144.578 mo
243.98 144.283 li
244.693 144.633 245.285 145.048 245.76 145.528 cv
246.428 146.212 246.947 147.014 247.311 147.935 cv
247.678 148.856 247.861 149.817 247.861 150.815 cv
247.861 152.267 247.504 153.592 246.787 154.789 cv
246.072 155.987 245.137 156.844 243.98 157.36 cv
243.98 157.101 li
244.557 156.776 245.031 156.34 245.402 155.788 cv
245.775 155.238 246.055 154.537 246.234 153.685 cv
246.414 152.836 246.506 151.948 246.506 151.026 cv
246.506 150.028 246.426 149.116 246.271 148.29 cv
246.154 147.642 246.008 147.126 245.832 146.735 cv
245.654 146.347 245.422 145.972 245.133 145.612 cv
244.842 145.25 244.457 144.907 243.98 144.578 cv
ef
378.795 157.101 mo
378.795 157.36 li
378.088 157.005 377.498 156.587 377.023 156.109 cv
376.35 155.43 375.83 154.629 375.465 153.705 cv
375.098 152.781 374.916 151.823 374.916 150.83 cv
374.916 149.375 375.275 148.051 375.99 146.853 cv
376.709 145.655 377.643 144.799 378.795 144.283 cv
378.795 144.578 li
378.221 144.896 377.748 145.331 377.375 145.886 cv
377.006 146.438 376.729 147.139 376.547 147.988 cv
376.365 148.835 376.273 149.723 376.273 150.645 cv
376.273 151.647 376.35 152.56 376.504 153.381 cv
376.627 154.029 376.775 154.547 376.947 154.938 cv
377.121 155.33 377.354 155.706 377.646 156.066 cv
377.939 156.429 378.322 156.771 378.795 157.101 cv
cp
381.291 150.09 mo
381.291 147.918 li
381.291 147.359 381.271 146.721 381.234 146.001 cv
381.197 145.281 381.15 144.715 381.096 144.302 cv
379.408 144.057 li
379.408 143.987 li
384.027 143.987 li
384.902 143.987 385.604 144.162 386.125 144.511 cv
386.648 144.861 387.01 145.259 387.213 145.706 cv
387.414 146.155 387.516 146.541 387.516 146.862 cv
387.516 147.309 387.414 147.705 387.213 148.055 cv
387.01 148.406 386.748 148.682 386.422 148.888 cv
386.096 149.094 385.766 149.217 385.426 149.255 cv
385.426 149.281 li
385.746 149.409 386.01 149.577 386.221 149.788 cv
386.387 149.954 386.574 150.184 386.785 150.481 cv
386.996 150.779 387.273 151.185 387.621 151.701 cv
387.969 152.217 388.246 152.62 388.459 152.91 cv
388.668 153.201 388.863 153.438 389.041 153.621 cv
389.434 154.014 389.822 154.211 390.207 154.211 cv
390.207 154.281 li
388.986 154.281 li
388.299 154.281 387.758 154.074 387.354 153.662 cv
387.195 153.503 387.037 153.313 386.879 153.098 cv
386.723 152.879 386.473 152.521 386.135 152.024 cv
385.793 151.528 385.508 151.117 385.275 150.794 cv
385.043 150.469 384.859 150.242 384.723 150.104 cv
384.521 149.903 384.338 149.769 384.172 149.699 cv
384.006 149.632 383.762 149.598 383.438 149.598 cv
383.143 149.598 382.912 149.615 382.746 149.649 cv
382.719 149.901 382.705 150.181 382.705 150.491 cv
382.705 151.792 li
382.705 152.342 382.764 153.063 382.881 153.964 cv
384.633 154.211 li
384.633 154.281 li
379.408 154.281 li
379.408 154.211 li
381.059 153.964 li
381.129 153.491 381.186 152.826 381.227 151.967 cv
381.27 151.11 381.291 150.484 381.291 150.09 cv
cp
382.689 146.877 mo
382.689 148.031 li
382.689 148.438 382.705 148.818 382.734 149.169 cv
382.916 149.198 383.18 149.212 383.527 149.212 cv
384.129 149.212 384.613 149.109 384.98 148.903 cv
385.348 148.696 385.611 148.427 385.768 148.096 cv
385.926 147.767 386.002 147.405 386.002 147.011 cv
386.002 146.623 385.928 146.262 385.773 145.934 cv
385.623 145.606 385.426 145.329 385.184 145.101 cv
384.941 144.873 384.674 144.698 384.375 144.573 cv
384.078 144.448 383.785 144.388 383.5 144.388 cv
383.229 144.388 383.016 144.405 382.859 144.444 cv
382.818 144.715 382.779 145.106 382.744 145.612 cv
382.707 146.119 382.689 146.539 382.689 146.877 cv
cp
385.223 150.364 mo
386.75 152.579 li
387.113 153.1 387.439 153.472 387.725 153.695 cv
388.012 153.916 388.35 154.031 388.738 154.036 cv
388.738 153.964 li
388.369 153.856 387.893 153.381 387.311 152.538 cv
386.09 150.779 li
385.826 150.395 385.58 150.104 385.35 149.908 cv
385.119 149.711 384.838 149.579 384.506 149.515 cv
384.477 149.569 li
384.74 149.74 384.986 150.004 385.223 150.364 cv
cp
381.467 144.261 mo
381.467 154.007 li
381.973 154.007 li
381.973 144.261 li
381.467 144.261 li
cp
383.395 144.141 mo
383.395 144.211 li
384.037 144.225 384.574 144.381 385.01 144.679 cv
385.441 144.976 385.758 145.341 385.955 145.772 cv
386.15 146.205 386.25 146.63 386.25 147.052 cv
386.25 147.99 385.842 148.667 385.025 149.085 cv
385.068 149.114 li
385.547 148.991 385.939 148.731 386.252 148.334 cv
386.564 147.935 386.721 147.458 386.721 146.906 cv
386.721 146.474 386.637 146.082 386.469 145.735 cv
386.297 145.384 386.07 145.094 385.781 144.859 cv
385.494 144.623 385.17 144.446 384.814 144.323 cv
384.457 144.201 384.1 144.141 383.736 144.141 cv
383.395 144.141 li
cp
393.521 146.167 mo
393.188 147.083 li
390.375 147.083 li
390.375 146.954 li
391.203 146.198 391.787 145.583 392.123 145.103 cv
392.461 144.626 392.629 144.188 392.629 143.793 cv
392.629 143.491 392.537 143.241 392.352 143.047 cv
392.168 142.852 391.945 142.756 391.688 142.756 cv
391.453 142.756 391.244 142.824 391.057 142.96 cv
390.869 143.099 390.732 143.299 390.645 143.565 cv
390.514 143.565 li
390.572 143.131 390.723 142.797 390.965 142.567 cv
391.209 142.334 391.51 142.219 391.873 142.219 cv
392.262 142.219 392.584 142.341 392.842 142.591 cv
393.102 142.838 393.23 143.133 393.23 143.469 cv
393.23 143.712 393.174 143.951 393.063 144.194 cv
392.889 144.573 392.607 144.976 392.219 145.397 cv
391.635 146.037 391.27 146.421 391.125 146.553 cv
392.371 146.553 li
392.621 146.553 392.799 146.543 392.902 146.524 cv
393.004 146.505 393.098 146.467 393.178 146.409 cv
393.26 146.354 393.332 146.271 393.391 146.167 cv
393.521 146.167 li
cp
394.594 156.678 mo
394.594 156.369 li
395.078 156.21 395.451 155.963 395.717 155.627 cv
395.98 155.291 396.113 154.936 396.113 154.562 cv
396.113 154.473 396.092 154.397 396.051 154.336 cv
396.018 154.295 395.984 154.274 395.953 154.274 cv
395.9 154.274 395.787 154.321 395.613 154.415 cv
395.529 154.456 395.441 154.477 395.348 154.477 cv
395.117 154.477 394.936 154.41 394.799 154.274 cv
394.664 154.137 394.594 153.949 394.594 153.712 cv
394.594 153.481 394.684 153.285 394.857 153.122 cv
395.033 152.956 395.25 152.874 395.502 152.874 cv
395.811 152.874 396.088 153.009 396.328 153.28 cv
396.568 153.549 396.689 153.906 396.689 154.35 cv
396.689 154.833 396.521 155.281 396.188 155.696 cv
395.852 156.112 395.322 156.438 394.594 156.678 cv
ef
399.25 157.36 mo
398.049 157.36 li
398.221 156.822 398.307 156.006 398.307 154.914 cv
398.307 150.947 li
398.307 149.829 398.625 148.998 399.258 148.458 cv
399.889 147.921 400.588 147.649 401.352 147.649 cv
402.182 147.649 402.85 147.935 403.357 148.504 cv
403.863 149.075 404.115 149.822 404.115 150.743 cv
404.115 151.751 403.801 152.627 403.172 153.366 cv
402.545 154.108 401.828 154.477 401.021 154.477 cv
400.477 154.477 399.961 154.305 399.469 153.957 cv
399.469 154.878 li
399.469 155.856 399.395 156.685 399.25 157.36 cv
cp
399.469 152.327 mo
399.469 152.893 399.619 153.325 399.918 153.623 cv
400.217 153.921 400.6 154.069 401.064 154.069 cv
401.611 154.069 402.07 153.834 402.438 153.364 cv
402.807 152.891 402.988 152.269 402.988 151.497 cv
402.988 150.518 402.74 149.74 402.238 149.169 cv
401.736 148.598 401.178 148.312 400.564 148.312 cv
400.148 148.312 399.859 148.442 399.705 148.701 cv
399.545 148.962 399.469 149.385 399.469 149.97 cv
399.469 152.327 li
cp
405.789 154.528 mo
406.023 154.295 406.16 154.158 406.203 154.125 cv
406.309 154.036 406.422 153.966 406.543 153.916 cv
406.666 153.868 406.787 153.844 406.906 153.844 cv
407.107 153.844 407.281 153.901 407.428 154.019 cv
407.57 154.137 407.67 154.307 407.717 154.528 cv
407.961 154.247 408.164 154.062 408.33 153.976 cv
408.498 153.887 408.668 153.844 408.844 153.844 cv
409.014 153.844 409.168 153.887 409.299 153.976 cv
409.432 154.062 409.537 154.207 409.613 154.405 cv
409.664 154.542 409.689 154.756 409.689 155.046 cv
409.689 156.431 li
409.689 156.633 409.707 156.769 409.736 156.846 cv
409.76 156.896 409.803 156.94 409.865 156.978 cv
409.93 157.014 410.033 157.031 410.176 157.031 cv
410.176 157.158 li
408.586 157.158 li
408.586 157.031 li
408.652 157.031 li
408.793 157.031 408.9 157.005 408.977 156.952 cv
409.029 156.914 409.068 156.853 409.094 156.771 cv
409.102 156.731 409.107 156.618 409.107 156.431 cv
409.107 155.046 li
409.107 154.782 409.076 154.598 409.012 154.49 cv
408.92 154.341 408.773 154.264 408.572 154.264 cv
408.449 154.264 408.326 154.295 408.197 154.358 cv
408.072 154.42 407.922 154.535 407.744 154.706 cv
407.736 154.744 li
407.744 154.895 li
407.744 156.431 li
407.744 156.652 407.756 156.789 407.779 156.841 cv
407.805 156.896 407.852 156.94 407.92 156.978 cv
407.986 157.014 408.104 157.031 408.268 157.031 cv
408.268 157.158 li
406.641 157.158 li
406.641 157.031 li
406.816 157.031 406.939 157.009 407.008 156.969 cv
407.074 156.925 407.121 156.863 407.146 156.779 cv
407.158 156.738 407.164 156.623 407.164 156.431 cv
407.164 155.046 li
407.164 154.782 407.125 154.595 407.049 154.479 cv
406.943 154.328 406.801 154.254 406.613 154.254 cv
406.488 154.254 406.361 154.288 406.238 154.358 cv
406.045 154.458 405.893 154.576 405.789 154.706 cv
405.789 156.431 li
405.789 156.642 405.803 156.779 405.834 156.841 cv
405.861 156.906 405.904 156.952 405.963 156.983 cv
406.021 157.017 406.137 157.031 406.311 157.031 cv
406.311 157.158 li
404.721 157.158 li
404.721 157.031 li
404.867 157.031 404.969 157.017 405.029 156.983 cv
405.088 156.952 405.133 156.901 405.162 156.832 cv
405.193 156.765 405.207 156.63 405.207 156.431 cv
405.207 155.2 li
405.207 154.847 405.197 154.617 405.176 154.514 cv
405.16 154.437 405.135 154.384 405.1 154.354 cv
405.063 154.326 405.016 154.31 404.955 154.31 cv
404.891 154.31 404.811 154.328 404.721 154.362 cv
404.668 154.238 li
405.637 153.844 li
405.789 153.844 li
405.789 154.528 li
cp
410.533 144.578 mo
410.533 144.283 li
411.246 144.633 411.838 145.048 412.311 145.528 cv
412.98 146.212 413.5 147.014 413.863 147.935 cv
414.23 148.856 414.414 149.817 414.414 150.815 cv
414.414 152.267 414.057 153.592 413.34 154.789 cv
412.625 155.987 411.689 156.844 410.533 157.36 cv
410.533 157.101 li
411.107 156.776 411.584 156.34 411.957 155.788 cv
412.328 155.238 412.605 154.537 412.787 153.685 cv
412.967 152.836 413.057 151.948 413.057 151.026 cv
413.057 150.028 412.979 149.116 412.824 148.29 cv
412.707 147.642 412.561 147.126 412.385 146.735 cv
412.209 146.347 411.975 145.972 411.684 145.612 cv
411.395 145.25 411.01 144.907 410.533 144.578 cv
ef
11.2935 6.46729 mo
14.873 10.0254 li
15.46 10.6128 15.9614 11.0122 16.3765 11.2246 cv
16.7915 11.437 17.207 11.5576 17.6221 11.5864 cv
17.6221 11.8511 li
13.0044 11.8511 li
13.0044 11.5864 li
13.2813 11.5864 13.4805 11.5396 13.6021 11.4468 cv
13.7241 11.3535 13.7847 11.2495 13.7847 11.1353 cv
13.7847 11.0205 13.7622 10.918 13.7168 10.8271 cv
13.6714 10.7368 13.5225 10.5674 13.2695 10.3188 cv
9.91895 7.00439 li
9.91895 10.1328 li
9.91895 10.6245 9.94971 10.9492 10.0122 11.1064 cv
10.0596 11.2261 10.1597 11.3286 10.3125 11.4146 cv
10.5181 11.5288 10.7349 11.5864 10.9644 11.5864 cv
11.2935 11.5864 li
11.2935 11.8511 li
7.15576 11.8511 li
7.15576 11.5864 li
7.49902 11.5864 li
7.8999 11.5864 8.19092 11.4692 8.37256 11.2354 cv
8.4873 11.0825 8.54443 10.7153 8.54443 10.1328 cv
8.54443 3.86133 li
8.54443 3.37012 8.51318 3.04297 8.45117 2.88086 cv
8.40332 2.76611 8.30566 2.66602 8.15771 2.58008 cv
7.94775 2.46533 7.72803 2.4082 7.49902 2.4082 cv
7.15576 2.4082 li
7.15576 2.14355 li
11.2935 2.14355 li
11.2935 2.4082 li
10.9644 2.4082 li
10.7397 2.4082 10.5225 2.46338 10.3125 2.57275 cv
10.1646 2.64941 10.062 2.76367 10.0049 2.9165 cv
9.94775 3.06934 9.91895 3.38428 9.91895 3.86133 cv
9.91895 6.83252 li
10.0142 6.7417 10.3413 6.43896 10.8999 5.92334 cv
12.3174 4.625 13.1738 3.75879 13.4697 3.32471 cv
13.5986 3.13379 13.6631 2.9668 13.6631 2.82324 cv
13.6631 2.71387 13.6128 2.61719 13.5127 2.53369 cv
13.4126 2.4502 13.2432 2.4082 13.0044 2.4082 cv
12.7827 2.4082 li
12.7827 2.14355 li
16.3477 2.14355 li
16.3477 2.4082 li
16.1377 2.41309 15.9468 2.44189 15.7749 2.49414 cv
15.603 2.54688 15.3931 2.64795 15.145 2.79834 cv
14.897 2.94873 14.5913 3.19092 14.2285 3.5249 cv
14.1235 3.62061 13.6392 4.10986 12.7754 4.99268 cv
11.2935 6.46729 li
cp
f
20.9438 5.56543 mo
20.6909 5.56543 20.437 5.64063 20.1816 5.79102 cv
19.9263 5.94141 19.7197 6.20508 19.5625 6.58203 cv
19.4048 6.95898 19.3262 7.44336 19.3262 8.03516 cv
19.3262 8.98975 19.5156 9.81299 19.895 10.5054 cv
20.2744 11.1973 20.7744 11.5435 21.395 11.5435 cv
21.8579 11.5435 22.2397 11.3525 22.5405 10.9707 cv
22.8413 10.5889 22.9917 9.93262 22.9917 9.00195 cv
22.9917 7.8374 22.7407 6.9209 22.2397 6.25244 cv
21.9009 5.79443 21.4688 5.56543 20.9438 5.56543 cv
cp
21.166 5.1001 mo
22.1587 5.1001 22.9556 5.47705 23.5571 6.23096 cv
24.0679 6.87549 24.3232 7.61523 24.3232 8.45068 cv
24.3232 9.0376 24.1821 9.63184 23.9009 10.2329 cv
23.6191 10.8345 23.2314 11.2881 22.7373 11.5933 cv
22.2432 11.8989 21.6934 12.0518 21.0874 12.0518 cv
20.0991 12.0518 19.314 11.6577 18.7319 10.8701 cv
18.2402 10.207 17.9946 9.4624 17.9946 8.63672 cv
17.9946 8.03516 18.1436 7.4375 18.4419 6.84326 cv
18.7402 6.24902 19.1328 5.81006 19.6196 5.52588 cv
20.1064 5.24219 20.6221 5.1001 21.166 5.1001 cv
cp
f
31.0386 5.29346 mo
31.0386 9.2666 li
31.0386 10.0254 31.0562 10.4897 31.0923 10.6592 cv
31.1279 10.8286 31.1851 10.9468 31.2642 11.0137 cv
31.3428 11.0806 31.4346 11.1138 31.5396 11.1138 cv
31.6875 11.1138 31.8545 11.0732 32.0405 10.9922 cv
32.1411 11.2427 li
30.1792 12.0518 li
29.8574 12.0518 li
29.8574 10.6626 li
29.2939 11.2734 28.8643 11.6577 28.5684 11.8154 cv
28.2725 11.9727 27.96 12.0518 27.6309 12.0518 cv
27.2632 12.0518 26.9448 11.9453 26.6748 11.7329 cv
26.4053 11.5205 26.2178 11.2476 26.1128 10.9131 cv
26.0078 10.5791 25.9556 10.1069 25.9556 9.49561 cv
25.9556 6.56787 li
25.9556 6.25732 25.9219 6.04248 25.8555 5.92334 cv
25.7886 5.8042 25.6895 5.71191 25.5581 5.64795 cv
25.4268 5.5835 25.1895 5.55371 24.8457 5.55811 cv
24.8457 5.29346 li
27.144 5.29346 li
27.144 9.68164 li
27.144 10.293 27.25 10.6938 27.4624 10.8848 cv
27.6748 11.0757 27.9316 11.1709 28.2319 11.1709 cv
28.4375 11.1709 28.6699 11.1064 28.9302 10.9775 cv
29.1904 10.8486 29.4995 10.603 29.8574 10.2402 cv
29.8574 6.5249 li
29.8574 6.15234 29.7891 5.90088 29.6533 5.76953 cv
29.5171 5.63818 29.2344 5.56787 28.8047 5.55811 cv
28.8047 5.29346 li
31.0386 5.29346 li
cp
f
34.8755 1.6709 mo
34.8755 10.3691 li
34.8755 10.7798 34.9053 11.0518 34.9648 11.1851 cv
35.0244 11.3188 35.1162 11.4204 35.2407 11.4897 cv
35.3647 11.5586 35.5962 11.5933 35.9351 11.5933 cv
35.9351 11.8511 li
32.7207 11.8511 li
32.7207 11.5933 li
33.021 11.5933 33.2266 11.5625 33.3364 11.5005 cv
33.4458 11.4385 33.5317 11.3354 33.5938 11.1924 cv
33.6558 11.0493 33.687 10.7749 33.687 10.3691 cv
33.687 4.4126 li
33.687 3.67285 33.6704 3.21826 33.6367 3.04883 cv
33.6035 2.87939 33.5498 2.76367 33.4756 2.70166 cv
33.4019 2.63965 33.3076 2.60889 33.1929 2.60889 cv
33.0688 2.60889 32.9111 2.64697 32.7207 2.72314 cv
32.5986 2.47266 li
34.5532 1.6709 li
34.8755 1.6709 li
cp
f
37.7964 7.34814 mo
40.832 7.34814 li
40.8081 6.92822 40.7578 6.63232 40.6816 6.46045 cv
40.5625 6.19287 40.3848 5.98291 40.1484 5.83008 cv
39.9121 5.67773 39.665 5.60107 39.4072 5.60107 cv
39.0112 5.60107 38.6567 5.75488 38.3442 6.06299 cv
38.0317 6.37061 37.8491 6.79932 37.7964 7.34814 cv
cp
37.7964 7.76318 mo
37.7915 8.73682 38.0278 9.50049 38.5054 10.0542 cv
38.9824 10.6079 39.5435 10.8848 40.1875 10.8848 cv
40.6172 10.8848 40.9907 10.7666 41.3081 10.5303 cv
41.6255 10.2939 41.8916 9.88965 42.1064 9.31689 cv
42.3281 9.45996 li
42.228 10.1138 41.937 10.709 41.4546 11.2461 cv
40.9727 11.7832 40.3691 12.0518 39.6436 12.0518 cv
38.856 12.0518 38.1821 11.7451 37.6211 11.1313 cv
37.0601 10.5186 36.7798 9.69385 36.7798 8.6582 cv
36.7798 7.53662 37.0674 6.66211 37.6426 6.03418 cv
38.2178 5.40674 38.9395 5.09277 39.8081 5.09277 cv
40.543 5.09277 41.147 5.33496 41.6196 5.81934 cv
42.0918 6.3042 42.3281 6.95166 42.3281 7.76318 cv
37.7964 7.76318 li
cp
f
46.5303 5.29346 mo
49.6162 5.29346 li
49.6162 5.55811 li
49.4155 5.55811 li
49.2295 5.55811 49.0874 5.60352 48.9897 5.69434 cv
48.8916 5.78516 48.8428 5.90674 48.8428 6.05957 cv
48.8428 6.22656 48.8931 6.42432 48.9932 6.65381 cv
50.5181 10.2759 li
52.0503 6.51758 li
52.1597 6.25049 52.2148 6.04736 52.2148 5.90918 cv
52.2148 5.84229 52.1958 5.78711 52.1572 5.74414 cv
52.105 5.67285 52.0381 5.62402 51.957 5.59766 cv
51.876 5.57129 51.7109 5.55811 51.4629 5.55811 cv
51.4629 5.29346 li
53.6035 5.29346 li
53.6035 5.55811 li
53.3555 5.57715 53.1836 5.62744 53.0884 5.7085 cv
52.9209 5.85156 52.7705 6.09033 52.6372 6.42432 cv
50.3105 12.0518 li
50.0171 12.0518 li
47.6758 6.51758 li
47.5708 6.25977 47.4707 6.07471 47.375 5.96289 cv
47.2798 5.85059 47.1577 5.75635 47.0103 5.67969 cv
46.9287 5.63721 46.769 5.59668 46.5303 5.55811 cv
46.5303 5.29346 li
cp
f
66.8965 11.8193 mo
66.5078 11.8145 66.1699 11.6992 65.8838 11.4785 cv
65.5986 11.2549 65.2715 10.8828 64.9063 10.3623 cv
63.3809 8.14746 li
63.1455 7.78711 62.8984 7.52344 62.6348 7.35352 cv
62.6621 7.29785 li
62.9961 7.3623 63.2773 7.49414 63.5078 7.69141 cv
63.7373 7.88867 63.9824 8.17773 64.2461 8.5625 cv
65.4688 10.3213 li
66.0518 11.1641 66.5264 11.6387 66.8965 11.7471 cv
66.8965 11.8193 li
cp
61.6865 6.99512 mo
61.3389 6.99512 61.0742 6.98145 60.8916 6.95215 cv
60.8633 6.60254 60.8486 6.22266 60.8486 5.81543 cv
60.8486 4.66016 li
60.8486 4.32227 60.8652 3.90234 60.9014 3.39648 cv
60.9375 2.88867 60.9756 2.49805 61.0166 2.22754 cv
61.1729 2.18848 61.3857 2.17188 61.6572 2.17188 cv
61.9424 2.17188 62.2354 2.23145 62.5332 2.35645 cv
62.8301 2.48145 63.0996 2.65625 63.3418 2.88379 cv
63.584 3.1123 63.7813 3.3916 63.9326 3.7168 cv
64.085 4.0459 64.1602 4.40625 64.1602 4.79395 cv
64.1602 5.18848 64.083 5.55078 63.9258 5.87891 cv
63.7695 6.21094 63.5059 6.48047 63.1387 6.68652 cv
62.7705 6.89258 62.2852 6.99512 61.6865 6.99512 cv
cp
60.1309 11.79 mo
59.624 11.79 li
59.624 2.04395 li
60.1309 2.04395 li
60.1309 11.79 li
cp
61.5518 1.92383 mo
61.8945 1.92383 li
62.2578 1.92383 62.6143 1.98438 62.9727 2.10742 cv
63.3271 2.22949 63.6514 2.40625 63.9395 2.64258 cv
64.2275 2.87695 64.4551 3.16699 64.626 3.51855 cv
64.7949 3.86621 64.8789 4.25684 64.8789 4.68945 cv
64.8789 5.24121 64.7227 5.71875 64.4102 6.11719 cv
64.0986 6.51563 63.7041 6.77441 63.2266 6.89746 cv
63.1846 6.86816 li
63.999 6.45117 64.4072 5.77441 64.4072 4.83496 cv
64.4072 4.41309 64.3086 3.98926 64.1123 3.55664 cv
63.915 3.12402 63.5986 2.75977 63.166 2.46191 cv
62.7324 2.16406 62.1943 2.00781 61.5518 1.99414 cv
61.5518 1.92383 li
cp
66.6152 10.6943 mo
66.4043 10.4033 66.125 10 65.7783 9.48438 cv
65.4326 8.96777 65.1543 8.5625 64.9424 8.26563 cv
64.7314 7.9668 64.5449 7.7373 64.3789 7.57129 cv
64.167 7.36035 63.9033 7.19238 63.584 7.06543 cv
63.584 7.03906 li
63.9229 7 64.2549 6.87793 64.5801 6.6709 cv
64.9043 6.46484 65.168 6.18945 65.3691 5.83887 cv
65.5713 5.48828 65.6729 5.0918 65.6729 4.64648 cv
65.6729 4.32422 65.5713 3.93848 65.3691 3.48926 cv
65.168 3.04297 64.8057 2.64453 64.2822 2.29395 cv
63.7627 1.94629 63.0615 1.77148 62.1855 1.77148 cv
57.5654 1.77148 li
57.5654 1.83984 li
59.2529 2.08496 li
59.3086 2.49805 59.3555 3.06445 59.3916 3.78418 cv
59.4307 4.50391 59.4492 5.14258 59.4492 5.70215 cv
59.4492 7.87402 li
59.4492 8.26758 59.4287 8.89453 59.3848 9.75 cv
59.3447 10.6094 59.2861 11.2744 59.2168 11.7471 cv
57.5654 11.9941 li
57.5654 12.0645 li
62.79 12.0645 li
62.79 11.9941 li
61.0381 11.7471 li
60.9209 10.8477 60.8633 10.125 60.8633 9.5752 cv
60.8633 8.27441 li
60.8633 7.96484 60.8779 7.68457 60.9033 7.43262 cv
61.0693 7.39844 61.3008 7.38086 61.5947 7.38086 cv
61.9199 7.38086 62.1631 7.41504 62.3291 7.4834 cv
62.4941 7.55176 62.6797 7.68652 62.8818 7.88867 cv
63.0176 8.02539 63.2002 8.25293 63.4336 8.57715 cv
63.666 8.90137 63.9512 9.31152 64.292 9.80859 cv
64.6309 10.3047 64.8809 10.6621 65.0361 10.8809 cv
65.1943 11.0977 65.3535 11.2861 65.5117 11.4453 cv
65.9141 11.8584 66.457 12.0645 67.1436 12.0645 cv
68.3643 12.0645 li
68.3643 11.9941 li
67.9814 11.9941 67.5928 11.7969 67.1982 11.4043 cv
67.0215 11.2207 66.8262 10.9844 66.6152 10.6943 cv
cp
71.3369 4.19043 mo
71.2549 4.24707 71.1602 4.28613 71.0605 4.30469 cv
70.957 4.32422 70.7793 4.33398 70.5273 4.33398 cv
69.2813 4.33398 li
69.4287 4.20215 69.792 3.81836 70.376 3.17969 cv
70.7656 2.75684 71.0459 2.35449 71.2217 1.97559 cv
71.3311 1.73242 71.3896 1.49219 71.3896 1.25 cv
71.3896 0.914063 71.2598 0.619141 71 0.37207 cv
70.7412 0.12207 70.4199 0 70.0303 0 cv
69.667 0 69.3652 0.115234 69.123 0.347656 cv
68.8809 0.578125 68.7295 0.912109 68.6729 1.3457 cv
68.8018 1.3457 li
68.8906 1.08008 69.0273 0.879883 69.2148 0.741211 cv
69.4014 0.605469 69.6104 0.537109 69.8457 0.537109 cv
70.1025 0.537109 70.3252 0.632813 70.5107 0.828125 cv
70.6953 1.02246 70.7861 1.27246 70.7861 1.57422 cv
70.7861 1.96973 70.6182 2.40625 70.2803 2.88379 cv
69.9443 3.36426 69.3604 3.97949 68.5322 4.73535 cv
68.5322 4.86426 li
71.3457 4.86426 li
71.6797 3.94727 li
71.5508 3.94727 li
71.4893 4.05273 71.417 4.13477 71.3369 4.19043 cv
cp
ef
11.2935 185.843 mo
14.873 189.401 li
15.46 189.989 15.9614 190.388 16.3765 190.601 cv
16.7915 190.813 17.207 190.934 17.6221 190.962 cv
17.6221 191.228 li
13.0044 191.228 li
13.0044 190.962 li
13.2813 190.962 13.4805 190.915 13.6021 190.823 cv
13.7241 190.729 13.7847 190.626 13.7847 190.511 cv
13.7847 190.396 13.7622 190.294 13.7168 190.203 cv
13.6714 190.112 13.5225 189.943 13.2695 189.694 cv
9.91895 186.38 li
9.91895 189.509 li
9.91895 190.001 9.94971 190.325 10.0122 190.482 cv
10.0596 190.603 10.1597 190.704 10.3125 190.79 cv
10.5181 190.905 10.7349 190.962 10.9644 190.962 cv
11.2935 190.962 li
11.2935 191.228 li
7.15576 191.228 li
7.15576 190.962 li
7.49902 190.962 li
7.8999 190.962 8.19092 190.845 8.37256 190.611 cv
8.4873 190.458 8.54443 190.091 8.54443 189.509 cv
8.54443 183.237 li
8.54443 182.746 8.51318 182.419 8.45117 182.257 cv
8.40332 182.142 8.30566 182.042 8.15771 181.956 cv
7.94775 181.841 7.72803 181.784 7.49902 181.784 cv
7.15576 181.784 li
7.15576 181.52 li
11.2935 181.52 li
11.2935 181.784 li
10.9644 181.784 li
10.7397 181.784 10.5225 181.839 10.3125 181.948 cv
10.1646 182.025 10.062 182.14 10.0049 182.292 cv
9.94775 182.445 9.91895 182.761 9.91895 183.237 cv
9.91895 186.208 li
10.0142 186.118 10.3413 185.815 10.8999 185.3 cv
12.3174 184.001 13.1738 183.135 13.4697 182.7 cv
13.5986 182.51 13.6631 182.343 13.6631 182.199 cv
13.6631 182.09 13.6128 181.993 13.5127 181.909 cv
13.4126 181.826 13.2432 181.784 13.0044 181.784 cv
12.7827 181.784 li
12.7827 181.52 li
16.3477 181.52 li
16.3477 181.784 li
16.1377 181.789 15.9468 181.817 15.7749 181.87 cv
15.603 181.923 15.3931 182.024 15.145 182.175 cv
14.897 182.325 14.5913 182.567 14.2285 182.901 cv
14.1235 182.997 13.6392 183.485 12.7754 184.368 cv
11.2935 185.843 li
cp
f
20.9438 184.941 mo
20.6909 184.941 20.437 185.017 20.1816 185.167 cv
19.9263 185.317 19.7197 185.581 19.5625 185.958 cv
19.4048 186.335 19.3262 186.819 19.3262 187.411 cv
19.3262 188.366 19.5156 189.188 19.895 189.882 cv
20.2744 190.573 20.7744 190.919 21.395 190.919 cv
21.8579 190.919 22.2397 190.729 22.5405 190.347 cv
22.8413 189.965 22.9917 189.309 22.9917 188.378 cv
22.9917 187.214 22.7407 186.297 22.2397 185.628 cv
21.9009 185.171 21.4688 184.941 20.9438 184.941 cv
cp
21.166 184.476 mo
22.1587 184.476 22.9556 184.853 23.5571 185.606 cv
24.0679 186.251 24.3232 186.991 24.3232 187.827 cv
24.3232 188.413 24.1821 189.008 23.9009 189.608 cv
23.6191 190.21 23.2314 190.664 22.7373 190.97 cv
22.2432 191.274 21.6934 191.428 21.0874 191.428 cv
20.0991 191.428 19.314 191.034 18.7319 190.246 cv
18.2402 189.583 17.9946 188.839 17.9946 188.013 cv
17.9946 187.411 18.1436 186.813 18.4419 186.22 cv
18.7402 185.625 19.1328 185.187 19.6196 184.901 cv
20.1064 184.618 20.6221 184.476 21.166 184.476 cv
cp
f
31.0386 184.669 mo
31.0386 188.643 li
31.0386 189.401 31.0562 189.866 31.0923 190.035 cv
31.1279 190.204 31.1851 190.323 31.2642 190.39 cv
31.3428 190.456 31.4346 190.489 31.5396 190.489 cv
31.6875 190.489 31.8545 190.449 32.0405 190.368 cv
32.1411 190.618 li
30.1792 191.428 li
29.8574 191.428 li
29.8574 190.038 li
29.2939 190.649 28.8643 191.034 28.5684 191.191 cv
28.2725 191.349 27.96 191.428 27.6309 191.428 cv
27.2632 191.428 26.9448 191.321 26.6748 191.108 cv
26.4053 190.896 26.2178 190.624 26.1128 190.289 cv
26.0078 189.955 25.9556 189.483 25.9556 188.872 cv
25.9556 185.944 li
25.9556 185.634 25.9219 185.419 25.8555 185.3 cv
25.7886 185.181 25.6895 185.088 25.5581 185.024 cv
25.4268 184.96 25.1895 184.93 24.8457 184.935 cv
24.8457 184.669 li
27.144 184.669 li
27.144 189.058 li
27.144 189.669 27.25 190.069 27.4624 190.261 cv
27.6748 190.452 27.9316 190.547 28.2319 190.547 cv
28.4375 190.547 28.6699 190.482 28.9302 190.354 cv
29.1904 190.225 29.4995 189.979 29.8574 189.616 cv
29.8574 185.901 li
29.8574 185.528 29.7891 185.276 29.6533 185.146 cv
29.5171 185.015 29.2344 184.944 28.8047 184.935 cv
28.8047 184.669 li
31.0386 184.669 li
cp
f
34.8755 181.047 mo
34.8755 189.745 li
34.8755 190.155 34.9053 190.428 34.9648 190.562 cv
35.0244 190.694 35.1162 190.796 35.2407 190.866 cv
35.3647 190.935 35.5962 190.97 35.9351 190.97 cv
35.9351 191.228 li
32.7207 191.228 li
32.7207 190.97 li
33.021 190.97 33.2266 190.938 33.3364 190.876 cv
33.4458 190.814 33.5317 190.712 33.5938 190.568 cv
33.6558 190.425 33.687 190.151 33.687 189.745 cv
33.687 183.788 li
33.687 183.049 33.6704 182.595 33.6367 182.425 cv
33.6035 182.255 33.5498 182.14 33.4756 182.077 cv
33.4019 182.016 33.3076 181.985 33.1929 181.985 cv
33.0688 181.985 32.9111 182.022 32.7207 182.099 cv
32.5986 181.849 li
34.5532 181.047 li
34.8755 181.047 li
cp
f
37.7964 186.724 mo
40.832 186.724 li
40.8081 186.304 40.7578 186.009 40.6816 185.837 cv
40.5625 185.569 40.3848 185.358 40.1484 185.206 cv
39.9121 185.054 39.665 184.978 39.4072 184.978 cv
39.0112 184.978 38.6567 185.131 38.3442 185.438 cv
38.0317 185.747 37.8491 186.175 37.7964 186.724 cv
cp
37.7964 187.14 mo
37.7915 188.112 38.0278 188.876 38.5054 189.431 cv
38.9824 189.983 39.5435 190.261 40.1875 190.261 cv
40.6172 190.261 40.9907 190.143 41.3081 189.906 cv
41.6255 189.67 41.8916 189.266 42.1064 188.692 cv
42.3281 188.836 li
42.228 189.489 41.937 190.085 41.4546 190.622 cv
40.9727 191.159 40.3691 191.428 39.6436 191.428 cv
38.856 191.428 38.1821 191.121 37.6211 190.507 cv
37.0601 189.895 36.7798 189.069 36.7798 188.034 cv
36.7798 186.913 37.0674 186.038 37.6426 185.41 cv
38.2178 184.782 38.9395 184.469 39.8081 184.469 cv
40.543 184.469 41.147 184.711 41.6196 185.195 cv
42.0918 185.681 42.3281 186.327 42.3281 187.14 cv
37.7964 187.14 li
cp
f
46.5303 184.669 mo
49.6162 184.669 li
49.6162 184.935 li
49.4155 184.935 li
49.2295 184.935 49.0874 184.979 48.9897 185.07 cv
48.8916 185.161 48.8428 185.282 48.8428 185.436 cv
48.8428 185.603 48.8931 185.8 48.9932 186.03 cv
50.5181 189.651 li
52.0503 185.894 li
52.1597 185.626 52.2148 185.423 52.2148 185.285 cv
52.2148 185.218 52.1958 185.163 52.1572 185.12 cv
52.105 185.049 52.0381 185 51.957 184.974 cv
51.876 184.947 51.7109 184.935 51.4629 184.935 cv
51.4629 184.669 li
53.6035 184.669 li
53.6035 184.935 li
53.3555 184.953 53.1836 185.003 53.0884 185.085 cv
52.9209 185.228 52.7705 185.466 52.6372 185.8 cv
50.3105 191.428 li
50.0171 191.428 li
47.6758 185.894 li
47.5708 185.636 47.4707 185.45 47.375 185.339 cv
47.2798 185.227 47.1577 185.132 47.0103 185.056 cv
46.9287 185.013 46.769 184.973 46.5303 184.935 cv
46.5303 184.669 li
cp
f
71.4546 203.633 mo
71.4546 365.45 li
@
1.00798 lw
73.8052 206.547 mo
71.4546 202.921 li
69.1011 206.547 li
@
0.215427 lw
0 278.979 mo
147.023 278.979 li
@
1.00798 lw
144.11 276.629 mo
147.737 278.979 li
144.11 281.331 li
@
0.215427 lw
20.2969 330.103 mo
127.387 223.012 li
@
1.00798 lw
20.6948 326.381 mo
19.793 330.606 li
24.0205 329.706 li
@
0.283456 lw
[1.41728 1.41728 ] 0 dsh
72.4956 220.282 mo
104.518 220.282 130.637 246.4 130.637 278.425 cv
130.637 310.447 104.518 336.565 72.4956 336.565 cv
40.4722 336.565 14.3535 310.447 14.3535 278.425 cv
14.3535 246.4 40.4722 220.282 72.4956 220.282 cv
cp
@
72.501 255.908 mo
104.524 255.908 130.643 266.392 130.643 279.243 cv
130.643 292.097 104.524 302.58 72.501 302.58 cv
40.4775 302.58 14.3599 292.097 14.3599 279.243 cv
14.3599 266.392 40.4775 255.908 72.501 255.908 cv
cp
@
47.9565 278.63 mo
47.9565 246.606 58.4395 220.488 71.2925 220.488 cv
84.145 220.488 94.6279 246.606 94.6279 278.63 cv
94.6279 310.653 84.145 336.771 71.2925 336.771 cv
58.4395 336.771 47.9565 310.653 47.9565 278.63 cv
cp
@
0.569751 lw
[] 0 dsh
130.496 279.061 mo
130.496 279.242 li
130.496 292.095 104.378 302.578 72.354 302.578 cv
64.8599 302.578 56.9106 301.849 50.0967 300.756 cv
@
49.8677 300.888 mo
48.7744 294.073 48.1362 286.124 48.1362 278.63 cv
48.1362 246.606 58.6191 220.488 71.4717 220.488 cv
71.6543 220.488 li
@
71.1895 220.075 mo
71.4209 220.075 li
103.911 220.075 130.41 246.345 130.41 278.835 cv
@
71.2944 277.411 mo
72.0317 277.411 72.6318 278.131 72.6318 279.015 cv
72.6318 279.898 72.0317 280.619 71.2944 280.619 cv
70.5581 280.619 69.959 279.898 69.959 279.015 cv
69.959 278.131 70.5581 277.411 71.2944 277.411 cv
0 0 0 0.300049 cmyk
ef
0.215427 lw
71.2944 277.411 mo
72.0317 277.411 72.6318 278.131 72.6318 279.015 cv
72.6318 279.898 72.0317 280.619 71.2944 280.619 cv
70.5581 280.619 69.959 279.898 69.959 279.015 cv
69.959 278.131 70.5581 277.411 71.2944 277.411 cv
cp
0 0 0 1 cmyk
@
68.6851 275.988 mo
68.1841 276.375 67.8687 276.6 67.7388 276.661 cv
67.5474 276.75 67.3438 276.795 67.1265 276.795 cv
66.7871 276.795 66.5083 276.678 66.2896 276.448 cv
66.0703 276.215 65.9609 275.91 65.9609 275.534 cv
65.9609 275.294 66.0137 275.088 66.1221 274.913 cv
66.2671 274.673 66.521 274.445 66.8823 274.229 cv
67.2432 274.018 67.8438 273.758 68.6851 273.451 cv
68.6851 273.258 li
68.6851 272.771 68.6084 272.437 68.4526 272.254 cv
68.2979 272.072 68.0718 271.98 67.7769 271.98 cv
67.5527 271.98 67.374 272.041 67.2432 272.164 cv
67.1074 272.285 67.041 272.423 67.041 272.579 cv
67.0518 272.891 li
67.0518 273.054 67.0088 273.18 66.9253 273.27 cv
66.8413 273.358 66.7329 273.401 66.5977 273.401 cv
66.4639 273.401 66.3569 273.356 66.2734 273.263 cv
66.189 273.17 66.147 273.044 66.147 272.884 cv
66.147 272.577 66.3037 272.298 66.6172 272.04 cv
66.9307 271.785 67.3701 271.656 67.9375 271.656 cv
68.3711 271.656 68.7271 271.728 69.0059 271.875 cv
69.2148 271.985 69.3706 272.159 69.4712 272.394 cv
69.5342 272.547 69.5654 272.858 69.5654 273.334 cv
69.5654 274.993 li
69.5654 275.46 69.5747 275.747 69.5923 275.852 cv
69.6108 275.957 69.6401 276.027 69.6807 276.062 cv
69.7222 276.099 69.7705 276.117 69.8218 276.117 cv
69.8789 276.117 69.9307 276.104 69.9717 276.078 cv
70.0464 276.033 70.1904 275.901 70.4043 275.688 cv
70.4043 275.988 li
70.0073 276.522 69.626 276.79 69.2612 276.79 cv
69.0884 276.79 68.9497 276.729 68.8452 276.606 cv
68.7412 276.487 68.6885 276.279 68.6851 275.988 cv
cp
68.6851 275.642 mo
68.6851 273.775 li
68.1465 273.991 67.8013 274.143 67.6445 274.229 cv
67.3613 274.387 67.1602 274.55 67.041 274.722 cv
66.918 274.894 66.8574 275.081 66.8574 275.284 cv
66.8574 275.538 66.9341 275.752 67.0869 275.921 cv
67.2412 276.09 67.4185 276.175 67.6157 276.175 cv
67.8882 276.175 68.2437 275.996 68.6851 275.642 cv
ef
71.1768 279.232 mo
72.9565 279.232 li
73.002 279.716 73.6235 280.048 74.8066 280.227 cv
75.9897 280.402 78.3433 280.492 81.8599 280.492 cv
86.603 280.492 li
91.6919 280.492 95.1479 280.599 96.9746 280.808 cv
98.8013 281.019 100.065 281.406 100.79 281.972 cv
101.5 281.401 102.775 281.014 104.613 280.806 cv
106.44 280.597 109.898 280.492 114.986 280.492 cv
119.741 280.492 li
123.257 280.492 125.599 280.404 126.771 280.229 cv
127.932 280.051 128.541 279.719 128.586 279.232 cv
130.368 279.232 li
130.368 279.285 li
130.368 280.068 129.54 280.605 127.874 280.897 cv
126.219 281.19 123.165 281.337 118.73 281.337 cv
111.771 281.337 li
108.163 281.337 105.67 281.44 104.315 281.649 cv
102.948 281.86 102.121 282.246 101.835 282.812 cv
99.6738 282.812 li
99.3882 282.241 98.561 281.851 97.2041 281.645 cv
95.8501 281.438 93.3691 281.337 89.7617 281.337 cv
82.8354 281.337 li
78.3779 281.337 75.3237 281.19 73.6592 280.897 cv
72.0049 280.605 71.1768 280.068 71.1768 279.285 cv
71.1768 279.232 li
ef
101.626 286.263 mo
100.924 286.013 100.575 285.636 100.575 285.131 cv
100.575 284.731 100.76 284.412 101.132 284.176 cv
101.504 283.937 101.965 283.815 102.518 283.815 cv
103.02 283.815 103.418 283.899 103.714 284.066 cv
104.009 284.229 104.157 284.429 104.157 284.66 cv
104.157 284.782 104.111 284.888 104.019 284.979 cv
103.928 285.068 103.82 285.114 103.7 285.114 cv
103.499 285.114 103.334 284.976 103.207 284.699 cv
103.028 284.314 102.762 284.12 102.407 284.12 cv
102.124 284.12 101.893 284.214 101.712 284.399 cv
101.529 284.583 101.438 284.843 101.438 285.173 cv
101.438 285.825 101.776 286.152 102.448 286.152 cv
102.519 286.152 102.601 286.145 102.694 286.13 cv
102.855 286.107 102.979 286.097 103.068 286.097 cv
103.285 286.097 103.395 286.159 103.395 286.284 cv
103.395 286.424 103.283 286.493 103.063 286.493 cv
102.985 286.493 102.866 286.479 102.711 286.456 cv
102.592 286.435 102.501 286.424 102.437 286.424 cv
101.725 286.424 101.369 286.786 101.369 287.514 cv
101.369 287.865 101.463 288.149 101.652 288.365 cv
101.841 288.58 102.104 288.688 102.442 288.688 cv
102.866 288.688 103.148 288.469 103.287 288.031 cv
103.358 287.8 103.436 287.64 103.524 287.55 cv
103.612 287.461 103.728 287.417 103.874 287.417 cv
103.997 287.417 104.105 287.461 104.203 287.548 cv
104.301 287.636 104.35 287.747 104.35 287.883 cv
104.35 288.207 104.168 288.473 103.805 288.686 cv
103.442 288.897 103.002 289.003 102.485 289.003 cv
101.919 289.003 101.417 288.869 100.977 288.597 cv
100.538 288.327 100.316 287.966 100.316 287.514 cv
100.316 286.946 100.753 286.531 101.626 286.263 cv
ef
261.743 268.067 mo
260.896 267.765 260.472 267.309 260.472 266.696 cv
260.472 266.215 260.696 265.827 261.146 265.541 cv
261.597 265.252 262.154 265.106 262.822 265.106 cv
263.429 265.106 263.913 265.208 264.27 265.409 cv
264.627 265.607 264.806 265.848 264.806 266.128 cv
264.806 266.276 264.75 266.403 264.638 266.514 cv
264.527 266.621 264.397 266.678 264.252 266.678 cv
264.01 266.678 263.81 266.51 263.657 266.175 cv
263.439 265.708 263.119 265.475 262.688 265.475 cv
262.347 265.475 262.065 265.587 261.848 265.813 cv
261.627 266.035 261.517 266.349 261.517 266.748 cv
261.517 267.537 261.925 267.932 262.738 267.932 cv
262.825 267.932 262.923 267.924 263.035 267.905 cv
263.231 267.879 263.381 267.866 263.487 267.866 cv
263.751 267.866 263.883 267.94 263.883 268.094 cv
263.883 268.262 263.748 268.345 263.482 268.345 cv
263.388 268.345 263.244 268.329 263.057 268.302 cv
262.913 268.274 262.802 268.262 262.726 268.262 cv
261.864 268.262 261.433 268.699 261.433 269.581 cv
261.433 270.006 261.547 270.351 261.774 270.61 cv
262.005 270.872 262.321 271.002 262.731 271.002 cv
263.244 271.002 263.586 270.736 263.753 270.207 cv
263.84 269.926 263.935 269.732 264.04 269.625 cv
264.146 269.517 264.287 269.463 264.464 269.463 cv
264.611 269.463 264.743 269.517 264.86 269.622 cv
264.979 269.729 265.038 269.863 265.038 270.025 cv
265.038 270.419 264.817 270.741 264.38 270.999 cv
263.94 271.255 263.409 271.383 262.782 271.383 cv
262.099 271.383 261.49 271.219 260.958 270.892 cv
260.427 270.563 260.16 270.127 260.16 269.581 cv
260.16 268.894 260.687 268.392 261.743 268.067 cv
ef
232.241 201.131 mo
232.241 360.374 li
@
1.00798 lw
234.592 204.044 mo
232.241 200.419 li
229.888 204.044 li
@
0.215427 lw
153.605 278.708 mo
313.657 278.708 li
@
1.00798 lw
310.744 276.358 mo
314.369 278.708 li
310.744 281.06 li
@
0.215427 lw
176.216 334.851 mo
276.2 234.866 li
@
1.00798 lw
176.615 331.128 mo
175.712 335.354 li
179.94 334.453 li
@
0.566921 lw
295.019 278.777 mo
210.016 300.953 li
169.546 278.777 li
@
0.283456 lw
[1.41728 0.850367 ] 0 dsh
169.546 278.593 mo
254.364 256.788 li
294.833 278.777 li
@
0.566921 lw
[] 0 dsh
169.546 278.962 mo
232.005 341.605 li
294.833 278.777 li
@
210.016 301.139 mo
232.19 341.844 li
@
0.283456 lw
[1.41728 1.41728 ] 0 dsh
254.334 256.786 mo
232.096 341.494 li
@
0.566921 lw
[] 0 dsh
169.463 278.372 mo
232.258 216.56 li
294.399 278.372 li
@
232.359 216.638 mo
210.375 301.329 li
@
0.283456 lw
[1.41728 1.41728 ] 0 dsh
254.17 256.683 mo
232.53 216.466 li
@
232.604 278.372 mo
234.414 278.372 li
234.46 277.734 235.092 277.298 236.296 277.061 cv
237.5 276.827 239.895 276.709 243.47 276.709 cv
248.293 276.709 li
253.471 276.709 256.985 276.571 258.844 276.293 cv
260.701 276.015 261.985 275.505 262.722 274.76 cv
263.447 275.51 264.743 276.021 266.614 276.297 cv
268.472 276.573 271.986 276.709 277.162 276.709 cv
282 276.709 li
285.575 276.709 287.959 276.825 289.148 277.059 cv
290.329 277.292 290.946 277.729 290.995 278.372 cv
292.806 278.372 li
292.806 278.302 li
292.806 277.27 291.963 276.561 290.271 276.176 cv
288.588 275.788 285.48 275.596 280.971 275.596 cv
273.89 275.596 li
270.224 275.596 267.688 275.459 266.308 275.183 cv
264.919 274.906 264.077 274.397 263.785 273.649 cv
261.588 273.649 li
261.296 274.402 260.455 274.918 259.077 275.189 cv
257.697 275.462 255.175 275.596 251.507 275.596 cv
244.461 275.596 li
239.93 275.596 236.823 275.788 235.128 276.176 cv
233.445 276.561 232.604 277.27 232.604 278.302 cv
232.604 278.372 li
ef
231.819 276.738 mo
232.71 276.738 233.437 277.61 233.437 278.68 cv
233.437 279.749 232.71 280.621 231.819 280.621 cv
230.928 280.621 230.201 279.749 230.201 278.68 cv
230.201 277.61 230.928 276.738 231.819 276.738 cv
0 0 0 0.300049 cmyk
ef
0.215427 lw
[] 0 dsh
231.819 276.738 mo
232.71 276.738 233.437 277.61 233.437 278.68 cv
233.437 279.749 232.71 280.621 231.819 280.621 cv
230.928 280.621 230.201 279.749 230.201 278.68 cv
230.201 277.61 230.928 276.738 231.819 276.738 cv
cp
0 0 0 1 cmyk
@
228.177 275.821 mo
227.569 276.291 227.188 276.563 227.032 276.635 cv
226.801 276.744 226.553 276.799 226.291 276.799 cv
225.88 276.799 225.543 276.657 225.278 276.377 cv
225.013 276.098 224.881 275.729 224.881 275.271 cv
224.881 274.982 224.945 274.733 225.075 274.521 cv
225.251 274.23 225.558 273.955 225.994 273.694 cv
226.432 273.437 227.16 273.123 228.177 272.753 cv
228.177 272.519 li
228.177 271.93 228.084 271.523 227.897 271.304 cv
227.709 271.084 227.435 270.974 227.078 270.974 cv
226.808 270.974 226.591 271.047 226.432 271.195 cv
226.269 271.341 226.188 271.508 226.188 271.698 cv
226.2 272.072 li
226.2 272.271 226.15 272.424 226.047 272.532 cv
225.946 272.641 225.814 272.693 225.65 272.693 cv
225.49 272.693 225.36 272.638 225.259 272.525 cv
225.157 272.413 225.105 272.261 225.105 272.066 cv
225.105 271.696 225.296 271.355 225.675 271.045 cv
226.055 270.736 226.587 270.58 227.272 270.58 cv
227.798 270.58 228.227 270.668 228.564 270.845 cv
228.819 270.979 229.007 271.188 229.128 271.474 cv
229.204 271.658 229.241 272.035 229.241 272.608 cv
229.241 274.619 li
229.241 275.184 229.252 275.53 229.275 275.657 cv
229.297 275.784 229.332 275.869 229.382 275.911 cv
229.432 275.955 229.489 275.979 229.553 275.979 cv
229.621 275.979 229.684 275.962 229.734 275.932 cv
229.824 275.877 230 275.717 230.258 275.459 cv
230.258 275.821 li
229.775 276.468 229.314 276.792 228.873 276.792 cv
228.665 276.792 228.495 276.719 228.371 276.571 cv
228.246 276.425 228.181 276.174 228.177 275.821 cv
cp
228.177 275.402 mo
228.177 273.146 li
227.527 273.405 227.106 273.589 226.918 273.694 cv
226.576 273.885 226.332 274.083 226.188 274.29 cv
226.04 274.498 225.967 274.723 225.967 274.971 cv
225.967 275.278 226.06 275.536 226.245 275.741 cv
226.43 275.944 226.644 276.049 226.884 276.049 cv
227.214 276.049 227.643 275.832 228.177 275.402 cv
ef
0.566921 lw
329.863 331.601 mo
416.259 331.601 li
416.259 254.273 li
329.863 254.273 li
329.863 331.601 li
cp
@
0.283456 lw
[1.41728 1.41728 ] 0 dsh
357.325 227.452 mo
357.325 304.401 li
443.684 304.401 li
@
0.566921 lw
[] 0 dsh
357.169 227.004 mo
443.435 227.004 li
443.415 304.275 li
@
416.248 254.228 mo
443.482 226.993 li
@
0.283456 lw
[1.41728 1.41728 ] 0 dsh
329.974 331.539 mo
357.208 304.304 li
@
0.566921 lw
[] 0 dsh
416.248 331.539 mo
443.482 304.304 li
@
329.991 254.099 mo
357.226 226.863 li
@
385.981 278.083 mo
386.718 278.083 387.318 278.802 387.318 279.686 cv
387.318 280.57 386.718 281.29 385.981 281.29 cv
385.246 281.29 384.644 280.57 384.644 279.686 cv
384.644 278.802 385.246 278.083 385.981 278.083 cv
0 0 0 0.300049 cmyk
ef
0.215427 lw
385.981 278.083 mo
386.718 278.083 387.318 278.802 387.318 279.686 cv
387.318 280.57 386.718 281.29 385.981 281.29 cv
385.246 281.29 384.644 280.57 384.644 279.686 cv
384.644 278.802 385.246 278.083 385.981 278.083 cv
cp
0 0 0 1 cmyk
@
382.249 276.838 mo
381.749 277.227 381.432 277.45 381.304 277.51 cv
381.111 277.601 380.908 277.646 380.691 277.646 cv
380.351 277.646 380.073 277.529 379.854 277.298 cv
379.635 277.066 379.524 276.762 379.524 276.384 cv
379.524 276.146 379.578 275.938 379.686 275.765 cv
379.831 275.523 380.086 275.295 380.445 275.081 cv
380.807 274.867 381.408 274.608 382.249 274.302 cv
382.249 274.108 li
382.249 273.622 382.173 273.286 382.018 273.104 cv
381.862 272.923 381.637 272.832 381.341 272.832 cv
381.116 272.832 380.938 272.893 380.807 273.015 cv
380.672 273.135 380.605 273.273 380.605 273.431 cv
380.616 273.74 li
380.616 273.903 380.573 274.03 380.49 274.119 cv
380.406 274.208 380.298 274.253 380.162 274.253 cv
380.028 274.253 379.922 274.206 379.837 274.115 cv
379.753 274.021 379.712 273.895 379.712 273.734 cv
379.712 273.43 379.868 273.147 380.182 272.891 cv
380.495 272.635 380.935 272.506 381.501 272.506 cv
381.936 272.506 382.292 272.579 382.569 272.725 cv
382.779 272.836 382.935 273.009 383.036 273.244 cv
383.099 273.397 383.131 273.709 383.131 274.184 cv
383.131 275.845 li
383.131 276.312 383.14 276.597 383.157 276.703 cv
383.175 276.807 383.205 276.877 383.244 276.913 cv
383.287 276.948 383.335 276.967 383.387 276.967 cv
383.443 276.967 383.495 276.954 383.536 276.929 cv
383.611 276.884 383.755 276.753 383.969 276.539 cv
383.969 276.838 li
383.572 277.372 383.191 277.64 382.826 277.64 cv
382.653 277.64 382.515 277.58 382.409 277.458 cv
382.306 277.337 382.253 277.129 382.249 276.838 cv
cp
382.249 276.491 mo
382.249 274.627 li
381.711 274.841 381.366 274.992 381.209 275.081 cv
380.926 275.237 380.725 275.401 380.605 275.572 cv
380.482 275.744 380.422 275.93 380.422 276.134 cv
380.422 276.39 380.499 276.604 380.652 276.773 cv
380.805 276.939 380.983 277.025 381.181 277.025 cv
381.453 277.025 381.808 276.847 382.249 276.491 cv
ef
417.129 331.691 mo
417.931 330.891 li
418.26 331.177 418.751 331.109 419.397 330.691 cv
420.042 330.271 421.16 329.267 422.743 327.684 cv
424.878 325.548 li
427.169 323.258 428.793 321.768 429.749 321.078 cv
430.709 320.39 431.521 320.068 432.208 320.103 cv
432.165 319.419 432.493 318.598 433.189 317.639 cv
433.877 316.683 435.368 315.059 437.66 312.767 cv
439.8 310.627 li
441.383 309.044 442.384 307.932 442.799 307.292 cv
443.208 306.658 443.271 306.172 442.98 305.841 cv
443.783 305.038 li
443.817 305.072 li
444.315 305.57 444.285 306.287 443.721 307.223 cv
443.164 308.154 441.88 309.622 439.882 311.619 cv
436.748 314.755 li
435.125 316.378 434.067 317.567 433.592 318.312 cv
433.109 319.06 432.982 319.679 433.216 320.167 cv
432.242 321.141 li
431.749 320.905 431.127 321.029 430.387 321.509 cv
429.645 321.987 428.464 323.039 426.838 324.664 cv
423.719 327.782 li
421.714 329.788 420.243 331.072 419.309 331.635 cv
418.377 332.194 417.661 332.225 417.163 331.726 cv
417.129 331.691 li
ef
440.837 325.198 mo
440.331 326.593 li
436.058 326.593 li
436.058 326.396 li
437.313 325.249 438.199 324.312 438.711 323.587 cv
439.224 322.858 439.481 322.194 439.481 321.594 cv
439.481 321.135 439.341 320.757 439.058 320.461 cv
438.776 320.166 438.441 320.019 438.05 320.019 cv
437.692 320.019 437.373 320.122 437.09 320.33 cv
436.808 320.538 436.599 320.844 436.464 321.245 cv
436.264 321.245 li
436.354 320.587 436.581 320.082 436.951 319.729 cv
437.32 319.376 437.779 319.2 438.331 319.2 cv
438.919 319.2 439.41 319.39 439.802 319.767 cv
440.197 320.144 440.395 320.589 440.395 321.102 cv
440.395 321.468 440.308 321.836 440.137 322.202 cv
439.875 322.778 439.446 323.39 438.854 324.035 cv
437.97 325.003 437.414 325.587 437.193 325.787 cv
439.084 325.787 li
439.469 325.787 439.739 325.772 439.895 325.743 cv
440.05 325.717 440.19 325.657 440.314 325.57 cv
440.438 325.482 440.548 325.358 440.641 325.198 cv
440.837 325.198 li
cp
442.98 324.002 mo
442.277 323.753 441.928 323.375 441.928 322.869 cv
441.928 322.471 442.113 322.152 442.485 321.915 cv
442.857 321.676 443.318 321.556 443.87 321.556 cv
444.373 321.556 444.771 321.639 445.067 321.805 cv
445.362 321.969 445.511 322.168 445.511 322.399 cv
445.511 322.521 445.464 322.627 445.371 322.718 cv
445.28 322.808 445.174 322.854 445.053 322.854 cv
444.852 322.854 444.688 322.715 444.56 322.438 cv
444.382 322.053 444.116 321.86 443.76 321.86 cv
443.477 321.86 443.245 321.952 443.065 322.139 cv
442.882 322.323 442.791 322.582 442.791 322.912 cv
442.791 323.563 443.13 323.892 443.801 323.892 cv
443.872 323.892 443.954 323.884 444.049 323.869 cv
444.209 323.847 444.332 323.836 444.421 323.836 cv
444.638 323.836 444.748 323.898 444.748 324.024 cv
444.748 324.162 444.636 324.231 444.417 324.231 cv
444.339 324.231 444.22 324.219 444.064 324.196 cv
443.945 324.174 443.854 324.162 443.79 324.162 cv
443.078 324.162 442.722 324.525 442.722 325.253 cv
442.722 325.604 442.818 325.889 443.005 326.104 cv
443.193 326.319 443.457 326.427 443.796 326.427 cv
444.22 326.427 444.503 326.208 444.642 325.771 cv
444.711 325.538 444.789 325.378 444.877 325.289 cv
444.966 325.2 445.081 325.155 445.228 325.155 cv
445.35 325.155 445.459 325.2 445.557 325.287 cv
445.654 325.375 445.702 325.486 445.702 325.621 cv
445.702 325.946 445.521 326.211 445.158 326.425 cv
444.796 326.637 444.356 326.742 443.839 326.742 cv
443.274 326.742 442.771 326.607 442.33 326.336 cv
441.891 326.065 441.67 325.705 441.67 325.253 cv
441.67 324.686 442.105 324.271 442.98 324.002 cv
ef
385.943 216.368 mo
385.943 342.73 li
@
1.00798 lw
388.296 219.28 mo
385.943 215.655 li
383.592 219.28 li
@
0.215427 lw
322.307 279.312 mo
453.425 279.312 li
@
1.00798 lw
450.512 276.962 mo
454.137 279.312 li
450.512 281.663 li
@
0.215427 lw
329.594 336.213 mo
443.528 222.279 li
@
1.00798 lw
329.993 332.491 mo
329.091 336.717 li
333.319 335.817 li
@
58.4902 383.887 mo
58.4902 384.146 li
57.7832 383.791 57.1914 383.374 56.7188 382.896 cv
56.0449 382.217 55.5234 381.416 55.1602 380.492 cv
54.793 379.568 54.6094 378.61 54.6094 377.617 cv
54.6094 376.162 54.9697 374.837 55.6846 373.64 cv
56.4023 372.442 57.3389 371.586 58.4902 371.069 cv
58.4902 371.364 li
57.9141 371.685 57.4414 372.119 57.0703 372.673 cv
56.6992 373.225 56.4238 373.926 56.2422 374.775 cv
56.0586 375.623 55.9678 376.51 55.9678 377.432 cv
55.9678 378.435 56.0449 379.347 56.1992 380.167 cv
56.3203 380.815 56.4697 381.334 56.6426 381.725 cv
56.8154 382.116 57.0479 382.493 57.3408 382.853 cv
57.6338 383.215 58.0176 383.559 58.4902 383.887 cv
cp
60.9863 376.878 mo
60.9863 374.706 li
60.9863 374.146 60.9668 373.508 60.9287 372.788 cv
60.8926 372.067 60.8447 371.502 60.7891 371.089 cv
59.1025 370.844 li
59.1025 370.774 li
63.7227 370.774 li
64.5977 370.774 65.2988 370.95 65.8203 371.298 cv
66.3428 371.647 66.7051 372.046 66.9063 372.493 cv
67.1094 372.942 67.209 373.328 67.209 373.65 cv
67.209 374.096 67.1094 374.492 66.9063 374.842 cv
66.7051 375.193 66.4404 375.469 66.1172 375.675 cv
65.791 375.882 65.459 376.004 65.1211 376.042 cv
65.1211 376.069 li
65.4404 376.196 65.7051 376.364 65.916 376.575 cv
66.082 376.74 66.2686 376.971 66.4795 377.269 cv
66.6904 377.566 66.9688 377.972 67.3145 378.488 cv
67.6621 379.004 67.9404 379.407 68.1523 379.698 cv
68.3633 379.988 68.5576 380.225 68.7363 380.408 cv
69.1289 380.801 69.5176 380.998 69.9023 380.998 cv
69.9023 381.068 li
68.6797 381.068 li
67.9941 381.068 67.4512 380.861 67.0488 380.449 cv
66.8896 380.29 66.7314 380.101 66.5723 379.885 cv
66.418 379.666 66.168 379.308 65.8301 378.812 cv
65.4883 378.315 65.2031 377.905 64.9697 377.58 cv
64.7363 377.256 64.5547 377.029 64.418 376.892 cv
64.2168 376.69 64.0313 376.556 63.8652 376.486 cv
63.7012 376.419 63.4551 376.385 63.1318 376.385 cv
62.8369 376.385 62.6064 376.402 62.4404 376.436 cv
62.4141 376.688 62.4004 376.969 62.4004 377.278 cv
62.4004 378.579 li
62.4004 379.128 62.457 379.851 62.5742 380.751 cv
64.3262 380.998 li
64.3262 381.068 li
59.1025 381.068 li
59.1025 380.998 li
60.7539 380.751 li
60.8223 380.278 60.8809 379.613 60.9219 378.754 cv
60.9648 377.897 60.9863 377.271 60.9863 376.878 cv
cp
62.3857 373.664 mo
62.3857 374.819 li
62.3857 375.226 62.4004 375.606 62.4287 375.956 cv
62.6113 375.985 62.875 375.999 63.2227 375.999 cv
63.8223 375.999 64.3076 375.896 64.6748 375.69 cv
65.041 375.483 65.3057 375.214 65.4619 374.883 cv
65.6211 374.554 65.6973 374.192 65.6973 373.798 cv
65.6973 373.41 65.623 373.05 65.4688 372.721 cv
65.3184 372.396 65.1211 372.116 64.8789 371.888 cv
64.6367 371.66 64.3672 371.485 64.0703 371.36 cv
63.7725 371.235 63.4795 371.175 63.1934 371.175 cv
62.9229 371.175 62.709 371.192 62.5537 371.231 cv
62.5127 371.502 62.4746 371.894 62.4385 372.399 cv
62.4023 372.906 62.3857 373.326 62.3857 373.664 cv
cp
64.918 377.151 mo
66.4434 379.366 li
66.8086 379.887 67.1348 380.259 67.4209 380.481 cv
67.7051 380.703 68.0449 380.818 68.4326 380.823 cv
68.4326 380.751 li
68.0635 380.643 67.5889 380.167 67.0049 379.325 cv
65.7832 377.566 li
65.5195 377.182 65.2754 376.892 65.0449 376.695 cv
64.8135 376.498 64.5332 376.366 64.1992 376.301 cv
64.1709 376.356 li
64.4346 376.527 64.6816 376.791 64.918 377.151 cv
cp
61.1621 371.048 mo
61.1621 380.794 li
61.668 380.794 li
61.668 371.048 li
61.1621 371.048 li
cp
63.0889 370.928 mo
63.0889 370.998 li
63.7314 371.012 64.2686 371.168 64.7031 371.466 cv
65.1357 371.765 65.4531 372.128 65.6504 372.56 cv
65.8457 372.992 65.9434 373.417 65.9434 373.839 cv
65.9434 374.778 65.5371 375.454 64.7207 375.872 cv
64.7637 375.901 li
65.2422 375.778 65.6348 375.519 65.9473 375.121 cv
66.2588 374.723 66.4141 374.245 66.4141 373.693 cv
66.4141 373.261 66.3301 372.87 66.1621 372.522 cv
65.9922 372.171 65.7646 371.881 65.4766 371.646 cv
65.1885 371.41 64.8652 371.233 64.5098 371.11 cv
64.1523 370.987 63.793 370.928 63.4316 370.928 cv
63.0889 370.928 li
cp
70.2813 370.009 mo
70.418 369.688 70.5908 369.44 70.7969 369.265 cv
71.002 369.09 71.2627 369.003 71.5723 369.003 cv
71.9531 369.003 72.2461 369.126 72.4512 369.376 cv
72.6064 369.56 72.6836 369.76 72.6836 369.968 cv
72.6836 370.315 72.4648 370.674 72.0273 371.046 cv
72.3203 371.161 72.543 371.323 72.6934 371.538 cv
72.8438 371.751 72.918 372.001 72.918 372.289 cv
72.918 372.701 72.7871 373.059 72.5254 373.362 cv
72.1816 373.755 71.6865 373.952 71.0371 373.952 cv
70.7178 373.952 70.4961 373.914 70.3818 373.832 cv
70.2666 373.753 70.209 373.669 70.209 373.575 cv
70.209 373.508 70.2344 373.448 70.291 373.397 cv
70.3457 373.345 70.4121 373.318 70.4902 373.318 cv
70.5479 373.318 70.6064 373.328 70.668 373.347 cv
70.709 373.359 70.7998 373.403 70.9385 373.477 cv
71.0801 373.549 71.1768 373.594 71.2314 373.609 cv
71.3184 373.633 71.4121 373.646 71.5098 373.646 cv
71.748 373.646 71.957 373.554 72.1338 373.369 cv
72.3086 373.184 72.3975 372.966 72.3975 372.711 cv
72.3975 372.526 72.3564 372.346 72.2754 372.169 cv
72.2158 372.039 72.1484 371.938 72.0742 371.871 cv
71.9727 371.778 71.8369 371.694 71.6602 371.617 cv
71.4844 371.54 71.3057 371.502 71.1211 371.502 cv
71.0107 371.502 li
71.0107 371.396 li
71.1953 371.372 71.3799 371.308 71.5684 371.196 cv
71.752 371.087 71.8887 370.955 71.9727 370.799 cv
72.0566 370.646 72.0996 370.476 72.0996 370.29 cv
72.0996 370.048 72.0234 369.853 71.873 369.704 cv
71.7207 369.556 71.5332 369.481 71.3076 369.481 cv
70.9453 369.481 70.6406 369.675 70.3984 370.063 cv
70.2813 370.009 li
cp
74.2891 383.465 mo
74.2891 383.156 li
74.7705 382.997 75.1455 382.75 75.4121 382.414 cv
75.6758 382.078 75.8076 381.723 75.8076 381.349 cv
75.8076 381.26 75.7871 381.185 75.7461 381.123 cv
75.7119 381.082 75.6777 381.06 75.6465 381.06 cv
75.5947 381.06 75.4814 381.108 75.3086 381.202 cv
75.2246 381.243 75.1357 381.264 75.043 381.264 cv
74.8115 381.264 74.6299 381.197 74.4922 381.06 cv
74.3594 380.924 74.2891 380.737 74.2891 380.499 cv
74.2891 380.269 74.377 380.072 74.5527 379.908 cv
74.7275 379.743 74.9434 379.662 75.1953 379.662 cv
75.5059 379.662 75.7813 379.796 76.0215 380.067 cv
76.2637 380.336 76.3838 380.693 76.3838 381.137 cv
76.3838 381.619 76.2158 382.068 75.8828 382.483 cv
75.5469 382.899 75.0156 383.225 74.2891 383.465 cv
ef
59.4839 187.14 mo
59.4839 184.968 li
59.4839 184.407 59.4644 183.77 59.4263 183.05 cv
59.3901 182.329 59.3423 181.764 59.2866 181.351 cv
57.6001 181.105 li
57.6001 181.036 li
62.2202 181.036 li
63.0952 181.036 63.7964 181.212 64.3179 181.56 cv
64.8403 181.909 65.2026 182.308 65.4038 182.755 cv
65.6069 183.204 65.7065 183.59 65.7065 183.912 cv
65.7065 184.357 65.6069 184.754 65.4038 185.104 cv
65.2026 185.455 64.938 185.73 64.6147 185.937 cv
64.2886 186.144 63.9565 186.266 63.6187 186.304 cv
63.6187 186.331 li
63.938 186.458 64.2026 186.626 64.4136 186.837 cv
64.5796 187.002 64.7661 187.232 64.9771 187.53 cv
65.188 187.828 65.4663 188.233 65.812 188.75 cv
66.1597 189.266 66.438 189.669 66.6499 189.96 cv
66.8608 190.25 67.0552 190.486 67.2339 190.67 cv
67.6265 191.063 68.0151 191.26 68.3999 191.26 cv
68.3999 191.33 li
67.1772 191.33 li
66.4917 191.33 65.9487 191.123 65.5464 190.711 cv
65.3872 190.552 65.229 190.362 65.0698 190.146 cv
64.9155 189.928 64.6655 189.569 64.3276 189.073 cv
63.9858 188.577 63.7007 188.167 63.4673 187.842 cv
63.2339 187.518 63.0522 187.291 62.9155 187.153 cv
62.7144 186.952 62.5288 186.817 62.3628 186.748 cv
62.1987 186.681 61.9526 186.646 61.6294 186.646 cv
61.3345 186.646 61.104 186.664 60.938 186.697 cv
60.9116 186.949 60.8979 187.23 60.8979 187.54 cv
60.8979 188.841 li
60.8979 189.39 60.9546 190.112 61.0718 191.013 cv
62.8237 191.26 li
62.8237 191.33 li
57.6001 191.33 li
57.6001 191.26 li
59.2515 191.013 li
59.3198 190.54 59.3784 189.875 59.4194 189.016 cv
59.4624 188.159 59.4839 187.532 59.4839 187.14 cv
cp
60.8833 183.926 mo
60.8833 185.081 li
60.8833 185.487 60.8979 185.868 60.9263 186.218 cv
61.1089 186.247 61.3726 186.261 61.7202 186.261 cv
62.3198 186.261 62.8052 186.157 63.1724 185.952 cv
63.5386 185.745 63.8032 185.476 63.9595 185.145 cv
64.1187 184.815 64.1948 184.454 64.1948 184.06 cv
64.1948 183.672 64.1206 183.312 63.9663 182.982 cv
63.8159 182.657 63.6187 182.378 63.3765 182.149 cv
63.1343 181.922 62.8647 181.747 62.5679 181.622 cv
62.27 181.497 61.9771 181.437 61.6909 181.437 cv
61.4204 181.437 61.2065 181.454 61.0513 181.493 cv
61.0103 181.764 60.9722 182.155 60.936 182.661 cv
60.8999 183.168 60.8833 183.588 60.8833 183.926 cv
cp
63.4155 187.413 mo
64.9409 189.628 li
65.3062 190.148 65.6323 190.521 65.9185 190.743 cv
66.2026 190.965 66.5425 191.08 66.9302 191.085 cv
66.9302 191.013 li
66.561 190.904 66.0864 190.429 65.5024 189.587 cv
64.2808 187.828 li
64.0171 187.443 63.7729 187.153 63.5425 186.957 cv
63.311 186.76 63.0308 186.628 62.6968 186.563 cv
62.6685 186.618 li
62.9321 186.789 63.1792 187.053 63.4155 187.413 cv
cp
59.6597 181.31 mo
59.6597 191.056 li
60.1655 191.056 li
60.1655 181.31 li
59.6597 181.31 li
cp
61.5864 181.189 mo
61.5864 181.26 li
62.229 181.273 62.7661 181.43 63.2007 181.728 cv
63.6333 182.026 63.9507 182.39 64.1479 182.821 cv
64.3433 183.254 64.4409 183.679 64.4409 184.101 cv
64.4409 185.04 64.0347 185.716 63.2183 186.134 cv
63.2612 186.163 li
63.7397 186.04 64.1323 185.78 64.4448 185.383 cv
64.7563 184.984 64.9116 184.507 64.9116 183.955 cv
64.9116 183.522 64.8276 183.132 64.6597 182.784 cv
64.4897 182.433 64.2622 182.143 63.9741 181.907 cv
63.686 181.672 63.3628 181.495 63.0073 181.372 cv
62.6499 181.249 62.2905 181.189 61.9292 181.189 cv
61.5864 181.189 li
cp
68.7788 180.271 mo
68.9155 179.95 69.0884 179.702 69.2944 179.526 cv
69.4995 179.352 69.7603 179.265 70.0698 179.265 cv
70.4507 179.265 70.7437 179.388 70.9487 179.638 cv
71.104 179.821 71.1812 180.021 71.1812 180.229 cv
71.1812 180.577 70.9624 180.936 70.5249 181.308 cv
70.8179 181.423 71.0405 181.585 71.1909 181.8 cv
71.3413 182.013 71.4155 182.263 71.4155 182.551 cv
71.4155 182.963 71.2847 183.32 71.0229 183.624 cv
70.6792 184.017 70.1841 184.214 69.5347 184.214 cv
69.2153 184.214 68.9937 184.176 68.8794 184.094 cv
68.7642 184.015 68.7065 183.931 68.7065 183.837 cv
68.7065 183.77 68.7319 183.71 68.7886 183.659 cv
68.8433 183.606 68.9097 183.58 68.9878 183.58 cv
69.0454 183.58 69.104 183.59 69.1655 183.608 cv
69.2065 183.621 69.2974 183.665 69.436 183.738 cv
69.5776 183.811 69.6743 183.855 69.729 183.871 cv
69.8159 183.895 69.9097 183.908 70.0073 183.908 cv
70.2456 183.908 70.4546 183.815 70.6313 183.631 cv
70.8062 183.445 70.895 183.228 70.895 182.973 cv
70.895 182.788 70.854 182.607 70.7729 182.431 cv
70.7134 182.301 70.646 182.2 70.5718 182.133 cv
70.4702 182.04 70.3345 181.956 70.1577 181.879 cv
69.9819 181.802 69.8032 181.764 69.6187 181.764 cv
69.5083 181.764 li
69.5083 181.657 li
69.6929 181.634 69.8774 181.569 70.0659 181.458 cv
70.2495 181.349 70.3862 181.217 70.4702 181.061 cv
70.5542 180.907 70.5972 180.737 70.5972 180.552 cv
70.5972 180.31 70.521 180.114 70.3706 179.966 cv
70.2183 179.817 70.0308 179.743 69.8052 179.743 cv
69.4429 179.743 69.1382 179.937 68.896 180.325 cv
68.7788 180.271 li
cp
ef
78.9434 384.146 mo
77.7422 384.146 li
77.9141 383.609 78 382.793 78 381.701 cv
78 377.734 li
78 376.616 78.3184 375.786 78.9512 375.246 cv
79.582 374.708 80.2813 374.437 81.0469 374.437 cv
81.875 374.437 82.543 374.723 83.0508 375.291 cv
83.5566 375.862 83.8086 376.609 83.8086 377.53 cv
83.8086 378.538 83.4941 379.414 82.8652 380.153 cv
82.2402 380.895 81.5215 381.264 80.7158 381.264 cv
80.1709 381.264 79.6543 381.092 79.1621 380.744 cv
79.1621 381.665 li
79.1621 382.644 79.0889 383.472 78.9434 384.146 cv
cp
79.1621 379.114 mo
79.1621 379.68 79.3115 380.112 79.6113 380.41 cv
79.9121 380.708 80.293 380.856 80.7588 380.856 cv
81.3057 380.856 81.7637 380.621 82.1318 380.151 cv
82.5 379.678 82.6836 379.056 82.6836 378.284 cv
82.6836 377.305 82.4336 376.527 81.9316 375.956 cv
81.4307 375.385 80.8711 375.099 80.2598 375.099 cv
79.8418 375.099 79.5537 375.229 79.3975 375.488 cv
79.2402 375.749 79.1621 376.172 79.1621 376.757 cv
79.1621 379.114 li
cp
84.625 371.364 mo
84.625 371.069 li
85.3379 371.42 85.9307 371.835 86.4023 372.315 cv
87.0723 372.999 87.5908 373.801 87.9551 374.723 cv
88.3223 375.644 88.5059 376.604 88.5059 377.602 cv
88.5059 379.054 88.1475 380.379 87.4326 381.576 cv
86.7178 382.774 85.7813 383.631 84.625 384.146 cv
84.625 383.887 li
85.2012 383.563 85.6758 383.127 86.0479 382.575 cv
86.4199 382.025 86.6992 381.324 86.877 380.473 cv
87.0586 379.623 87.1504 378.735 87.1504 377.813 cv
87.1504 376.815 87.0703 375.903 86.916 375.078 cv
86.7988 374.43 86.6523 373.914 86.4775 373.522 cv
86.2998 373.133 86.0684 372.759 85.7773 372.399 cv
85.4863 372.037 85.1025 371.694 84.625 371.364 cv
ef
216.1 383.886 mo
216.1 384.146 li
215.391 383.79 214.801 383.373 214.328 382.895 cv
213.652 382.216 213.133 381.415 212.768 380.49 cv
212.4 379.566 212.219 378.609 212.219 377.615 cv
212.219 376.161 212.578 374.836 213.293 373.639 cv
214.012 372.44 214.947 371.585 216.1 371.069 cv
216.1 371.364 li
215.523 371.683 215.051 372.117 214.678 372.671 cv
214.309 373.223 214.031 373.924 213.85 374.774 cv
213.668 375.621 213.576 376.509 213.576 377.431 cv
213.576 378.434 213.652 379.346 213.807 380.167 cv
213.93 380.813 214.078 381.333 214.25 381.724 cv
214.424 382.115 214.656 382.492 214.949 382.852 cv
215.242 383.215 215.625 383.558 216.1 383.886 cv
cp
218.594 376.876 mo
218.594 374.704 li
218.594 374.145 218.574 373.507 218.537 372.787 cv
218.5 372.067 218.453 371.501 218.398 371.088 cv
216.709 370.843 li
216.709 370.772 li
221.33 370.772 li
222.207 370.772 222.906 370.948 223.428 371.296 cv
223.951 371.647 224.314 372.045 224.516 372.492 cv
224.717 372.94 224.816 373.327 224.816 373.647 cv
224.816 374.095 224.717 374.491 224.516 374.841 cv
224.314 375.192 224.049 375.467 223.727 375.674 cv
223.398 375.88 223.068 376.003 222.73 376.041 cv
222.73 376.067 li
223.049 376.195 223.313 376.363 223.523 376.574 cv
223.689 376.739 223.877 376.97 224.088 377.267 cv
224.299 377.565 224.578 377.971 224.924 378.487 cv
225.271 379.003 225.549 379.406 225.762 379.696 cv
225.973 379.987 226.166 380.224 226.344 380.406 cv
226.736 380.8 227.125 380.997 227.51 380.997 cv
227.51 381.067 li
226.289 381.067 li
225.602 381.067 225.061 380.86 224.656 380.448 cv
224.498 380.289 224.34 380.099 224.182 379.883 cv
224.025 379.665 223.775 379.307 223.438 378.81 cv
223.098 378.313 222.811 377.903 222.578 377.58 cv
222.346 377.255 222.162 377.028 222.025 376.89 cv
221.824 376.688 221.641 376.555 221.475 376.485 cv
221.309 376.418 221.064 376.384 220.74 376.384 cv
220.445 376.384 220.213 376.401 220.049 376.435 cv
220.023 376.687 220.008 376.967 220.008 377.277 cv
220.008 378.578 li
220.008 379.127 220.066 379.849 220.184 380.749 cv
221.936 380.997 li
221.936 381.067 li
216.709 381.067 li
216.709 380.997 li
218.361 380.749 li
218.432 380.277 218.488 379.612 218.529 378.753 cv
218.572 377.896 218.594 377.27 218.594 376.876 cv
cp
219.994 373.663 mo
219.994 374.817 li
219.994 375.225 220.008 375.604 220.037 375.955 cv
220.219 375.983 220.482 375.998 220.83 375.998 cv
221.432 375.998 221.916 375.895 222.283 375.688 cv
222.65 375.481 222.914 375.213 223.07 374.882 cv
223.229 374.553 223.307 374.19 223.307 373.797 cv
223.307 373.408 223.23 373.048 223.078 372.72 cv
222.926 372.394 222.73 372.114 222.486 371.887 cv
222.244 371.659 221.977 371.483 221.678 371.358 cv
221.381 371.233 221.088 371.174 220.803 371.174 cv
220.531 371.174 220.316 371.19 220.162 371.229 cv
220.121 371.501 220.082 371.892 220.045 372.397 cv
220.01 372.904 219.994 373.324 219.994 373.663 cv
cp
222.525 377.15 mo
224.053 379.365 li
224.416 379.886 224.742 380.258 225.029 380.481 cv
225.314 380.702 225.652 380.817 226.041 380.822 cv
226.041 380.749 li
225.672 380.642 225.197 380.167 224.613 379.324 cv
223.393 377.565 li
223.127 377.181 222.883 376.89 222.652 376.694 cv
222.422 376.497 222.143 376.365 221.809 376.3 cv
221.779 376.354 li
222.043 376.526 222.291 376.79 222.525 377.15 cv
cp
218.77 371.047 mo
218.77 380.793 li
219.275 380.793 li
219.275 371.047 li
218.77 371.047 li
cp
220.697 370.927 mo
220.697 370.997 li
221.34 371.011 221.877 371.167 222.313 371.465 cv
222.744 371.762 223.061 372.127 223.258 372.56 cv
223.455 372.991 223.553 373.415 223.553 373.838 cv
223.553 374.776 223.145 375.453 222.328 375.871 cv
222.371 375.899 li
222.85 375.777 223.242 375.518 223.555 375.119 cv
223.867 374.721 224.023 374.244 224.023 373.691 cv
224.023 373.26 223.939 372.868 223.771 372.521 cv
223.602 372.17 223.373 371.88 223.084 371.644 cv
222.797 371.409 222.473 371.231 222.117 371.108 cv
221.76 370.987 221.402 370.927 221.039 370.927 cv
220.697 370.927 li
cp
227.889 370.01 mo
228.025 369.688 228.199 369.44 228.404 369.267 cv
228.611 369.091 228.871 369.005 229.182 369.005 cv
229.563 369.005 229.855 369.127 230.059 369.376 cv
230.215 369.562 230.291 369.76 230.291 369.969 cv
230.291 370.317 230.072 370.675 229.637 371.047 cv
229.93 371.162 230.152 371.325 230.301 371.539 cv
230.453 371.753 230.527 372.002 230.527 372.29 cv
230.527 372.703 230.395 373.06 230.133 373.363 cv
229.789 373.756 229.295 373.953 228.646 373.953 cv
228.326 373.953 228.105 373.915 227.99 373.833 cv
227.875 373.754 227.816 373.67 227.816 373.576 cv
227.816 373.509 227.844 373.449 227.898 373.399 cv
227.953 373.346 228.021 373.319 228.098 373.319 cv
228.156 373.319 228.217 373.329 228.275 373.348 cv
228.316 373.36 228.408 373.403 228.547 373.478 cv
228.689 373.55 228.785 373.596 228.84 373.61 cv
228.926 373.634 229.02 373.647 229.117 373.647 cv
229.355 373.647 229.564 373.555 229.742 373.37 cv
229.916 373.185 230.006 372.967 230.006 372.712 cv
230.006 372.528 229.965 372.349 229.885 372.17 cv
229.824 372.04 229.758 371.94 229.682 371.873 cv
229.582 371.778 229.443 371.694 229.27 371.618 cv
229.092 371.541 228.914 371.503 228.729 371.503 cv
228.619 371.503 li
228.619 371.397 li
228.805 371.373 228.988 371.308 229.176 371.198 cv
229.359 371.088 229.496 370.956 229.582 370.799 cv
229.664 370.646 229.707 370.476 229.707 370.291 cv
229.707 370.048 229.633 369.854 229.48 369.705 cv
229.33 369.556 229.143 369.481 228.916 369.481 cv
228.555 369.481 228.248 369.676 228.008 370.065 cv
227.889 370.01 li
cp
231.896 383.464 mo
231.896 383.155 li
232.379 382.996 232.754 382.749 233.021 382.413 cv
233.285 382.077 233.416 381.722 233.416 381.348 cv
233.416 381.258 233.395 381.184 233.354 381.122 cv
233.32 381.081 233.287 381.059 233.256 381.059 cv
233.203 381.059 233.09 381.106 232.916 381.201 cv
232.832 381.242 232.744 381.263 232.65 381.263 cv
232.42 381.263 232.238 381.196 232.102 381.059 cv
231.967 380.923 231.896 380.735 231.896 380.498 cv
231.896 380.267 231.986 380.071 232.162 379.907 cv
232.336 379.742 232.553 379.66 232.805 379.66 cv
233.113 379.66 233.391 379.795 233.629 380.065 cv
233.873 380.335 233.992 380.692 233.992 381.136 cv
233.992 381.618 233.824 382.067 233.49 382.481 cv
233.154 382.897 232.625 383.224 231.896 383.464 cv
ef
236.553 384.146 mo
235.352 384.146 li
235.523 383.608 235.609 382.792 235.609 381.7 cv
235.609 377.733 li
235.609 376.615 235.928 375.784 236.561 375.244 cv
237.191 374.707 237.891 374.435 238.656 374.435 cv
239.484 374.435 240.152 374.721 240.66 375.29 cv
241.166 375.861 241.418 376.606 241.418 377.529 cv
241.418 378.537 241.104 379.413 240.475 380.152 cv
239.85 380.894 239.131 381.263 238.324 381.263 cv
237.779 381.263 237.264 381.09 236.771 380.742 cv
236.771 381.664 li
236.771 382.643 236.697 383.471 236.553 384.146 cv
cp
236.771 379.113 mo
236.771 379.679 236.92 380.111 237.221 380.409 cv
237.521 380.706 237.902 380.854 238.367 380.854 cv
238.914 380.854 239.373 380.62 239.74 380.15 cv
240.109 379.677 240.291 379.055 240.291 378.283 cv
240.291 377.304 240.043 376.526 239.541 375.955 cv
239.039 375.383 238.48 375.098 237.869 375.098 cv
237.451 375.098 237.162 375.228 237.008 375.487 cv
236.85 375.748 236.771 376.171 236.771 376.756 cv
236.771 379.113 li
cp
242.861 382.336 mo
243.098 381.983 243.277 381.649 243.4 381.333 cv
243.523 381.019 243.584 380.733 243.584 380.476 cv
243.584 380.351 243.566 380.255 243.529 380.19 cv
243.492 380.126 243.438 380.092 243.365 380.092 cv
243.205 380.092 243.082 380.219 242.992 380.476 cv
242.904 380.731 242.861 381.09 242.861 381.554 cv
242.861 382.336 li
cp
242.861 383.361 mo
242.861 383.548 242.875 383.67 242.904 383.726 cv
242.934 383.781 242.988 383.807 243.064 383.807 cv
243.211 383.807 243.383 383.714 243.58 383.529 cv
243.777 383.344 243.955 383.099 244.115 382.797 cv
244.178 382.821 li
243.996 383.166 243.783 383.44 243.545 383.642 cv
243.303 383.843 243.072 383.944 242.854 383.944 cv
242.738 383.944 242.652 383.901 242.596 383.817 cv
242.541 383.733 242.516 383.598 242.516 383.416 cv
242.516 381.662 li
242.516 381.188 242.611 380.79 242.803 380.469 cv
242.994 380.146 243.219 379.987 243.471 379.987 cv
243.584 379.987 243.674 380.027 243.736 380.106 cv
243.801 380.186 243.832 380.299 243.832 380.448 cv
243.832 380.649 243.748 380.923 243.582 381.268 cv
243.416 381.611 243.178 382.012 242.861 382.465 cv
242.861 383.361 li
cp
243.832 371.364 mo
243.832 371.069 li
244.545 371.419 245.139 371.834 245.611 372.313 cv
246.281 372.998 246.799 373.799 247.164 374.721 cv
247.531 375.643 247.713 376.603 247.713 377.601 cv
247.713 379.053 247.355 380.378 246.641 381.575 cv
245.926 382.772 244.988 383.63 243.832 384.146 cv
243.832 383.886 li
244.408 383.562 244.885 383.126 245.256 382.574 cv
245.627 382.024 245.906 381.323 246.086 380.471 cv
246.266 379.622 246.357 378.734 246.357 377.812 cv
246.357 376.813 246.277 375.902 246.125 375.076 cv
246.008 374.428 245.859 373.912 245.686 373.521 cv
245.508 373.132 245.275 372.758 244.984 372.397 cv
244.693 372.036 244.311 371.692 243.832 371.364 cv
ef
369.504 383.886 mo
369.504 384.146 li
368.795 383.79 368.205 383.373 367.732 382.895 cv
367.059 382.216 366.537 381.415 366.174 380.49 cv
365.805 379.566 365.623 378.609 365.623 377.615 cv
365.623 376.161 365.982 374.836 366.697 373.639 cv
367.416 372.44 368.352 371.585 369.504 371.069 cv
369.504 371.364 li
368.928 371.683 368.455 372.117 368.082 372.671 cv
367.715 373.223 367.438 373.924 367.256 374.774 cv
367.072 375.621 366.982 376.509 366.982 377.431 cv
366.982 378.434 367.059 379.346 367.211 380.167 cv
367.334 380.813 367.482 381.333 367.656 381.724 cv
367.828 382.115 368.063 382.492 368.354 382.852 cv
368.646 383.215 369.031 383.558 369.504 383.886 cv
cp
372 376.876 mo
372 374.704 li
372 374.145 371.98 373.507 371.941 372.787 cv
371.906 372.067 371.857 371.501 371.803 371.088 cv
370.115 370.843 li
370.115 370.772 li
374.736 370.772 li
375.611 370.772 376.313 370.948 376.832 371.296 cv
377.355 371.647 377.719 372.045 377.92 372.492 cv
378.121 372.94 378.223 373.327 378.223 373.647 cv
378.223 374.095 378.121 374.491 377.92 374.841 cv
377.719 375.192 377.455 375.467 377.131 375.674 cv
376.805 375.88 376.473 376.003 376.135 376.041 cv
376.135 376.067 li
376.453 376.195 376.719 376.363 376.93 376.574 cv
377.096 376.739 377.281 376.97 377.492 377.267 cv
377.703 377.565 377.982 377.971 378.328 378.487 cv
378.676 379.003 378.955 379.406 379.166 379.696 cv
379.377 379.987 379.572 380.224 379.748 380.406 cv
380.143 380.8 380.531 380.997 380.914 380.997 cv
380.914 381.067 li
379.693 381.067 li
379.008 381.067 378.465 380.86 378.063 380.448 cv
377.904 380.289 377.744 380.099 377.586 379.883 cv
377.432 379.665 377.182 379.307 376.844 378.81 cv
376.502 378.313 376.217 377.903 375.984 377.58 cv
375.75 377.255 375.568 377.028 375.432 376.89 cv
375.23 376.688 375.045 376.555 374.881 376.485 cv
374.715 376.418 374.469 376.384 374.145 376.384 cv
373.85 376.384 373.619 376.401 373.453 376.435 cv
373.428 376.687 373.412 376.967 373.412 377.277 cv
373.412 378.578 li
373.412 379.127 373.471 379.849 373.588 380.749 cv
375.342 380.997 li
375.342 381.067 li
370.115 381.067 li
370.115 380.997 li
371.768 380.749 li
371.836 380.277 371.895 379.612 371.936 378.753 cv
371.979 377.896 372 377.27 372 376.876 cv
cp
373.398 373.663 mo
373.398 374.817 li
373.398 375.225 373.412 375.604 373.441 375.955 cv
373.625 375.983 373.889 375.998 374.236 375.998 cv
374.836 375.998 375.32 375.895 375.688 375.688 cv
376.057 375.481 376.32 375.213 376.475 374.882 cv
376.635 374.553 376.711 374.19 376.711 373.797 cv
376.711 373.408 376.637 373.048 376.482 372.72 cv
376.332 372.394 376.135 372.114 375.893 371.887 cv
375.65 371.659 375.381 371.483 375.084 371.358 cv
374.785 371.233 374.492 371.174 374.207 371.174 cv
373.938 371.174 373.723 371.19 373.566 371.229 cv
373.525 371.501 373.488 371.892 373.451 372.397 cv
373.416 372.904 373.398 373.324 373.398 373.663 cv
cp
375.932 377.15 mo
377.457 379.365 li
377.822 379.886 378.148 380.258 378.434 380.481 cv
378.721 380.702 379.059 380.817 379.447 380.822 cv
379.447 380.749 li
379.076 380.642 378.602 380.167 378.02 379.324 cv
376.797 377.565 li
376.533 377.181 376.287 376.89 376.059 376.694 cv
375.826 376.497 375.547 376.365 375.213 376.3 cv
375.184 376.354 li
375.447 376.526 375.695 376.79 375.932 377.15 cv
cp
372.176 371.047 mo
372.176 380.793 li
372.682 380.793 li
372.682 371.047 li
372.176 371.047 li
cp
374.102 370.927 mo
374.102 370.997 li
374.744 371.011 375.283 371.167 375.717 371.465 cv
376.148 371.762 376.467 372.127 376.662 372.56 cv
376.859 372.991 376.957 373.415 376.957 373.838 cv
376.957 374.776 376.551 375.453 375.734 375.871 cv
375.777 375.899 li
376.256 375.777 376.648 375.518 376.959 375.119 cv
377.271 374.721 377.428 374.244 377.428 373.691 cv
377.428 373.26 377.344 372.868 377.176 372.521 cv
377.006 372.17 376.777 371.88 376.49 371.644 cv
376.201 371.409 375.877 371.231 375.523 371.108 cv
375.164 370.987 374.809 370.927 374.445 370.927 cv
374.102 370.927 li
cp
381.295 370.01 mo
381.432 369.688 381.604 369.44 381.811 369.267 cv
382.018 369.091 382.275 369.005 382.586 369.005 cv
382.967 369.005 383.26 369.127 383.465 369.376 cv
383.619 369.562 383.697 369.76 383.697 369.969 cv
383.697 370.317 383.479 370.675 383.041 371.047 cv
383.334 371.162 383.559 371.325 383.707 371.539 cv
383.857 371.753 383.932 372.002 383.932 372.29 cv
383.932 372.703 383.801 373.06 383.539 373.363 cv
383.195 373.756 382.701 373.953 382.051 373.953 cv
381.73 373.953 381.512 373.915 381.396 373.833 cv
381.279 373.754 381.223 373.67 381.223 373.576 cv
381.223 373.509 381.248 373.449 381.305 373.399 cv
381.359 373.346 381.428 373.319 381.502 373.319 cv
381.561 373.319 381.621 373.329 381.682 373.348 cv
381.723 373.36 381.813 373.403 381.951 373.478 cv
382.094 373.55 382.189 373.596 382.244 373.61 cv
382.33 373.634 382.426 373.647 382.523 373.647 cv
382.762 373.647 382.971 373.555 383.146 373.37 cv
383.322 373.185 383.41 372.967 383.41 372.712 cv
383.41 372.528 383.369 372.349 383.289 372.17 cv
383.229 372.04 383.162 371.94 383.086 371.873 cv
382.986 371.778 382.85 371.694 382.676 371.618 cv
382.496 371.541 382.32 371.503 382.135 371.503 cv
382.023 371.503 li
382.023 371.397 li
382.209 371.373 382.395 371.308 382.58 371.198 cv
382.766 371.088 382.902 370.956 382.986 370.799 cv
383.07 370.646 383.113 370.476 383.113 370.291 cv
383.113 370.048 383.037 369.854 382.887 369.705 cv
382.734 369.556 382.547 369.481 382.322 369.481 cv
381.959 369.481 381.654 369.676 381.412 370.065 cv
381.295 370.01 li
cp
385.303 383.464 mo
385.303 383.155 li
385.785 382.996 386.158 382.749 386.426 382.413 cv
386.689 382.077 386.822 381.722 386.822 381.348 cv
386.822 381.258 386.801 381.184 386.76 381.122 cv
386.727 381.081 386.691 381.059 386.66 381.059 cv
386.607 381.059 386.494 381.106 386.322 381.201 cv
386.238 381.242 386.15 381.263 386.057 381.263 cv
385.826 381.263 385.643 381.196 385.508 381.059 cv
385.371 380.923 385.303 380.735 385.303 380.498 cv
385.303 380.267 385.391 380.071 385.566 379.907 cv
385.742 379.742 385.957 379.66 386.209 379.66 cv
386.52 379.66 386.795 379.795 387.035 380.065 cv
387.277 380.335 387.398 380.692 387.398 381.136 cv
387.398 381.618 387.23 382.067 386.896 382.481 cv
386.561 382.897 386.029 383.224 385.303 383.464 cv
ef
389.959 384.146 mo
388.756 384.146 li
388.93 383.608 389.016 382.792 389.016 381.7 cv
389.016 377.733 li
389.016 376.615 389.332 375.784 389.967 375.244 cv
390.598 374.707 391.295 374.435 392.061 374.435 cv
392.889 374.435 393.559 374.721 394.064 375.29 cv
394.572 375.861 394.822 376.606 394.822 377.529 cv
394.822 378.537 394.51 379.413 393.881 380.152 cv
393.254 380.894 392.535 381.263 391.73 381.263 cv
391.186 381.263 390.668 381.09 390.178 380.742 cv
390.178 381.664 li
390.178 382.643 390.104 383.471 389.959 384.146 cv
cp
390.178 379.113 mo
390.178 379.679 390.326 380.111 390.625 380.409 cv
390.926 380.706 391.307 380.854 391.773 380.854 cv
392.32 380.854 392.779 380.62 393.146 380.15 cv
393.516 379.677 393.697 379.055 393.697 378.283 cv
393.697 377.304 393.447 376.526 392.947 375.955 cv
392.445 375.383 391.887 375.098 391.273 375.098 cv
390.855 375.098 390.568 375.228 390.412 375.487 cv
390.254 375.748 390.178 376.171 390.178 376.756 cv
390.178 379.113 li
cp
396.496 381.313 mo
396.73 381.081 396.867 380.944 396.91 380.911 cv
397.018 380.822 397.131 380.752 397.252 380.702 cv
397.375 380.654 397.494 380.63 397.613 380.63 cv
397.816 380.63 397.988 380.687 398.135 380.805 cv
398.279 380.923 398.377 381.093 398.426 381.313 cv
398.668 381.033 398.871 380.848 399.037 380.762 cv
399.205 380.673 399.375 380.63 399.551 380.63 cv
399.723 380.63 399.875 380.673 400.008 380.762 cv
400.139 380.848 400.244 380.992 400.322 381.191 cv
400.371 381.328 400.398 381.542 400.398 381.832 cv
400.398 383.217 li
400.398 383.418 400.414 383.555 400.443 383.632 cv
400.469 383.682 400.512 383.726 400.572 383.764 cv
400.639 383.8 400.742 383.817 400.883 383.817 cv
400.883 383.944 li
399.293 383.944 li
399.293 383.817 li
399.361 383.817 li
399.5 383.817 399.609 383.79 399.686 383.737 cv
399.738 383.699 399.777 383.639 399.801 383.558 cv
399.811 383.517 399.814 383.404 399.814 383.217 cv
399.814 381.832 li
399.814 381.568 399.783 381.383 399.719 381.275 cv
399.627 381.126 399.482 381.05 399.279 381.05 cv
399.158 381.05 399.033 381.081 398.906 381.143 cv
398.781 381.206 398.631 381.321 398.451 381.491 cv
398.445 381.53 li
398.451 381.681 li
398.451 383.217 li
398.451 383.438 398.465 383.574 398.488 383.627 cv
398.512 383.682 398.561 383.726 398.627 383.764 cv
398.695 383.8 398.813 383.817 398.975 383.817 cv
398.975 383.944 li
397.348 383.944 li
397.348 383.817 li
397.525 383.817 397.648 383.795 397.715 383.754 cv
397.783 383.711 397.828 383.649 397.855 383.565 cv
397.865 383.524 397.871 383.409 397.871 383.217 cv
397.871 381.832 li
397.871 381.568 397.832 381.381 397.756 381.266 cv
397.652 381.114 397.51 381.04 397.322 381.04 cv
397.197 381.04 397.07 381.074 396.947 381.143 cv
396.752 381.244 396.602 381.362 396.496 381.491 cv
396.496 383.217 li
396.496 383.428 396.512 383.565 396.541 383.627 cv
396.57 383.692 396.613 383.737 396.672 383.769 cv
396.729 383.803 396.844 383.817 397.02 383.817 cv
397.02 383.944 li
395.428 383.944 li
395.428 383.817 li
395.574 383.817 395.678 383.803 395.738 383.769 cv
395.795 383.737 395.842 383.687 395.869 383.618 cv
395.9 383.551 395.916 383.416 395.916 383.217 cv
395.916 381.986 li
395.916 381.633 395.906 381.402 395.885 381.299 cv
395.867 381.223 395.844 381.17 395.807 381.141 cv
395.771 381.112 395.723 381.096 395.664 381.096 cv
395.598 381.096 395.52 381.114 395.428 381.147 cv
395.375 381.022 li
396.346 380.63 li
396.496 380.63 li
396.496 381.313 li
cp
401.24 371.364 mo
401.24 371.069 li
401.953 371.419 402.547 371.834 403.02 372.313 cv
403.689 372.998 404.207 373.799 404.572 374.721 cv
404.939 375.643 405.121 376.603 405.121 377.601 cv
405.121 379.053 404.764 380.378 404.049 381.575 cv
403.334 382.772 402.398 383.63 401.24 384.146 cv
401.24 383.886 li
401.816 383.562 402.291 383.126 402.664 382.574 cv
403.035 382.024 403.314 381.323 403.494 380.471 cv
403.674 379.622 403.766 378.734 403.766 377.812 cv
403.766 376.813 403.686 375.902 403.533 375.076 cv
403.414 374.428 403.27 373.912 403.094 373.521 cv
402.916 373.132 402.684 372.758 402.393 372.397 cv
402.102 372.036 401.719 371.692 401.24 371.364 cv
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Karel Bilek) ()%%Title: (01-koule.eps)%%CreationDate: 8/20/11 5:26 AM%AI9_DataStream%Gb!iCBj3@)ZKV5hr!-%pApPN6JJf/$'^(lU71kViXo4h%kI9>@dPK]R,HSNO\`\71jjJ7^.]Lpf<$rC&O64>tJ,#TWr@@7O76a00%I\(-L]M/,fTkaV%2mma!d^6rcIS#81-0WPuBo*W']HejbMIYVQii"[5mL<fgaf*[X:(*i5BJN<Zo7L*,b88;AnLs#'TN<1/^0<D.%S>8t#c+N-#rB^1"rn[!:dXI2h:c&!#hnGPfhKrs$rgbkf%6K2f\(:VI^$a9,4J&8PiX>b!fpg5oaFKM0nJ"adC<!MDX7@qAE7'%$%:M5mBX?RUe70r8'hY29ARe?0/=\;6UITGUY:]5L6-d2\e8l/*JT`h#0r5S7>77hrZVN[/kaaR*aP<?mI=*3Horp'7W:A_**<jt"2%FNI6hc2N4/9K?EQMS-k.1*J*q]Ki&qbQki'eZ_7_1Wpf\KK^cYDJtX11E)MKTS6uRiIA66PB=<N:#:4Q=PM52N[C@k_goiRTRXZJ%V`3!8S;hm5bL&0gCI6tX,)%EmbE?5p=?e$<i&p*;Gm+Y:;:,LfH5jPu!Yo-,)R)P@PQ#oYR&3<pT:i_?/W2/_^WNA0eX''Br"AgV%LS'e>s2jPUA=P@8frR,3`XViF376\]<:ZgkW(Y$G@J#QC&*sqO_r;2X1BsUunkAp$5CqGL@knMkpWMe,HM<1#VXG3`O^8rY3BX<8%7e?/tn874okIRF3ceiE\5(M[?_sTA@=5(`fIe!]Mf)'si86`CM+%KSp>u"QD5jLXMJ+boZGZeb-Ir!@,Zef^fbmkrH`1N[GV]Yo]%d:f24chp<QVUCE-;?-Y)*"Dh_n8(WD]nf8E@)W8cnK3MiH95VeL]>KC$a%7<s#t.V5PcB^"?+R`9]Xk6a?[`m4oKg,VttlRD#*8+%4W<sjh`<\7=rONbXPXofRX_3@hY2&(`SMP90E^!ICMEQFD_N(K#-##;L0agRCGL&8NL&h256QVsa7?<qEV)C`L=kD]BT7@`\?h5O%mb.6J`e2jH2=]^M%4"h9^qZPgbUSIVBgDJ1:lIloQUnXP7%$/'[VYYM!-UA&)ijn=i]m?T(t*@+W)BOqn")c39/ZTSD0tPHb'sWq%^&(d07JUm%^`UVdb9o.FmH=BpreDlDhhBY9$f(3ZlV!@cA:4@jX:+s`K(B"H>P#\tBaJ8>mgFTVn>XF6k'8Yf_dG/qJ;QBZQI<1g%)M%ACiB]<S4su*h%;G*3E+9e,?R)`t;.6T4C39Mh,hp0UE/3>T#>L=N7.q1Zs._CQ+A8I3E+Q,N.ogE1>/&?V9)T]0'E-JM+DS81%J&pNV-hUDWPAD=Qr8E-R%u0R5!W%2lDpN&ZYhO0I2)gr1rni7Y!.7/;c3Ll.PMVDn@Jm)LTT&RYrL!OLRKPb_mgQ*IJ$gWP%*1pP%TS'.NlM=Rt0N\.Gp8LEo+ikG`VMo&#qWiVZF[0C.4:l*Yl?r99?7;TBN;n7feaDJ=NqP.c?k..2:[o]rcd16j6d*4k-"p@PGaa,s%eK4@q0`KL#rAP+1B0MlG^AfWZs.?++dXQP6*9ug[Q2`j.9M\m6D*^&j7*I/Cro8#"A,-WRb5VuM3dpo&5M-nSS&Jbrk]d$(lXEoS%Ou+QUrmXB?2/o/Q8$DsliC1>bT)W+Sbjg(D'%j&PqRbXUI<_0Gddc3V.lHq3A5`Hu,`;Wia_9r9-+!F-AN#&;h6R,nOroZgVU6I0%^u;9ehI\&#lt'4Un,*DmJ#r@4U\U_7_qQsHG4Q56lJFaXn(t.r"`J)1EQDpUA%Se;+1uQZTegGW<"@1odBm8/k3l)9BHPCS7[jN?%foHHZ;l\X8Nb&/]Du/G-BME-Q8cQPE!m%S6m'qZI)F>9%Ra:p#,VOt5&nM,n2P5u&K0+=/kE33ne3bms-F<EE2<js!BQ)$h_t[4]%0nsSP8S^:+[pT4tIp`Q\Y(,1*YF\7Gmus?SE'2#mP&k!MJ:;4a<PVAZ#_)#G[@Xa>+W?R$Zo@f]kJ-B^CZ[9mqm0>85NpGmBWJ"\%KYCW-$ZAZ5l`K.C]_1.Q2b%;"l,!rY]l&?!D-.mEm^sJ342?:p9A2[1[a'1418L=FO5-jp>b*69D5%k:F\TL.IaZ)OX[.GORJCqe%Z82B&C\jlHT:dss\CKt]dZQ]_kN9+5`eM/1[[-mPeelCkm=3Fe/Y+b5a(8CY&Bb$Md/g%Pcl_uZe(J:(e[*Q;dWqpsj63]'A;i:/%dm^gRK0Fp1=,<gHO/_:FcT(GrY;68UC:=DL@E3-U/?a."r@ptX"c<6\c?fe"9^UH[CpBGB6+&QPcDZdbXT@F3.=Q/Ih6amMk2,0t%B^BG\I#6i;KN3F'X4nLd]"ROkJGcCqdEM78\9JdL*Ogd:_#bWfs)=beK"jOgF;RaB7Z*+[(hA9h"1,PZK9>H/DZQ!4TTK&f88dIV%ii[r_;qGP7o;9J`l?(Id121n.BZ=`CLa[P,hH`;ag0\SOh54[[pB5CTE@0BT7!PtKZJm`W0ndB2#`F,W']s<P7E\4Pd`jSQ8GD5q%1/F1J[=#,M=B*hu.GYq:I?*%'G(95A6@-I_LDP8\#*WS11^'\H+k8Ppn#8$c)]beqkr\,V7h\:Pee7W%nI8Of@l4!7`U5bY_K'1?%7;05^'h1/rNKYG*qu,V=[dj7h<tbEXcln8u#VXo<Kbm:'o;t7@H%-'bCt>5XDbpuafaSmEmIoBJq\ipAa.\R15kg%PUF"_CL:t2F%?*WL+[jG#iio5t`Z<hbIp6H[`!9:W]Cc(k@GG:uR4S0uJPi=;UG5lGS^8C$iHg%Pjg-]5bW'0c2NnSAFhM/@IG;,W$NJ;>&4.[d]%*<L(3F^O-B'!sI#j?r-Gcrpf?s#!PHXNC]^7D#/[?ITPY;m_YSPgHT3Lhl&[ERLCOc-f8>;&jdY]pJ!5)0=t&WB+4Rmlt^$:[^93%IInj="<UDRFlA8pp$%WFE.r4D`g1\=T0Xo^Z=>OtQ7cG/]n&*+qV-Mt`C^(_1g3st"n1c.UqLfVN5W8jE?M]C7%J:]k"1a\]4W%O%XTeTV\!NM;anp,M!IY[25uWfWVVoSi<*2fj\X4ShBftVWEFD]!V_ajSOVIZ9+N@>iGt1Rn7;"0;oYK7(RDkPlg<jfZ7"Lbl`4"!6%hH":.g+0<lmk<37G>N/D5'!B&]*s&T?j6RNRl=6A_\q<lGNgoVOhtt76ag?HUi&EDfipgkBA:V2O[V>:$.P\,33uVUi+]aei6f'p%i\'.!;jXKD%c-q1q#JV(mK-(HomGE^U_%M6eo7Plr-E%^ctf$b#+_o<C%s129_r[RD$W.*1Jj[(iTABfj"]QnMfBgN2@Une2e;8P%JU\,hS#W3BB?/e8Ns:4XNYP78iWB&BCnM[\m)c:4C'cWBCJ'))NP)n[mNTd_L7SW-p?$1d=3.[]DqKsc(m.!CPeY]aeN2t:S[5FE%4UqC\Mo?uj/`*"]jTNVBg2e2\Z(71u[S^GA2sn?jQT4];,73V!N5!aZBcRWkljBsS-"3_qO+t!$-o[;fqtp'Ybc1t>at^?>>jrp0%/s[L16:/XL5HlCA\(<0u&27_c@,>16+*F'%ou@VA%pds_e857fDDLT&`%GpRlA;l6CY#g:rUHhGcK:Q%DbgI>3g(O"1+pmO/2At!%;kmHDaWj%06C/rZ,,p"6Xm$6N0.Q55_C3%A%-h*a9kSmks,GF!htc:V<MmT;Na0f(g9ZB/>!V,kO84!Hf]iuH2t^q>o7Q'65Gq*S%Ljq>RG:#J[Q_GIU/s`nnOK#u(j7H-pH0_X5D)CdDL5BULm0*3rrTSRRq@iVt'&S3_NY=h]gQ*#?_qls/pD5OAXp&F82$CGgdC=te%qnN$7%t>(ZZ$)$NS&d99E:&^Y:K"\7EQf]mY'(8]m7d@d6i:R9.B:>'AO=A`ha;F3aI;8N>[BQ2%7ctMalp@7^L-:;]<9GEkKP55%'<J>*V"LXY8'^;hQG,Fi)nr@+Smg_cL,%j<ZbK"oYIm0q40\J-oY8:7nS0n:=+RF#VA=>^D58*9gH!uG94B$)^*ZK([lS3.5)>DB%XWEqHWN5ooU/s:V'S[sB>mc]2487C;TK3bF;S?=^oTtIpB&[/F?Ed4R33^+3lY=UQ<0OIebu7n=h64+NL!d,_;m/\s=K2:(?St$J%&5;6s&,bn/LW$_u)Y'X[V,n0u1oiu5#1(C$L1(2%748l`TPTln-4O/b<itIl5CGDTWG?CT"6J?ld5YgoaOC$@Tm\E<:!52-3&SHT%&ESGM6l!@`<3*U(W(<\TlIU9"7ED8X%EAa?X"MU0GqFYDCKp^315nhQS&R$m`ta8YN5n)j:rq_X(tc]J@@HdGiht1CG(I0NMr^Y_%8)N__JR/#n8cSYjA\=B$BQFAa8o(`$Pu1/;r[]oYmQ9LQ$#6d9Y3Ut5^sg.Mjpm1&Le*m/);XOG-1=&J'a.\UKERL74o9)r:[Ce"%<#lJ&A@\mU[Q;1q#W-ngJMa%YO7Y"VLQ+)?X5+U*cYg(o=DiOJDF4JS1U-HXmc@=SBoq/b)C`7?76qRa^T;?Bo!I?L[LtO$#r6_]%1@OL$V9*8DC:8)]hJZ14*),J6A$@,pOu;F_nRs[NiUA(g`Bl#];EhLei6g]N#fdf]DkfR_WSW'EUB,V`B_QR)5pr<*C8!L3kFh[O%k7-r;]L#;A5r0q34S=5bF>/d-FL2,oDuU]#A3Ak9n#Kl<Y$!_FP5&Jsbn3,"%aT;>@XC'2]:%5er0Z;#9B<FCb4eF&I2Fpr#NF^u%6GJeU#)0*m8_?dNY:9c)ggRen\9jC0bWB:E`10@ARcCh*C0LNd^;m3\2Y3GtB(t<FBm*Zi;SGsc;\)R/:@mi/@.[>jMS$Q(IO%.u%p9)#M*R;JT'Ru)_#i"rkOUL%,56neJTMuC]WVQ-kb?Z18@jZH@Zi#1C]FJ';\=`ZbhH0M%S":tAA&W\+?4L&JDg6`M>-3'OpitF%%aFj'IblQJ_:9c[Xglr1b`t)dXEiJ['Zf;E*8d%TY9tWZ>Gg'G/dSC(CV<clNm\i/CJ/JK6bJhg'W#Qkld`&[pi%WWK*G9J%3iG_(%Gh4A\HLae%]2-5R?t,9bdCZs8S.m'+!+KXm#@?s+RSY9!3R1%e+,`k%f\:c0b11A:_:7Bo=5FHH5$iqiTl?F3(l[=Nj4W,/rXO!2%KAS9ojk6_YKe`Hk_JQ=i/@AZ/^XV5g_hAWh,pQ1]_:Mf_mIR3BN&C1*rmk_O$ktb#`:)mI[tZQ..CVVWl0LSFU#')g-`N<M+$N7t%YN%=faCk&<1GASk@ckC2c>eQlAN=u64ii+A8dr[NRQJLKrBO2I,ZSYl-X2k"@]HgPc"<P"\iOb+b[G(L&@E'&^#I`*`Sm`4MgR7I%gjOsgbf7crf\pu=#E;c7!D'>/k&Rm6oUa;^((?-3mpGSZ\(EulO!DF,h;jX=C[gMndeS&!:dHsIFjCCN?`8)(%=c`i69S&.+1!N`%ril..="]fuE\sp0)'G5[)T4!D4k8CM;NMrijiKan`ufb(kN]Y6$f1^.o3(se&un&cq*B2n<\Dd<Cp#5.$mh^YT*2;JQ!e.Mm6Z=&%TS&)/il^F;=P2G;?>*]:97u<$WY5/G<.&JI\f`ZAYQq^3VA4q.ChIY,,%JhMFR2'7h&_ohPKCi[QThr?`&!\Rr^9k&VS8/Z>S426%Ck!KY(C,&Rl8:tt3j);-Q/:oU8kV[MdVeS-\Y!CsB;O)T6LL,V46&lj6b'WZ[AgiQYrA)h@3GFbD'0U'J;1&a?B/a<Tf[UXf.mu[%SY,7*,)iksPP1ILMm<o)@9".oNq:5bLW^c>1Dp#2?bI@bHr!-?nXP$$gfZdD.i0Gd1WtrT"fp\h_YZ\\dMQN;7K/m8*E:>%*r;`1%KiAH00n#3KAeJOZ/ufTt'mC^T4Mm`RH\gEYWn3P$%7GFUcFs;(9sbn7^)fQ5o-YI)E@D\%grWmSDSOAkET7FOp6Yq[aobXJh@&e5%Ls!AJ2^i:0r@Z?<NWPRf5h+8-3AO6MYlZaa'gV8@Ud.s;EW,i']%kt%WB>on8_hW.;L>jeZ?qA=kJ@aPqZ+e*2/(A(g='MTnF2O1%Cu<O^(*Wf@E7f3<1n^$5`4Qf@s1,,QMP![hTXjMgIB'F7:@To;qC!C\U9?I%-jh<01+L6r48\i)G^bjgr4!3U%e^&A5Ku(GfqC&u%kkEE8`M;jM!-PjUZW0_apI]f95;2ZdUI3K.ng#0s&!!W"nLa;#TF7_I*VQ75p:?e-)qC,[-5(\Y+H;XT^E!;udg*Suh1!)\YrdME%amQ_5B*%\KPKp_P6s8Ra`=(hiIU#3Fp./ig'VRQTJ*s':3BA36*;Vu-"A!_uI>Bt!#Vr>QJ$FjBCJQ\;%!m6@'G'(3$!=ks6@^3e%_tVBcJd%.88Ofb@CgR9K+G59DqqCrR#W/T>2RpENAKP>5+FKL]8d8<<[Gh30<2U#r"f@JI@15IAc)EmEJd(hbD*kSS1b`(ZK09":%NZX@n*8l,$+.,fjo!jn?'0j:5@@3<o9aRN$<GQ?5/AUPGd?:n:(O9@,Z:r>XSs=R5FZMOd("dr(eT+tH6qV;sVrmY6d"m0C(.X(!%Trbt'"N6g!I8pk>EX%iYAu5*i2RRr\b+dF1AQUaZ%WkTYhEbGq\2+25VU=%R9&VLq4"P>=iAuf0aX=-&1c[M=?+dl&$6N_o%)2R,%\bm'HHmn:=\i)*PBc<u2(Dm5r(9h@KFn5GmZr_^E?%TCO2$+OfV4478=Wu\LXGY]G9a#TkLttPV=U%YnpMc,SG5pEl*f[t6mHjL`%=>#!F0CD-jrT&qr+TKm5>muX(g#hn%%0l*e`p]X?V&8*mP[^PcDKYhc5@[U8e969pB]Xo:LSltP3\>oBR-@j]jM])`<B&)^4c-;"%&HdLUhPoi+h_`@HHa+A=>nl1pj0f,E!haV^aE':6L,a_hJcJZr=#-(UVa%smhMfM:mVhnfS+4#Dr@O\01-#s_A]h20B4(I#k^06"%.YbEp*?J8$>AZ"KrVh*hCS3JFlMo@-F<[@f+FF_53,DTB98\2P`aQb[3=rfp/<%e>(rJ10.[$G+#9%g1&\'3t'Y%/N#SKX)nLi/q%mU`u%Vp?K&p[j#=(d2(oD'mKU+r,GEDW:ipiX:@)5bV7`NF+e/V'\6'+,dP>YR:jPBk+SAdGdgpq/'cGE91*`94?H,7MU1bT0`l5%)F)m_duP\,D"6<g[S\&MRms_a.4*tjR7tN*)E-I9CI7X5%(LXs`QD8\V`C+bpanZs/0N-@%!QFj>6j>g)ZurtOGir2h%tpU%YVN$%N&9-+A7OPWO13tqkg%0+)3_`@aRK,c<>7*]4Wr;lLEu[]\.R#A(:I(@qYk9BnF7>d_iPi3WY@QA@CjQarp(g6Slt*51TZ$Dq"O8<%s2F=0n0@O.;S^BV$?=:p_1b"P$[H^J*g7KVZ2FM6h(G%Ko2e),oS*"u_:4)_G3[-Do1$1)7..cbQ%@6L6Fl^:ju&;-ompu_7QZk0%2/bFPqD^L69[A"u8'E+Q2Rk]!=]sqJ1;oGi'pbO'1U$Vjn@CmX>+qYkp=VE4c#`J=7E;U/!RhrL4Qkd!/YP>Sij_lK44uY!:+f$]%E=QOLju'aemg^of?2gA8AWVPmDE2oioO3Q=(a6@eCid9:)JpNOG3\/J0o&<<lFIq4'0sGP'+-a'mAU`7"KZJH%qFYDCH;;n9BN1d%bBmd;pJ`KB-8Z*TJF+o1O!3&#cMibFZF]i9?BrS,Y>FiI1+5L\H$*.?m=j#WXCAg0R2\e3'NZ&l61T^pP[6Oi7^44<["-C@9h0,U%rj4>O\Dr0%0)ZJ\(Chd30a502M[FC6YtBs^o$?"Ti+tl]\6llG.Ak7(MPQ*%b9\RHABL/5Ws-=RH#udnqEerCPFgQtVmc)`VbcPd%^R3a/9:-]W;_EPXBCGB[nDF^e6=4$:WBtS$8'7]IIeoJACAT#_88cToK-rtW4c/dk2YLSQicd^(__rW;qGCZ,.;'Zoh0l0Q)kY[T%_hiV6fWK;MW/W7W/l/na\Vg^_H;M@-(Z#XSV&*nA<.);/^6R]QPBi27jrR-c`ZS`I8eha/*r:I7Ogi8ClLZ!(j=J_XE^CkZQA6(G%_V%LIT'%".WMak<=aIto^!Zj)VJJI#%So4p?I@e5q'GWpZ6EiiI_LBHh?2H'_bO!1(\R1OGtr+8hmGnUj->o_K0P35GU,d1&*S38%Ls]XH:(&!0Bd,e:VV\WCe$",W+FSEgjCKmkMsFj=.8&cuW-akQ\(gmbluJ^H;Y'c=BUD+^prZkX>BG<:D+bQVs641FBBKANGEdL2%!Z,^=leeA&W-;')]=2CkUj!\c1BDZK^HB07+ocFTD!i:<KECoMD_M!G"5Wt!n^XP4>U.l].mEXp[MQ3=KQBlUV#jP/%q91;CMjrK%6(p\rb'W61rcVR=9IMDjf*hl_o2/jF)!g,mILWKpio;G7WTJ(h&ufqnGR_E9G(?ND6*We2#KG&0mMk\*:f0R*a'E4qY<]VCkK1N"%Hn>WEIH2h_-LU;i;BV)tI13_>_h;[qnl'u[AqSaT:ib:,feoj#FC'>VT3gkaM_@V+ceF3+%)*4dO*QZhD/&\$Q$%p"hET/>>]UtC%Jhb:&F-i5e)pR)Fl9$I*Y!/J#bjnj/ZOR#fp7&4!2=CTQ<'1I%$cr>-/%f..j'ZP?l1dj?kds%_-I%$-X>LR3Y9tK=Z/8k)=_&fJ%BBd*f_F_5N>rXE@duHIWP"2KHWBI7.QLqfE\To[4?B;Pchm"3o;/.'*MQSs%]nJ?4M_8;H`D1='g&8?&3Leht,U;Q;(^loJUA)2q%%ImdiL""KG]Ag1<P]j=B20KS#;5![FDGH'2'sa7*Wr^AF`@*V_N[Q?ug$N:[<92$2&?C<EH;$&/(8GJWg$f(tDmS6<jhnS@.US3%%f8Lu=W9h6p5'kPY%e@InG%1?ZZe_NW64cX4op<8r9JBm1@-Xn[i']Q=1;7oQmXs,?Gu6OQ:@HR_:-MSa(*AIrgs.Y.(TS=7VXBN"%j_ue)jj("A747c#!VC_CH1()M.t<:`%i2GWoCImp@e/M.N[5F7f0SVnY7&leAMEK4\Z]m0;f:uegu#QS$UT/9likCK&@9PqX@r'h%5ppGXeE'-nlET1soYDPESD\LgQHeL2L,b`c5hW/2I:TP=Y4AE4l@*Q0pD%)@b**Z6&N*e)CCVp7<g*=T<p@0=>ij6e2k`YN5RnTk%V[]HeKd:hUEl6%"X1VN-_^H9V")DMgT^%`sXShUU)h:F]498L*rj^YD9EG#@iXO*)^bHft/`Q%'@0+LA&`J0p>(2$8L$^JQ.GaXQ%Zbe,8Rm.FCKZ#QnWJ0%&D!pljn12+p0L!`eV.t@Rp+GgdjVkf*a:uT)3J3Lq%dQ$YaLS3mplTeM(E4aG,)Bqq4%`aYF6Crp#:p_J%oeKGtr5VWqL;@gMMN91SIL;l7ps>@!*gCH,?moWH@d8(Uc%"$QqaT5p<//6T6V?B]/iSgZT.F:\)sVeY:0nNtCX+!t`ODE'5iO/Z%)di]HS*<'p5'26.E3b#,eY?%>1:gC:jQ.e1hG:u:cV6ZY5D5"(g<%Wun(WnIi9Q'4L^K9X*-H5uD.2$imu$?DO&)or_,c^nMTS<*%XLQ_%=V!g;ptq[;*O<frU5dpZipf4UTH-egj:7Acfg!E8InkA`+"K6S]XP:%YB'&Ie/?H-r6$fGaUjDIY&p'Fjbn>h/:NcO;;FAN%KHFC[ZXW:s+?Kn6!RiY3<l,*>HagPD\(]W%7r6t=QS7qRnsT30n%>m4(S<qcKnH"2aXUO67qdjY8eVIC=oG<46R$n\E=6V,o@%19%po,Ao];*'^3;B#j,?jS;4-sZY'lE":$2UrJH[e*[a't@d'<S(Rl#V2XIXRZ;*\/:SO*:&BSg#Z,e=.!]2Tt252/D<L6uo@'Q:fq_%Y.Y2*L@+_LD#a;0GQHe[o8Q'M<qFOY0i4#R`F,lj:&]DJ](Rb0SMi:P)fUVO9:^7Y+bFuhhjD8<7,ul<E')(h'S>Ms0jYhWVhBnl%hqbmq7f0.p"CJQ!1?o/):-U]63/\]8%G4M6\2[+'ZBTe[ju^,[>.''.hV[c5,oG+(cF6E:]A>oPFYikFVFmJSE_.>F9@('h=5X9/%m`ap:!W85R[WGRGb\@!%?S"hTpXnPX*]#*sTt=.uaIhXI6CsYV"];oPGA[$a"dB\U/Tp2[+>ioI*4dCbL((H*Y1KC,^(<'SIA#Hb%b^rWCo9+RG:NgfSgfrF8;egjS>Uu(tm<cj9>uCOSi\]p.8`J]X[9O^<,jd"RU$AP&qqL!8mA,ZI/\]6BnRJP>\ANq5]Y,ip=IdJM%G7u`MK?AO$G@%f&eS^u,9&%#K$1(Z:YjNJbo@\;lQ7iD7cX6;LGYdGW@X7`h>C:aH$C'OG2uBBm)pW"k>krK,(PbMI1j[H?4C^up%!RN^F7kOB-VCAi):b(p5l=4*NoN9'NWQ=Ne'BI'\Wo<lKQ_t5i^r%cAMU#"[$7:M_iTXm/%^,Ft8X@C.g0..B+.k%##*+P?c];H%%kh)4M;UsBX8:EY\\&%KR;f6\]0$`m;\Vj>Y-iXp1HM[(4X]Wbo=KI=n08Ik]$aa+-[*VH19q#4d^s[-%0RpMPSVJG^ZU_u@l8'MG%-YI8#4e<ENi*Sp/YM1KU'g%7=bWTI`D[a+!Sn>A8kLskL6&%P8SE5ZIEodZT`EU;?lL$oab/F!,KTABOXmQE,WSIqh-kJK8g'^;D%n)Zh4UCWDlhi`QC4P^Fa:Mu)A"EhRXWVsF_7aD;HO`PE_9M]&8`@l0o?Otf%`(H[`^@1U&&8[6sVc<>c=7CnjPCrgW/j;H^cIV(@%JQ1I;8X;m@gi[?%GY](CbBK<7rS2jW#/>&S?t"]NYsKX\!Vkr3dr`]bP&+D6ie4/);gg]pA>Y]D,^r.X\0dVu5-h.eSm=.uUTY]<%]0g)PB0+\e'/eSJf[;m*:^QLHM;r_-IO.okWPV4kR8<Ua14Zk&MIrZFPGaVbF*j\tnX3/p4XY*/4pOl7Ke6t\UdDgs$/$QZ$\Tm+%3]+*3g7TOu/LDLgOb06>BW&K4PCs$9rZg4P]dqb\jmI#c1)2sW7ClLe6Dt\70-[<;F/@$G2amtI_KMm*biP@V^/C6`q^W[950g.$%XX(3a8+#B>/V,!.>CqI6Z+Fcp0:S@=\elmc@_6/WdlZLK-g(1<ToCV+C@Zr15:OMN.5tF<V<>Ot,>ru0[PcNrlC:Pp[O0<^Tkan/%jc2%M'j+\9e(bW&KX;(#)a2u9m,tsh'qXiN3tj]OPPH^LMM)K^T'VP:A[uoU,=Tc-[&Ut)od"%.Pe2::b"pOqgR2rEVjYn5lFL\b%'O96^I"(?7=(-Fl!jjb=R0HQQl*q<n8>?RR4YK;9`GFH8OG[OTa?%qaR(lR]hBg#SUdDEeF\Rs`*l#jpRGMSUqEp+K6g>%R\#MYk%nSA#,^hBi@:SO&e,LYr19-NJKoH?OYe%I2"MKm?3i*,-Ff'UFh[Rcl@LD`UXViTBg]H'nGq727^FhN,Pfb/P1^--DK\%@eTdd&qW%E^Y4R8Q>s3W@qd<f,AcpB!Vt<%jT]P2m55GUc4(rW#\d_aU%:W95\q55i>.mH9/ZsfHWOBHiL`1mR:uT50]8R(b)aDMf\i7`--$h%OHul4o:J0mUhAB%j<6H6=HES"N4/AH&0(s,<<G1X<1P.KD9XPBTfJXeD]Ulk1q"M`BA8iqoDJIhUp@V=5I&N,20oj6OFG;KMl#+#%:/6(nPhA2*=3X:"PNhu72F<kZOTH:e6.D*La).LY8@-bK<VSP:$.?_1.;g;I+BLb],tOY?l!kBP,?M-DFoN;_!8>qs._MJh@X[DQ%OI#'1Um(dd6p[8*:RYp"]ul+Rp+TD<n>]g88.cUmfBn>BhgT5]UsoHs:Z\.LgY)B7+Cu=qo-Dp/?H#7tT)I-N"?QAHWr@6Zqg@6-%lqp96Z'iMYh#k5GD/@riKbZ#V"/1+HLn<=7QtdQa]Q0*'cPP5GX84PO9pshdiC#eTWq)IRg?MaP1Pn<*([^*Dg'M<9DG'(%:M6*L%dIHq[rb7@<nqHA6(dE4h0"d]d&*CJ6:MXm.[!8.GI4CfEe#F^*i\hLO;aG7P'8oY?SZC=/l+l9B?MM+9GE]EseL4JE7rO!CIbs&N%CAanN>X$k+4irsRpEOLmrorYN=QIfm9.B#mr:]`OSYd6ZVr'_6`)fa?IsUk=&2%,mnu`G@StZ`6G;$]/noLqu6^t!U>@r@8/s`%V%f"4'scaM,Fp2@]C:ER3@7pEDt6T=2alYteSd-g./ZN"t5$aJCVE#:`6/j<q=7q_#\DtJ-;#u,Fnhp]BiDUJ1Br&#LTL@t\Ppuqk!%i;%gIR_=QdoX>@NOhJ"8nVsf:3fpDY:TV5Pghmh5cqLeSc&@cR+Blt8JU$_E-4mq@L:HfNHPm)R7-<^B#)YVQJOJl/I%f:JOh>kA%5PfuZ1p\$kN]D5+%<is8]q+1k#=h@(HQ(W*<.DY'!=s+L"Q<+uX>_M2bjKp)T`dHnOjO:RCpQ\2++KJ^V]EGF1>7.$=t]C0N-),u%S8^kgQ1Mk\"&`PHU8/s%H-t$.OPW.4+KYckB;Cg8jA&(b,4EC!<iU';#kLP$Bk:[!n<4G5f*iS>H_.o)+RSU`D!OUm94i-cWhZs5%(ie<_*[u;WkDXM`r(`ZUdYns^%Lu#QRY9=em=_k.L_P-p'e8T1=6u&/,";LPPnSH'3`=sCR-/e&@p)em%_`-:O+1(DicO&MeF.4c%B9@UtSm,k)!>#,Uo9ZYB6!L!BCYJ@Pps:4rn9-o6bE&NuK_s`;!qQAO0O[r'C(al6])WbA`0DF"PTbI-o0YLZ(V_ZH;e$'^j6f9#%)0bBj%g,Oe%`[JqV)<#kkjtd7?87+^Chj<NQ8Fqkm=Fdi'^9<1Z]$rM"GErO%Lu)S_[k+Q]"b?mZ4*9C4$RHrA\)(5!esAho:Z`p%JXF7fBIG)edq2F8*OOM"JUds9=0<J2k74e&o-hV6ji)LA;p1gb6V@$\drG;<d$*O+0GL'XTJOMqd9M+6SETagKeXp`RGT/nX4tnF%(Ga8Is(L4(m8d%j5PFUCnmpGM`D71s61GNGZ,ITtBJWM0@X2=q8ok8Z=c$65^oj5rh&#XtmQ.VO\)!Z\YFMH\Pt!JQB8u+UE4<Ck%jdkV,dQ)Sib.";:FSE<XbG'=Ni^9d3.6SHd7KhH3c)Sf#>.PWu-+`_*X_8hZHNI5_4,QsK/!ZsOZ^L-(Y\oMs*tQAelN6HG."\VT%WGQ:IN&XRl%;'AJQ)80%@YE6lgWN1%6Y+8P+B5Q;Ei%+)aCD)M7<\1%m+(<*Hu(\S9.&_m@7lU"Ue/I;@VFbBFEi&Nm&M(ll(IVB%K?9kLPCH)i[rhE%a\&1@9G9@(Em+\h+o1$sQoujZ3`?O^TZrFsEnB$Fs*0VeGH&KMga[*1*7clOMN].)>1#]a[V3!OG0>_)-1c__%+,UiP8Sf@&BPj<eNkCMN(rc2#j2.=Vrc&bmo>BYXj^\0Z`q*UX0?h!QVS/dX0556*&pX:gii6e-Wh'Rg`u;R$#K*pmB/K-f[pmpg%#.*@uXgl)PdX63+a^4[LnEk`fZ-`DH98=d2\_'N&4<@`g_"Y,$1o.2sqd*@NdA9d+m)se.e`Slni%gYEqta#D;oPc,]FM16DQDh^%/ml[MY[qg0gUKq(iY\$rc`]N(h5f91`QXco9o>>rg<(+.10Y*\1&9S9KK4"R,#KekmN(V'`HcnhT%Upmc!bR)mIf+Ye^;)(KbbYE%HXEI]NPsG1b4dCW1sacS#aEGKmc$ja%RW9oPXp1El?Ej:J2W:'\Nl]Xj4e>f_-nr$;dCh3abtpcEXVCg"!O8!m80*_!A=P[qNemj%aYL,&#GT5Zi(6@R9iV,cKj-,U-X3$CMVE6-j>DoUaY/UPm;R'R)?P\i`Y$n_XfS0Z*!?D]YV!m=q*HS@lB_iCj"Z2-I3*5r!PnVV%<fQhokBE:W5B/']cQghq1Yl.%Pg;%/o#=oVo/-E=2oAT;OEZG$"0jNI\PB&ir:>_jUUTYRn>C4#$5R8\7GKWa;5,=(/:J%;NK#FJ%Fan!8E2:P<j10rDH[0f!fIGfS)%sD`!r0l'pX(tsmgC!G2OHsjJn76QLQq/1m_>fm]R$"L5_QhJ2j!122aYOmB)*8-NULAW2uU>X%KcG+G?70hWpQ20A/]lGG62?<-8f1((?n<sp<H93Wq&5od;ng8qaTfFmau#JkBll2"1:tslX"/$6^+\Q`R9%l]ID5YQg8Y&g)3=B\%e1shP7([H`C^+$`/@L]b9V65g?><L[p^98]T*OjaZ=!F^Cc$K`'k0="aQLk522flZPl_fS!/nhQrJiT"a[4mZWH7Q?&Tu%Bm#^AQ%&qA,Al6>2Sq>:H@lF,q0GOA@Ak%%<*C[Y&ljEna!kCm2=YPBXN/EK<,#`lOZ>7iQ(?(G69H7V-bP?7:S\X5Ls*oCutk!3s@dHGr:%(s^hJLnQq7F7og/]F(/Dm@GKX[fL*t+^E-FRe?uk7;`U;+XLmXe.)T;8%'8)?RK1,=Ih?uSG2fKS;>omO/+VBT>$CmI'.1jW/X9Y%>$[m`AOo'E2PAHp?e4%JmiK+N0]u.PeQ."O5siASof],QKF#i)F_1Tq:8@bSp9.NKBQgoo$tk!JG.!aO<t+92EU,/Kok%8SbW\52%bgr1r_(q6b"DujR[.dEShbk?7/d/rp;9PXcY6Q.3S@Q5EFpt1[Doon;g*p/V"2C:n"^nAZ=Y0H1CA)PXqWS6c0Yd#SE5']Q%LP7;%&G)c-QGTmfE\!+Rk+]^qqZm=Z@d==Qm^t3,j"*3N0"L@e!X?)Bf$DSV`g,>5fc&_Kj56>no^N1@_Y#*:'O`RJ@%&-@D@HW6QgiDM%(7HET!4I'rV#W$q$a+EeDH9PIfikYMFo6S"'ZCijA]8QRr-LLR^<fb;SueWt/Q=T$C[6XV`u8,t+Z^5Wf5745A`<"!YDsj$g#(N:%6JYZ\%o;H10H>KA(tZ*(3,0W`Q:gn1"UZ$2Ga'73>u`6S0M_c7_:&Qar3EDUX0+<YC`)`SP!iM87RX^,jkO_I'LVu`a/33&%U+>W%EB<EIm"L[CZ3Tp*(oF*g=h8Z299/gY8&NiJ\cc^W-eFmKrB'=JH7)U:&2&dWo=&)pZ'!W_DZp.6@l5imF]iGQ"p(3=B&]X$o9)mm%g)2TJ,iW@`nQT(&%PC3oR;t<8$QO^mW%'olnh;K$['5I-Bbjjn!U1'r3>?@`chM@Cn3p.^`'6GTW%tLs84\RR]*^T+BJVMfmM0gO%'goa;Tl[E1,LPiR20A7$FDfW\X45M,=4!A9"b0lHk?^I;$Z2bqcFnhT;D%\0)ERU"3aZPV20A7$FSKsu#&<AWqr-h<%Fib8=3qhk%E9l$#\Q@-,rn-c[3qIo5k6eQ#S[\!4#2Zm'./U@!OIS)>NLe1sKA6:jY_RNRK@dTpakFb[OqXPG1VH&O`[YWCSbMmt]?VeK<he&P%Q-J;[Z`(oRYaC1kMKt9/"^$0>q-aeWH0(Rjq'DBLMeAbg2KP/pagpt^8K,fa8;ed8-p,"Ld@<.$Eu-ck[HVMRC'@Qe*!ILkmrTE-%\[7d<3HB;m[[:a9WO]V.g8UR<`GXh%OK0Z3<Vs(>``Og9Zer3r7S-72h0sJ\`2kPA0J<76`mAgA(kP"eeI9CaY6`@"":J\i9$FqX%;msX*2O0=EF]N;Df):DW+mATe^1"OUTOl.fe!3O!Pr_+4-&g#Wqm,$a[_X&lVTtJT%V(E2P&A7AJEV2=<aV#2@D?(_(d>"Y=9nOR%F*B!4WT/("FFiUrG28&9$"N"`.m7V.>afgi4$7['P)Ci-Q[soX3M1lSQHmtUah_P$i)cl;)nLN7@!dSg^83\AcHK[riDkCcLR[6R%IHSMY11_2.Aui3a`?(@6/Ls]BGq3Fe8LbYG[hLVGI`9FG6)WDPeDcPf14XVQ/hLI17,9S9ku'0IeJ:m[FG8aWq05Jp+%rDVFr9i_%`;$tJHOHfYQXJ.u)\GdCDJNl*&?$#\2JOs9YPLjQd)9$9pWF:Tg_k*lH(7O_QHT8JE]@tl>1h\o(l%K//0fq>k>HI&jGET<'5r=F%o/(;3c$na$ZDq#)1#uO(UK74"=%QUIKM&8BjB<[=UNN(WU?kq==8j$F.HE@'U%r2YFIIosMQ;)lh6(\<TY/^p\r1'1!O]ei'+6@l%N,ou%V&gM>Z`TISE>]D$RMBnEYk+0C=`uj^6W'AsOK@@-32DV5QAc4kPfHF+3\MA=6b9_6r[G6b%iH7%O)IVBn9qrE7`Ki-!+">b%IqgkZ)?"Z4pG0,+1GUl=K(@6+%gX-+C7ujEGP-6^A7Q\Nr.m&M:>1%Gc2lW)SiGEX.>dD=U!PoM*a!l/gl&L$Y&0m[naMEZ5;D(B%clcK$g1HL/G\VCLB?_4F9,ZH4AG&<1(AfkiGriO@[!^)<FMXq[E*6K&C1eE$:T2jWT%A%eX4(pUCSgOk"!Y7bcM8\b7S`Z#<"C[$%mokaR6X/4A6l%M!^89`]gdF:F3=iGA/\ZBkgi'nk[X(*,r@-r)f>F_56Ig-?gl`>N)le\23dGQK>ZMAJqaF?%o7=ZYLU3S,;RcZa%>7YB<h,+;k_t@si^(RZ$H8rgR(m"<+\/rpB(3A-Z6(*tpDU;PO`QITWjS;KFjV,PW^87/POUJ'4IOG"ol^-3J-04SAjAIsT-\FSN%n00iXi-CU8B`8j'ZYkacJ[-+OgRj%(Y0jCW'4TPacALu#MP89q*\(T>0>oROTm$<oIAPOb.\b4#^@`Lm("fq#j>c?X7klPXhYj1=%eDcGi]f.'gGN4[1%2d!&'16]c.u(Bb(`K)u&?bi2)Zn'*5Mc<S>)pY)&MWf(AsRiSbm8(CCQ3"^0hVua[4QNth#_=Y7I&,E.T.@<%2HZ(K^c#8VqY7CJMH"n[haBnJC[386%`MX@._o1[D]7o[4FL4?l"FnNVc>6F]mg7?(_YSqlb`e`o$Pre%iM&olD2>f"Yi]+QRmg!%]TuG&kGZEZ=pg&_Z)&gob`hrn.@ekuCpk$qXh:Ln;Rk9:b28N%=h[2o1AOF4iG>h-)_Zndb)^h,cbP!U;$E9S-bC'VR1Diip-j5,%5BaN@&#u=T1GsUIrp;u^$"O1_r#tVgI$jWWr/osg2AaTfk_3Qidh[ted03M2[ud@@@e!:MC`/C+N\G!6D9RWq!BMU;`n@Z(lMBHI%1<$_X2mIU7^2@O]Z[BGCH/=&(^FXi]^/,uF3kd%\pPt`^_cZMNJ+OWmi3u;\HL;Qk[u]W'Z[8oV,X*AHpDWVEf/CTcVh`8q/6&j+%G7rG8\*`LnL,"*f.KMV%(EW"7MVW.jX3T):I'cP#*PPS/!NE;_0%GDk.X##o@5hehOeQX!*Kd'h[GRNiYp/<;4%lh_K4bT`bp?cm%WbDpA[FbpoO?%9[Yi?o['m<gC<mhR/<Nb^H*0?olpd3bMn^XVkmDZ3[/LWS'Xdj=elUVi[isVFN:KgLa03lSF>.\rG$@8dQ\gj1N%2+To5T`1hDAiGe=V`aW^$^@J0OV_e/l8>$UH%6`)O(K]oFMaR:33+:(7nL<N#.<B4k'lQW>H7u:AE>&u4ee[+"&@]FHhK$ueQD"_%0DA8!0:]Rn*`QRiGuFBX*a83IZ('h@mZFjSVTN($afUqa>PRF8YH&g:^(@^546#CDIBJpX/NMFlThFGdkN?gQS&_kH98BnHXoZj:%pMcAFoI[K.h]M#e?:N,PQZ%*'e_:7Lb;-c3=4@++&$oFsSR!5.BAkaK9kRO#BE*CIFfO]mEe64?Z=Ytb>qOkNQ&dG3@lp9hs)g2i%Ke1g/l4$bBfn!?'KohS#l0O"JD\dV`C-&tT)M>0I:c4eL/Y-HcA-:A(G'OkpGMtGW9kTf.f;$ql<R\L+kA#Y"FEY'6k-LhPW2?mW%g3E9L>"rWg,jUeVf<;'X><cJ.-25nV24`S"fq*q%X.!o<eC$F4Io/r'ls"A5RVjF/rOSG8&JY)-g8:q8IS6rrWp/jo/DnIJl0JE.%g?OYue(FckD7l=_DRX08%/ei0FEY'6f'%8TC-&ut1%W]3-E?=sC?_hnAc6@)4(=RpbM#KESVKh?%91g0e^D"`a1$KtGSi&.DuaR^%?gN2tMrCp+/7>0`c.sAr$D0Fr$fYH.qS##&+h;n8^UgVoe[t<?Vkl?,R[@'LP-n'_aFe!]N<P1q]g0E=lIgV_MaR'2$9[,s[h:pY%%>gVC3:]mAn!-Xk#:\FbN!l2&?DZ7Qa^pKgD"aI8O3K#fk*WPLB$Of'S1hHXTk;RKRQL+bY.V=+X']r2XC7,PljnHVk0Bfdb?H-\%Vf.1!T2/K?\m'5Ba)dp+]#?6BY.=.e;*81`\f\tOU<>uL?>>`4DV*[C[;W+9"*VlqZ%lDcD7_g3oUW%&D.@](LZrkU`NRIG.)FE]%iO*HH`\gP)0n;KrZ_R5JFA&be=O*NrjZNPI$L*kJrUkH90Q]LsiO(-E&OtEo+gRPHlHdVp?>eE43c_KsW:B7gkj6%njg<otb12Zi%\5:"f)QL?Ydnn:`Sq_!+4:S^Z?utA_X7.^?I#P/?'nW,=ILb-L=q/dG9V*\*_Jn(k5RbW+]:CF*Q_3W]^m5ef]%k)=/ZdJd;/D>a%m`rPYQ1k2W5Qn/B>KOd(pA#:S`m`%KKC*\)j_$5]+f0tk?<s',jK1kP-`E``H:cSK8DN_Dp!l[;]?<oo)nWotfuf:SCgN/B$Q3!-%rTTZHMh[O!5%^PT\eBe:Y8%"O[i3.eXe+##*ijuj'`W>WepA$2]SOTP+RXpl/+2mNh^c97aKYQJZnfUq(p8#!SR,Z;J&gBK`,O[i%]AMLM]uge.0&AS%j),NqO2]b+DTZ0-5+Z]8gIPV5diEW_ccYt1h@"Ht?7q[Oq1cL-pV"Q_F'-V(\F]PsF*'ra,DBFGE=M*peU(_A%C[5P'/Zd9F@;Te\D4<<M&;6K%+#d"uqtOZ&h7i/uXpCOtZWVJ/L]BCR.',j6e:UNaZ.O(VcJO=3*j%/E'@O.El"6dgFrQ8ZRs.;.%,7,;D]NmV&A[qKZq84s72o%cme'#ZBCRM<WdP@\RMD/sW]4"tb"8CQX%q?KQo%$a.g.N%,bJY%*s$!SRKq;V/R'\r/(DR`_o\*G&%YN-O`MU\HR1+#eW@3M&C3/.]3+h>OWG]XA_*$%ComUF]bfDP#kj-L[#^KF@Hd-b!J[NmEp\mn)UB"au0QO.1*au29U)]r\Nr5R10%"kU?if>$aY4iJbo;q:J[NHXL]Kdf[FZWiEi0"k5ar0";%Vj<bD$BrRT*?leUQ\XRk03#S;hd%#d99X1p.U4#2o#XY#OAFER1!\o`%2*@R`H$Dr)a`7pHeTgRk<tFI%U#NEaQ](:Wdg[NPRHia?REh4!&K^ra%IF<g7\+?JfQ+.nRr4M'.7^15q(dG;LX[+apTPO9`2lL:%h6+:]a9JI&.^@)P*Ldsf(Y4N4\D*'j`hE*E/*pB,2OV>.[RGF+0hgN=bdZQV3D16]j`WfY9HW%>s1T@L%b=h\2nHYD7(Q=cI<;$A%p?[m@pV'4skI6HSVFm`s'aLO4eT?)1($R_JC9Ye6=>Z9Di89bCbk/d;g\8lNp/B7?X108;Sfi'9#3i%Qagtm?FK0psSduV)IWE[H%BC2dkgTej;q7<*X(:0QofCNKi[eZV1hH+)IA4W4`P((%RM,ZaM$u2W60M[<r8<7WOB[oJtnR.VB#O<OseC_/M61_=&FuQ`i'N[A"%j\c(jrUT%<X4!<)crA<,HK(ibKfOX0[\pXXOj.H)1:*j;]Qbd7pJY6TTBoSckaX#,;-mMQBk>D2(=1!heQ$XsY^(X52r'a6?chD(%>s4OeDI:!9@.AI$2Y,D.&mG5C<?jYn2R(@,;gVb65PA@9^ip`+c0_s@=8]5o0/Lf&Z_O?kI"W9c!.(a`>8jml@*Y[W]]@*aLIU"A%aBCIUg8_d2frKjA1\4>[a<&dG*g=EOa"qdI2o3]1FXCRg3.L;;/nKeek'!j8r\B/k!'t2l<u7t;Lgq^eXgf4geI'Eog%%4'4;X/D%>JG6PYO9Oj<m.!l;`7YsdUN0umXELP3sQh>ET<,rc7,km$>A#b[\]L[mp%l>!j8q[VE0XkrThDAR,L)?Z28;;96hA@\[p>qf[@rm%=/"9pqgH+QP1_,"fM,8&Es/pJ0"gBglLOM8.R:0pJCYCi^F0Zb&:1?`eSkSp[-ZFD%3SjQhcBh^f?^E#cu;>E(KH"R2&m#$@_\uG%['5EtKXl=;enKih\P\Dam'fuFVBp5]!F2S.E[8[d2sM8ijBkje3Y0?&/$\GBP4:*Ib2PRdHn!rF2mWDY;Ej\h=o[!JI!/YHc!SW&%r'n+h>foQGjPA)-ami7m]T]kZ%=#XtPg:ri\+r\m>jk2>fVNt%n#p!V;Ee#[!=c'S4ZX#:m)i7@Yf!SlS+nlU]%:jFQ!>:*2Um'I%qO+6n/St:&Bj9>=rS4_G2DnOM]%>9FQ'PYQIf!t1lb.c8=WtgVI)UI2**,V@e^*L7:oiI=kD>DS^=U^0A;DCM[FW$?*\+]YE3C@_%jDmlUCA)5`Hi;`t[Wm;`n*]ji^X_dS2h9Q9lfUGTq\-!1hs4pe9^Z7Fs2D[#mO-:"^'/ANNn<hHa5S=rf=0>EIdVq#n+(;Q?9e0g%rDrgtQ/fQ,m\-f$.Hm&cos6_;V;LRIp3h<-W-S,dYFdlj]_WSWf?\k4`GhPuXaC$%$YO<+;L`hmTDaM%HE3\"G(sA]laM*Ic?QC^%H;<_VjXJ?cIdYA&B<baW^":SRT13lF8<gL\]mfASY0@]\^VACH<55h[X5Cd<Y'tZ"T0!)()qifUf?[IJXq2t!ia+kDh;K+:j'1Oo%*p3@peusG)^X[8qC(C,frS4l<SPS"CG-@OM-VnL6f>#q`rDp\X<2D0.TA^/pk$C:HrFY@EK&>GNkC0Jh)Y`d(E(In65/+EhVPDu4%[upR_QH%>o^>?)=YMUg2nQ@]mHM@7f'O-rBp!YCFf"BU1@kZS@rI.\1[^qsgaC?aWlf[Em4T7UY^QEmA2Gs4[r*DU+Fg(,fl_d&=%GW5Kfme'fOba$GdI_ROjf5C7;h2cC-<EcrqamE+nQ`lp]FK_<h*`LjE"Y9;iHi;_13\BEWIX/,h;gB@lN+1XZT$h%c;RuM7I]LGQ%^V/7FUpq1XoipVOT^c>QGE20<9_'gJf?`8-e92JV][tKC+BGtmleUmiI]K*#5PD.)rS3ncikoTl?9bVWb^0$[R9.g_X.O0Mm0`Ua%\Jp;M<LfZLolE&%MPl-9.[(8&U!C1WRFm54'-EP/9!L\X.n/g=+gm5P0ce6drSYB"Cseut\G1c'pL_Gkp>Kq"apT_3m6V@h-D6Yi%8]G;Mo`Pl,#Rc;-,4e&D[<n'IlZ,hh<1co4bVU,l^/*$QM,8MR]fG%m]F^Q]*2Q-reo%lCajJ"]i;H^7BGLp8aqq%Z]4W9-Cu/tE%6XR`CICJr*:A@.BZi9P?IWauFfrs#VO'8_9bGUEOTBdgeY.Z\WcMN6p9'Tr9rDJK*?X=)EaQFTDH1p'MA_tG3qs8,3C5-p['/g][%)YHS!&/G,a7.0B3l^/YR#p9'J^["Ga6c7noEgU_IU/.&<!0]Vd`%i>c99lKo"0-`o;l2&!UJn15G5<q]oFDV!q8^>>F>n[&7M?:\%Q'MY>V:`M(qLFkWJBQfJd^Aj*RD'b],H3fkfd\7Y?#Y5V_/r_j0B_W^rS2il^B0SR,Ij6C\ZdI4JEE:B=$c>>-eY24)Rqf0`U)_Z%AibE9#,=8RgI>#^%.^)]ZZ<_Ug-"*PjIHr-VA4m'1-Lp9@X[DQfHO@fDO$7qJP#kJ3#NHM?@Z`MS!`<:?kf6bd(klM7IGhlDp@TH%e#e[n%Ys&H%iArtE2B'%cZM-'M\]eXf1tF#9Jm2p-caoLX38ss<HpZdao)-H=Unb[$W"gt<BO2,IhsUIZ,XC*#F1c4qCN[;`^B?<%\9`6bQ_)ZQ^/1N\9$q<lL8E2IO%cBf^Cna`[2Z#AXe,a%nNh7@,(\STK=O5C@LoZNOr1:#gUDBH0LVa^/qX*+MIf<IB0(eI`*[Am%pjn/NL9h7!HZAs&)r01p/\a[pC=M!Zp-"nE#:;.mRW5!?CA=elL`.?L6>c)j3]V#$F@CD]7nM`np\d&<!G-M;#TeDm%o+?oVKAZK%e^E/\\?dhV\lYJe*UQ_@!2hSI;lD:EQj!DQ63U$>FB,7qkYHrKDEin5f]P!;V*1^'=$"V?#5]#9AdP70@Et(4;b&5Y39M"TCcpOQ%T&DmKYatXr)M]b@lE2+"SM\)`G^:7J:RR$#f#Vm"<3]8^TL:MeAuHE1,L>$OFWE<EUfrdM,"tZ%C5FtPCruh/[i)E7!A'eqT'jS#%1)&X)MEB(>:Yd^]`UZ^`^)9a,q<igUI?3[B>j^\9<G+-81@K[k7(A*>9?.aIqoC.t+ahQLmuM-+!6*5$O+.7,/e5$$V02e,N5_A;%79V>P2@s"L6e1Q&3+PhcRXEg<!*&P".UYOCnD#)_[We699ui#k$P_d+`gNq1YhYkOnD`ss#u*ZR8'$]j&G4U0QJ._[l1tY'3M&WS%&;ECkVs%hE<k?#I,#UTS-^o<AN3CpQ2e'Xr@[+r_CTGQca=+V#SZJmsa?D5b7R"dS=SD%e@FJOMg`su5m4/'BRiDIRn>L;_p&dIN%j1?B^,f^M'm)q2Lo<$!=+[<f9NaReN"g!3j&6E3Z.[oha-q3[ng*+iK#NBm6nG8F9K't\E.pXXh#[3`3*$s-(TT2DWK<AI5-!9(!%1WuqiSHD3K(.:q,9P&%0F+(X#@Y-reM_*LcBhfY0*I_P3(DaJs'lmOJg;OJC^,Au@'*&UQ5kSQ/ir,#D7'$q^,U!`5aI*@XGH>\c%ESK'q_-ocP*;2m"UOraJ$b!?7d\?Mp#CMg%D=K%_LtgZR:'8lSRn-Kr&7^DO>3Rc*@!=@:1b<)jNYF/:C2k1Pe^pJ78F+asKuF0I%Q^AEmIX@LIi^MpYI'\?K5;uk5/8sc[Ma4^i$U)!U=3g7aR9oIGM!RjCV1'Oq+6h[HTm#0Fi\mrKrGmLan*mp4"1mM,i2.#HWm;Bi%`O@PEgWFaF=/SM8!oFZJ.@-%E1fpOMPhc,J_HmRiDNG$9N#(kg<\M*1G7)CaMUSFlKL[7!jpu)C&M2hTL`&bQ0O``4:"TX_'^iTZ%Qis)&n9Bm[^pOaA7#2$V,WI@QN/Ye#nP(INNPe;PYA1"/ZCD1[)BhXSna&ml!AgY0q7pC#;n?f##"GR)+i5LSpRi0Cg^[XQ3q,E\%CnP6N0CYtt'':o%+<lgg49-M9$.3l\kSn;tnt<(BRm\Zs#$bXH$'S?f$:N<p=SkFfdn$T&#0NkrJ&bNq=0BIVWHKEDOd2_h;7>Kh%QL]`Y#@`)j'9>5*n@BP.KEZnsI@+$3On>jrD"]t2<WKK:cRdu>Mm(<'EQSakVO2!-Zj0L_8VZZN`#0;CYcWi8FK8:iQr'WRH9_$V%SVH6!5[$CC6)qX1Z$ZmqYt=RAX-@aT=6HhfEm;Qp=]\\f1!^u@e]$(U@k#_r_eBO<h&%ib]S['&R`+LlF<4pm>>UeD3%q12Mp-G9%$7lg.Z,hm+^okNdEV#g(H%^2)L+*C&+c+8"mtKj(b@AgbY/kCU#g_Va\K\5F,%##S>`mW3OTEWYE^a:j79UGhYB!'<1I[sFf#SSO%b7oX7A@MEP*2u"ILE,9_6D7)@/":A%Ao^1>p0FsibAomB>r:UBE*,c=0Dfs%P!:?Xk/'MmU+-O-a%@]j.erTFV+J0NQ(!Dj320D_%gZgC@4T.Qi=!.rUNSlZaB9MbVnDeDN<(&2TGk-P&fdYkK\H1+KI.&K6^RZ[m!Npl6*Q+=s%;&5QG2([9iUpnZ:"h![d"<hpX?-t<%^5thG-dX@faSEZ$9HA/5E#'(sUlDaXMT:&g$Jq^[>"46)b"M_(^r[A)/uMQ`L(U/soG#O5^CP^d,k6>?QUH>g@Qs!Mc6iMarm2b]%AULK4&PZUA];+qmf=UDJCK;Etk23l2bb+U,Em;JKOi/&_SPclZa5<ZM?hJQ#.bd_@?4cG08X)O8LujP5Eoj@5IBhZZ^/9(ZL;Ss0%!0+55IC+QIi<ofu#@Dh/aQ^AXLk#'UdHb!l&=]SeJb[?(0p&&'(sFq!>:=;o@O9u>pqGWY]Tu(I%81hRMg<9orH9eW5!@3BjQV4p%h7H7E8,(e]C%?LEiU;'O]be>)MjoECfl9fH9ITa:T#4gm+.p#nq"8\7#(L\5#U`e[BR\"c7ja>=Ymm)nc>t,V*ukCr_t1o6XHSlG%!$8EQ9Q-5^E1!g`f!?e9h[4fs&lINA^Ji'+J,=h77RGKE=pe1?Z)X*#XbQB/%+.'=jF:4*QpK-Q)\b\>n`o.h65"9S26"9&aG1[4%Ka1jbQN4$)%]@h^l)6m)%/0<9)`L@uZ[5e=:`ksdL'LNGkH+NQ:?`9?R7]"A7a.-6%!Mn,LjDPGQ#]2=.hM1WUps;u.13"o7\Ks'%N"*qe1\gR!_2=,M[UufHTM^N=/oa>2)b14Z.mofu6rY)t,jkd@DQ!!e"bfS)C&$(EJ)1gB+>:VX=hdK]),]eL&RJ&E;P5fQd^ui]%Jd(anVY;'U.sqWaZi!)BQ4,=$QPOG[&R\Y)VXG\c?)6iFq*MiOGXWLGnnLBpaBe1D?4.iaD4J5^%<&I-1&6UgZ_EkU8E[FbfiqKe%Y?0c\[d.pM_-5bf-,6/@!\;)HqJ]Pir79T5`pOKaGn[+;d5SK(pM:T/lT;3EXo%DGZS:kYXK<uGBb+[6Kc\@M-MF+V_FV9Z,<aUC%Z<n'Z,DVUD@NY5M-Zps(qZlMaDC+hUjZd9'Fm6kbh`kX!FXp%2N!2<-[W/G@7Xj;MUUjGkR;WL4pCr4UB3s>E34IRm8/V(T3`=56%LCoo-V]()?"TYi;>dT[TWk!&g/VqMZ06*^VA;bdO_KI&d%i/.FSK/(<KI*6GJ=t)p'jBM2;hPZaA/(N0q?L)8c_N9^%!$mo;f0/G%;;:LcWW(R)VYd!aOr'M)jS#<N.iJ/5rf(K;LVRJN!,EsF*60e/Eg4BV1*ssq;`X1UTFJTbPN.C]=*bAHG8UR1XHDGo8-6G8"!k[_%+1X<C_=EHO057L#+j7l!+8^Le8\h0E&tmX")*Ys$^V*R\DXC,N_t;PW,sjG!hBXgf,@&-2a%Yk!bem2<1ERU6)`)o7a;9`9]MjIj%/Tr`C/FL,$,XZGNn_";R"C_B3^-ch0]cQ;7Y=4:eQNuPb=J^7NNG4Jaf8BV[;X"Mihc@#I1i,q]XYYs;FNSUp&UfAW",Q+k[Eeat%3^(4S&RIu=;1^4U%KL,p>sZQ<k^$_eKOX5W3su=TX$OelZ+,QDi73#i`>+qG[Ml9];]Pl80VB^:J7k"KPb.>LGoGVcGi_Q8I\I.e%\3MVlV45S""HR4)@(K@;k&kMiCnk8+O.dp\<Y;0@q30D,Kt,UkX0H#[/#lJ_gHC7r`#reWk!g20Sma2lX1WK[S]?2e30eL;MomaE%Qk`"HQqa\?NG>1]WBBmt6P!1j:4""6_IM.o[%B_O8UPkY)j\r\OhHD2"NA<*(7FS9p608`Hq,Se`RU_P`b2#j3m?[RkTg#"3Ro(G%@p^Fk1#q\)NIal[>*SX\'[u&MLu/C^i`4GhGKNc</bW*e6U&&]r^MZ_XJ3X:L9kXY=;\dp=3ml.D]d?R[R*l?Z(05D8`L9\fV'*u%CER(MI&<b*CW:2kd+DkJ!3^jr\.J^u[&:U$1-QNkoHUW,&.dm':5q=TQ)h-t_f9ET%1C<D9BDcmEL_PIP9Rh#a;Eq$;jp+Fe\_de%kID1Jq`TZ^H`dLK^l)nai^7ANaZ^?A(ZL;CPd:1*G_F.]Y(5o0?X^2&k*3PrSCBk!k(Jt`:P(r-F(la)'049KE%2Sk8XHcAr#keV%br%P#oj[;:d'O*H$g-_dbND=b9VbkKduq%<GW80!)<,pi?VgFeZUV0#H+K@!F3T!7?b5\acjnAJX`H/0-!<n%h*&(oHX1[3h1n?p%gG?E4-lW`\"f*2W;C^GY!:9Cm$Fjte2(s6-b9obikCU[fCNU9&H4k@Rk*Oe!cIe6q:PK4sTCnph8[QtZjqk\<LVcDNg"<nc[F@>C%#SqB&1e^dti4%b5WLcdX0u_'u$k&LN9aT$(=Op;#fWDU6UYaT4U1a;5K(^&mreNnk6K^s8Y?KS:e#t0K93O*SGc#TI\bgm^N+=Y/%KTP7t5lM0RI4<&_d%L:oa:G_6Aa>p0$MFb[K=+K)o;cD3L9mG++4L6Rn,`9Xm=ptUY\W$/n:a3Udd56@A(6'ZanOZh_g:WEDrRPj%j<"R*cqdO4du<@#GTQkB;/<l4$fesM3o[=RIA*!,DDEa941"p"fUDa.Vbtq18c@qQkYM(Ih\YLGnV:O0e-ko'7hN,CnH'q_nPT9*%r-/%ID[udqs-\qbkc#h%;3WX-^O28$,3\\)r]#X>5,%4Z5Nb9$5<MgB/e%[O_T1)P;W\hAcUh#4PZc]>m:.CkaiPaok8>noYVPOJ%lhu'7:'qUYTJdjCCl&sFqe>Qb^+p,T65_!7YPG+B0?>>u7`-JTR\eDnR&%YlU>T,QO,$:)^Dc+]Sr,E/UH'YM$]L%La9!Cl/MKak%P^'m$(8W9,!t4T<S!4&1271.iBNh;3*M;1XECj1Fr>He81e-Od^P5L!J_(_sa`/M?kXC>"Su#O0OOdgTVR:,J;??%B?C5#,h<"Ok%7ke>J,X_/C,6E]-lUX-W+5l5a#jc,+!ZJ"3*%rRgS;:C=4uu84,-]q]5"SF?1^>fOW2([H]\s;&6kU(^9<\CYcg%&4$lulS'O`U,%j6,>0JYlR<HC7M8N$R_+B"Ts^Lgr_q3!!?OA0/Jf<2M+apl;$iPGD:aN_t[9O<RHNV+?ppOi*>4B^gSe0F^ltUH&le)Ng<D@Dug'%fYRYu8jj&_\&#W]IKLQ4N$+>G;6VK$kUehEZ\\GL?8Sm?bj'/S^C@][2Jki#*,X3V\_0Q8`YtlLk]67/M(hk8F:Kj!2"1pea=KYU%Uj:&m@[Nqp!L#oe@UP5'llY.D)H`,7!O4&GEUnWUTQ,lX;`nsV7@(bA,0c;HJj9Wu.aSB8JicgL4@9Q/(3gst9JZe_/TR"@>Z!m]%!!X_o6,Y?g.&]S!(rk@Jo9,c\Vm\=SUqA)HU]i!_plH9M)*'/9&uQ-OpdDu9!ZD/U@2YZQ/\FL!A9sd:*c<.i8Y#@CdRsQL6?BY*%'Euds5[_I570ArT<s_Dh8<<V?-<?d!N)cVBd`\:s3#8t/5TJQGEM?';:aQI4Pa$HNd$`k>@\=Ko-BKV_;*o+CoFb8,1A1c\bt'[B%c6sC&,a$<?6'UhGToh<G%)DKlAq(Eb5+sI-JY<7LKuBtZBl,sN4)U/lS^G$+/;IG?MH/56:tQ&n+L!uj&VcF(OKt8Ed"9LU?>12H%N/@LH4?pcmS4)Rm*>6TN/7Vj*#+8a4(<FuP8mn7q`\o`s,.iD0"O&aMK"W>W!\tqZ(.hs@0*=_cBS)&#$B$;V!-V0?$-.[mAPmAC%Q;hAuF"`7R"fJ\Y1-M:u">WM=,tl=4TcnB<?kb:3-;`4I!d]U=;hd2"JON5)M$E*#ChZ_(,`78&Oru/^8/;b--"p`nK]I*A+B%8`%75mI>_pGoI@h]R9(.G-14_O*b%LB1%@L+5O;#5tla!kgNMjUVS<$G2Z1.r!ci&#(\Tk-iC9l1!?8[tCi0V8C9=OKII&PR7s;3d*G%TIfX>aMQm"_CSiHkR%VX;/-Kt"'3?=d<Yg`#rGe.N^l]3KXlpB&0i^"/WsK2#_9_#(D1i'l?GJ.M\7>ASg"dXnt*XRA1HNMn@4f-%.FVi>],=e&\h](3_.RGV0J*Ol-<B%BntM)M*7CiL9a4$C0?CoPo'-cS<>S7970Y5NF+@42`t1eWgdL1Z!(qN4i`W!K"G*=f0:CgV%()/`g9LdLj\-9PnJ]ct4@kVMXL_:MK/H-9L0h%K:P,Q+7&;:A[`o905n=$)oY`4s3!i6HYVKkKU[8#3."5KbgDhb"-m#X(Jl;^t9%Q7,M)KhRiq7E4+U=4KhJ+BFV8"WL/BSAJ+@80W.(n00>S-KN,sZ=m_T^,KEkb,`Pc+Z;$=b[ZEqk98"Ff%V2"C(P-!9L09[!_nX+%[h0,&<E;?c+iApXE\aQeZaeQpi\H;pN4q.WI;,Lp*.2N;OAhf_%B_R7"`"@\.se[i4DPqgb/?(=*K-W?YVHn&J!DpX7e2CM%Mi,"%\"MB,6i,Wc#%R]qA,sOJM,8h^N;VMJkcsR(]5VLUV#oWJ(e_cB[;"[Ki+QW/9Pam9qL9/U]Qhra<.OKOA]7fg0"%A^FK`dTTIitZ%`@>&\!\X/P0OOos!c5n*d_ZT3Y$!j9LAbYa[6`b;08P^8JQPLjW\SIS(rb>eXR[ES7u)Ul)o_?CQ[lA%aG&fm>;8#A.&p;(;OU]g%,VOugEN*W/,M8-P_#>6(.3heS*,t0SG1=C5MF0%9PX&hM`iQP/pI(U8NP3-kENEW/=?L1GF]EqFn-&T>!`8)UM'BdQdB\`$&u1,%%3?f\_i?a>n7oPRC@hu%mCuB!r^+e)_`<=9aTfF^)IhG*<*%r6m@',AR8=4ESi?r/*3JL?;HrWF,*+E%^E@7u+$9;83e,i:Y&b\)j%$-41G(8Mf;@`$9_#)QA_LLLr5TS^\.C`uA,)'pFd6bF&Ei)hS#=UoK]E<IRS1m&CVo-3q[`8UKXJskpN%[^j9CdVn[%_p)cmP+>@%:^a=K5raeT_/D%BLX:U:Wr/X]4Gn5/L.Dhpa-@EO*H?,JfS_(S_!C<i9Ff%=b#1j;8DH-A3=lC?JjJsZA8X\1A:_D5P.,tu1nLi+%7'mAc*^UF+;8=U'"sdZ^Vhj)hA79\BV8ul2lI=ibK>ku.OS'C[*mnB8?5.Ck&L<+8M(I&Ek2?rM!;7dhTa^o@@3*:ZGhB5Ijq`\Q%hbm['8^Sm;f1%?TXA"pKZludl,\<(3\rp.rO;5V#6%f[W/T)_,U"Z5[!/`rL]f6W;i"fL1!EY\j/^#Z-b[^)OXZuCEd,0^ko;WRZ%JOhQdnO6#P!W^?cA1dq92).Fu;?3O/$nX"Bie#M'7MAr8b\b/@&q1KEDQH2kM38X/-m`$Ye0,*dl4[_a:k:$DBV?7T[jZeP-sD08%PkX[N\;fGMge4A1!Zf`2[jW^F2iuY\J5)SFR8lRp)@J]c>fkkOon2*fBd&5p=.Enh/XSYF.NG%L!6`9A*"\FGK$Vf@kir1ddr[Gl%:h4kR0/JJX'aWn<X=r*>13+!>lFf0ORuuiE'o`8l4D@)&3oMI*)H%ir_C\0*:a@#cZm_C;CtZc-r<;5UEV<UVH$Pi*ejO;SlYS&>%bTN)"[9'c5_'66ITNu>gi#a&59gYGH3Q8l$Z%LWi&3Fjh!+K$N&3C`eBX%XE"2t]8&3>>qJ?Hm+4IRt.#BGhE63eQZ9q7_/`""o)%#_V(V6ben<#>PEp_B=E\*G#N'_<N5HVRCK=TY$oMA/JK,pXRV[Hs?ariWU:*WLbjmZAQi"G%"BZ;LrKj##&3i2BETl2Iu-l<eqgr%=&Hq0pqTH88OI7WJ8[do;Q;j3>RO;k<F^g61T3IdJh84hLf:+'6Z**OIsJ-Z;&eAs,'d<6%OXlK]7X'$_rDMA6]ap:Q1lOm4ebmW%EkG6Wa<\m:!;Uk\Mitk2[8G"=@n>7iKGfXq1Q4hS/JPQ?"s:786mf9\BFK.HU-t.l/BT?6()Ds9D'AKq*gP;L64Q!>`$=Za87FH2%0Km61J.Nf`)mt7:(GK%PGqbu(fWrY5U?Y,(_(dd)gB>H\W.dQ55&T=-64-<"*%S$d&8L5NOYumM.:<Qi^a'VZNHbZh]Wan\g-c9\%ZHsAg^u8V47$AC;VG&SI)AJRm(mH73/L7nm$]E4cL9908`FH\nclsT(,/Y\?XC<[Kg(W)Y^jd!Md_S3jZG;itSAKc]LsYDa:6Sp\%_.RKb]o62H6Q;t5Sg//g!Ab4>;%'GE5t[jh[F#tt,`G_u;IfdHFl7,q,ummp\4'\$OZ)qX4%BPh@0LLsi9<"]W6ACR,pg]#Z(N^X%BUm041:8h"QNDV3,gI+6PK7kdR+k"=bCuaHZq<#CA5rpHGndG2El]\\1YHM4N(11,Z58:"(pr+m[?1-i4VY#biohUX$t0uh=tr40%',:/%=IN9R#m*J]8G^*^^"]P69=#Z4"T8gY@uuY3.aOOVQ'f,pT#Mlt]YPF0=u$kbXXtf8K\tWD%[!%,h+QJ5f#>tMk3/iAne`5^%0d=Ie_pQVQ,HH'j2MQ58?L6XD)&=%Mg4S6tLaPp]/[e:oR[V:Z1,[1K*e7;.]m]bId#G9?neAmIIj6IN^AZ3C?g"O?[8agP+B+GI%4/]b"T`^W[gbfBOo:`nS>/K>fXi(LP?[rJ"n&MmBK@LlWqg)bZ_[rfU)InW_mqr0[j]EfEU(C'#!4;Apb"biXDPUKMe67c;UWj%j%<=9nS4Lh<Kei&A$&Pb`tn`KCgC6^8O>1V3LksCiP)Y%.B]+<QP=Pdg:-]*</a+-]2]Fc6h09"?V9Abp)*kIE:K+R(+Y?cdB,rps`%m54_\:L0$_VQU*CW(laNI\6l+A+KU^nRaB]'$+Y:9R]3;I'6'`RD?npd]G=L0hCB9lkE(]%E#MEneF!>)efERQj:0%=&;\AI!]92%*rs0=!eKFPV_an(l/(Ii.KA>Pl$f5>4or"Jf!2R\DW>']pfiKL5^nf37*j6M<;)Rbh\l>enUA-5n8<AN!L)A5Bk0DMl\C1RSE)`$%#e.>#gXppi)18H(c.iR29`-f>YmE%i)S^K7)SL?%S-tsPUDsP7+gs2G1K?U_oS3@3kG`9Q(VbFV+Fp]^CaZlO*Z*U1P$LudGeq66%PbHKhY;?g'"\Ke'meKi)b;3.ek"a2p9IBbVF2rpk`oq:@U=BOmH>Vc'>dO2_6X?9:r#GW9!-lBb0PJZ=7'4t!5G)-2n9YJ%=EGAZ%7&6(60hE%A)HcT0P+=kB0h=>um&q#7-gUR'PWW>i5rsRDs7?r-D/:IWUO-skDPV&%ZW,/.Gj<A'31o3!+]=Y>1C%q.`#'8)'#<)H%BTD1[m1pu=+9KqAXP."J]QA&rEo/\-M;21te7-ib`kB^oUtI".bn/uo[V(`*Vfp3@G[mSUIjm:r]dNAaSou_],G%)Y_LCcVp_Opu%WS$UZ&U"O_*IAjk!_BQWVCW<F'5DilL.ek%?hoJh#7j!.k[Y#$pEpD[$0E*27-n[1)C(P!KgU5Me_9f[9Csn'pI7]>0p:D*chbb]%-E07DG[%p*'GYr?(p&;H9&T$.9Q=%;J?2noJ#k5($8d?VpDn?[Xuj4NDe,jKpFMCA&Vt$PBnZ4ZpT.^hF*6T@Xe+;JC99Z61j3P;%iL*LqMN%FQRijI],hCV#JT6:@CA*VhBrgIlhe*`X<<XicmMXdh30&IE(jlfn:Tf'''t>e!#6>g$H`g\rb1p)(G"_VB(Z4bVCGa.N%;LX/GBaI>Vq%*Ipm+[c%[h)$(`,SLpobSIVYIknZn%ih*k52-cHs6&p<JkuI"h\-!"nH+EZ`p5@OH,W;0(5YjUtWk/@_D=EBuu-1%f$ETX"Q@&T6A"m"H9I!tq<+Pu!i]0a-PAunHLDb&SPRdt>XS886>sndPAh@c=F/Co'2lHh,(=eK+QP8m?6(i?4tn(>a&BR;`=W;B%[L"!_,dJ+6fM`$Wbd*U4EoM'1hA;7el2"gaHXNgo>f-/d'malYfaY8"ooJ7Ij!i`2Lk,:)6oSBoKj;D[Iob-G+oa8dlC.]5`%M[.%co.WmArX"7;rY7D,bSlJ7!cW-]oDPpoVJYHWuB<!<AtK8+)c)\;cYhpUit'to!dpUHX&[XF`e.k$oC`^?it0TTNTnFpj!-5<D*4%%kJr51%7rQlh,npE0V?^s.Cp/DCD$Au!cEtYhkTW?=K5M>b59)N8@*acLhBLnYb(uRXnnR*I9bgu(@^JR=hr"Hm=bE"^>d*4LBAQU%n:#*&X.94DICaHlc[G&k_YZ(uUSQMAUl>A4Q<[dXkQ5dRA[\Z:[qZ0ahOiJoM$4@]/?=V/lhs5/4J$fb^flB&#p2sb#8fT\BVU,/%p\;.S/?"e%[H*2q<G,<5"7BM>Ke3k\>g_d'Vu-ReEOfkWQY8Xie4_bVi0]4g!$ZnVeK;s2N>r>m^t.=CSL31Y\ZAFskC%U68;$4p%P[^;qNW19Drc8b5h><daMs@*2>.J%03Y<$d%rCGZ#/oLDm[a*]je@Nt'P@iA0'TkV_"QON,GOM4-,[S/d!NM>]JWDuI\)/=l-apH%_"'+M0qjkfs,p4@q?QTHFE"('+n4=R[11OV:*a1-3G;R9QUA-82=eaZLi%$W+PnT=:*6pLDe\+b1Ql%9BBD?BqpVe8gkZe3BHiK_%Ne]9MZ:BH]<n1,p&i#9WKg$Z0,Hr@HHTZGCfD;`YblmWJSR[>gk+(]2)5MT\B^=*%-n,YeIU<KUL%/->mnE;!'_Z@!]t"_4P4\@t%;e55-WV"#dfS+8^kM[ShEnt8\"!X4BS44L,0okisn&]<f4uGrj(;SLC,#-e7$`c,1n4Qcr=#?<93E_4&4kcoC:SkSOZ$G\C*)JIr%Bj>mB'?bH1UP(Pj(4bil-Y0ojB0iWkkG`E/VoD/H!9ScUnj8(OcZ9gl`@3RoENS<3Lo%/_RIj`_YgVZj<L8(>=O#;b\&(TsI2[e;%e24!3,*U5B%^90a7uqAGdff4`\g&SWHjcG_1b*!rC"c;$d<ej!.9Sr.^ue=W&"q?'D-%h$7_Hp@JKIZj/NLO5HbFmSrEJEHo&b'd%L<t^oQ;9.*"!R!Omfca1q5W>A`PZ.n,T7#FDD09qFZGX[Qe^0S6RmAdfJ6o(ZY).=5LjV/`L!5po>L.eo*G%uTV8t66A%M)27^2m%EQf(Uf%>OnL[tqJ])c+ZB??qCR>$h50gdd__m;p7?L^jKeF(,dLs_j4&5NIH1s3FHjc%F^M9A:FA]^&?$W\MalsQh?"b-%:MJ\8o%9#'0&a*lW7pU==TYe((@qM)cB]R*UG&hiN[\jr<_'Hk+0,m\o?3?VccTSBLe$))p#GN)&WM%*WDWef8YVm,!&^#ePBQY[q2puLno%&_7;hUhgbISiW*#1:O%?*?=]%^%sj!c!0Sck7QFgIWJJ&>9$IeHo1FPnjE<s(;Q@Y9GcLDNAgbcTh/cUn<9&p-K(9:q8#8P(f,sk%'.Y9gj(lR(V8/JWo)rQ73YU42-G?)baYE45*1*7kOMiQ38j@rj]32g;S=Qps#mg&@\K#P)"N;l0]_LtHaQTK-9RVYHN=L#Ki/4Y3%@X_n#Xaisbk"?]&%iR[NdgbZ%lY7n=^s:$.&&fN^7W!h75OZBGm)-O50!7]Lc0*L;"CAa<lPYD&\"T?;UO].4C[6E_;)ZU6Bh->\%)hj<?W:5G"A%E^9&2SV>#0u;M++sg7c:\L^))utaNaR?<Iui6K0V77u<?-\MHIE/.RoX2U.@N'Y'a=R>\]dd*/>2OSaTJjol!>g+%!_,R@h*_c_+IGG2/$Cm5&Bo0nr0Js+=uX00-[FN.[FmJPa2Z#h=(QX9eJE"3[XFjkq]T=n0:GYG!aF.(0N\9X:;1n>ja]8Z#!5QS%hX.K(%E8TkNtIQ\?g-2'C/`pXjtJ;G#C3tBc%"[aEAujBb*ML!+rlF!9eh'`"s=8gnKak9bDa9Q5(CCV.eu-1/G0%":4I@(JTGX[%,Uom-]!ER*8W*VPDml^'?]-'sE#hE!fA;MBbp$GqXp;S.:nVjl"63[U[dG*6U_2U(hm+SjjAFb-PJ!Z0O`VI(Ub1G%O)7OB"$MZH%WGk+NaQ+c`RB\DS1(3TjTpr+XLA6#Y>)p0'U'W\m3F:Yb77.l9P+.mRSH6L2NqF:p'%GN\%0N%d6MQ!C(I;ng(h7C3Q<k5e\fHQQ%\fNjC;u2Xc78<PO>!RhlH[W*JdO@QO1\VZ0jX!9MM5Xl$!i37T5;K$DB=(Q3)$3JmJ&m_/<MC5eI8LUFb=gZtUFO0l:3gigiDr_A%\S]BVXiLdYAOqN\U=eEV6_KUmjE7eNn*&(iU(#FDO)<N9KGOZ+$k!['m.);fW0m0gpIGm0ZR\M";M8l*ldb0&2<!*\luO8p=@JkZ%$F3OA3=lT3"%qQSp3l%b,/?ZCT`pNs;P`o=&-5$JrX^:3bpD6%T/H2Z,X`-d.h5qHI:fZT1nhs+H0q?nEcB&#8,k+d]a6A"1:]O%%VtR>h5MN)6V'sCXTh.VGbu03r/%&eY&`,iEItS)GG;MNfL]FX_Fpen`+YK<QL]B4C_a4JsNmikP"RApFn4/:Be]O9u6DQNLAb2rU%([9es(t</hcS5X=8R1U@Y?6c;G%k=D2%-le2T[Q5lB)-&T.d_t$1b^0J-5nRZ4&Go.eu#_M$tF6`177l$nsG5.d9*PnL]c&"<q-d%9^sT_d#)jZ9a)66Km$Lf]g*A$/jSLk4HV(Vm0ht!RRg`ZH?3%C&/\]0oW`lVL9+i!T)cSsKRR5MYSV+DYDkGhH&BGBr&DVBOLgo<%`<!as?k3g$`ter+%7GH_/&>R!jG/I'#KZGbJCR[#Fom3N@!FZ#$"$G*UIar:jpH)O-+sm[)uo^,_J$jMQQZ's2IUt'pLt8ROZ_`q%/OT.>?o<7sTGRcFb]A:Hi1Ud>7YOm]f2HdW!@bMegm_8d"1B?<2:HGYYq$)N]D$i%7lTmnn>+N[`o*O[_"<U?>(s#;&b0E]CkZY'%<Y8)Q,*J;TQPq-X_Lh1<pW^P?5J"Xk@gbXQr(0SSY?BKBq\G"V,'`=T0RapE$gR-@j-;..HKd^SjW0mBNfVi8K@[qqb1"!Qf`I7m%^imegS@GL-UrOl*)#^Q6'!+^5g>rPbK1c6`&OF4R`<!uC/SGmZBn2#lJI0[W)#;#9d6./LMKaDr8R"h/0E@p'r8:*p>Q@L.\C?Ef%\ni]M5U)GW9bsc?^';$aL;!rD][TW4>eZ!NAWnAcMN!BWBES+iH!uJHAV/toF9U8t+B3!(a@I8+#)\.mj!bg0PJ>VJOE"S*]i=%*%jZt'Y$u9U\l#u65,*"_\na2%XnO<ZO'gTh]k*IlkGLc;b?^!Jh\LAqFROk%q.41/>J?Ec,`fN=BZJ`=oEIn'p5ma=E0Rj:"H;+o'%\VWQu%!!Hf\ZG$Pp8+#[bJM8Ln9?6GU'6tl.ju!n3$98MPi=@E)F.@E6>M+u7_qA-7[Edq(Kh5b=8IX1Ud%,cecio-S_2[=J(X4G%.mc3^b&f@P=E30sq1<9%r?=Z,#;HLOP_V%o+h8"pkWi[2`+I;*![mIY@H,Xe?osR5hE2sPmnGf)d'fO2/.!;=Wk>]16>D_M3](6e%(3:[rM$E]^jsTcp@,ceg6?`Od8OdI.,^o+N!Fq=&]3_dTI^/9L]L%I3D[lC%EcMhjk.1,25up>W#1Chs$pclRQQ?nk+=)7RLs66P%De"]`(LL@;8]EOd.Cj6jjca-e@/&i7P/`.$L5Z5*P4man*/)1gl%iP<%7ffJ]aQ;+q@[U9(_tbf36+C#g[^HjL^WA)W-$FR@g)n+%7;a=l^FqCG5=GCc;T_uCO8[B,UI8bG2.1OurXk'45QC49rQ:Aq"3'j]Moh8mrLml!^]PhS&A\e'NOg[dM=H-qLH/Ke5boebZD+TI%02[pX]JEn0U=1d/7,J^Zg+J1Hp0pB1=BKtrXM"hA#9T9fg:bND`+Z9+N0+YEDcJ8iP8"$L>t+k$bLf<ibV4;uJ8ZlrVOQg=VR]^<%MupV9em>%k#RJJ-o?U55+M,#o.sc%J\de4,0FtpOM_oVuW.mR%aR$B]q;?(_n(_D5_Jfu9M'Ve;@a5]W"ND#rQm;`(9>F9(9F/Gt%)^gB91K^(CFWbdU!26T*,<r\eBkTW#\cq$%oMf.5^sKX8#))WDedU5as55a'b(Wk`H0/('N$@%gK[:^&#C/*'1s\-5O@N]MJFE8Z%D.@o[1I2\N.)Lfd#dWM@)l!),Nk/G#!EklYAoLdn&3/jq5j3*Y_XipeSPOm%NrPb?dFc=s=K2mF,u2?KdWRo*iu.&<NY:(*0a!DE%gkah!Am=FsNL:^\+V%,NqTgfJ:H-D+JEVP3;Cig$&Xq/DW;h=I8S]doLtAZ&S,`5*qS>_YInD0.j>L9-37r[$(sW74(geYVSY$B_%\YOs.X&sO79?u-8jVJb9^Z^5$#!f?el6T=R'MCr<%_EE@2,1t^]$9CWK7E,a8,[766e]f/<Y^^^Yn%$O4=Gk"6\:_d"aM2'(MBg!%"!Fm!6/Q.p5rD1iB]@0jo5'78bQNC:G6oPU6dcCgo2_e25Uf57JF9r-)bC0hj-Pp"[VDJiF.%U&F.l3\d"7N")0\X[#YlpLm5=9H%g(1QKooR\bB+&"&)N^V@Yae&%@))aX$dG'm`mF3'Ek@'cV_<a<,'B!l!r\&:)^Y_<$RJC*.`W?H@:`YAneI%I@b#j.n3e]`_U-a>%6s3lTUC)Flnbb$:52[D73/NBSmj(XUDq[k;!ZA6*F&pur4=WAUi:@BmXSFhTSRi@%o-M"7!LX,l'9U\*^nV3jSSmHl&`&ru$sVbU%9pg.f*_[q5o58CR*@1<2^Bj6lQOlN4GfrY2_nZXA)c*RVj1.8\(J&*dP)2biBX,p+=ed^FlFg)SLr>9A`EPnO6##EF!!`fI;O10o%UQ1>eJnPBUXe-8Ql+2an*3J8>KAa`iS;'dc71qmgchuu/<paF;\=:Yhd],@mHbi1q6hGCAj1_-g/2Q(5fV!3INmkiH^7#a&7cA1%%ir&aOPCJf=!qem3fmA>s/W46%]42e`I%:&sLj&,SVK*]+HonR+@/d>g7c,280RH]b6\(.?KdtS/BfhS<m9"V*^L1Am>IOMG(@N`#%r6tkUe,+-UV%E1)g)Mu)&b"05HZY9`/.Hk"qf*<E0r]XeS>:8_;R19TZd/<;D[b5?2!YKC1L0<+EhDHQaLs`T,V>k-PY"K2QBkOq%igb1+.Kpo1>?&Xn'H/W<nKSE!_'r&%;sDR6$+:oCId"/%Y!0pkb?aQCK@bpV]+g_;_On=0AC_mLO="!,DWX.VR8=^UPB!Jb=Ek%H%g-G4K$l"^c#g"`/9PD;<n)D%TMNamj&sKLqNo2dZlA*dIDQ7-[6_iS$"[XgsOF"=o4)TrWc<4nY$no`=akXPQ+o3<[IKR8rbY5NZ%Wk+uQ!:0MF_Tga819#N;dB?-DKK60R1:ULiaBSS2_BPCP#Y.A@1=jL\7_B"8`fD3HG%8oX$MONX^SIfQ+EW,4^4IA,$3*85@/caj%T-rcX<"?rll*2t12A8CR7=#]83KVh(k%r1Dh_(fFY>-_XKS)kXS>R0.LO&beLA2l?Cm^OtN^.E$?HT<j+Ekro4_$j\$m;?8f-"e&%"hn8C*G[m\,FS/OaF\Vpmb48'Q1=&U'Q<f.D_Hq,Wc8[?P%"%[OrYf:rb;:tN3AUNX"5)L*qSmXl'[Bq1G0U.(8]VS14Z9f7lU<C%mSMJ-Jr>5ApP0!A%(Xl'L1!I%Lj68B^bbW6'gA[/]/&"Fh52-[m+BD/V5.`MF^@hf!%#;h^LhW@N'?sMfH/=g*0'Y,[k,8T>SttF%Z$)Oq<8)RsTZ-@mQe$M\ONt9;iUe$oMgAmkT(5shU?T17#;a[e[@=P*9AL)T.;]o)R@&,"Dkor\?Z*;-<"rSo2Y&?0T;a_1_0j'A%:#$5E%kZYCIk\EQn'+SNb&&\E3S/>?De*KQh:U6MKLr_^`l#`FMrAF2Fl+Q"WlPAe4Tk8a<8F^&[pj!f@!=&\+brI0Qi0ml$:TTb%V(D(mV!%D7#K)Gn1`?hf;;@@5SP8+3-E-9i/bj`T5N=d2ns/!1g6@uf94Y0bBLXe#8'(Bo?s.QDM\;jK5S`tZj4aZ17F-H(cr.l;%`#EJIj5R)9La=!0*E&aSo\C-t0-Q2hm%rkBbrIq:CKAQ\4._RCmBN5!E<'o:-W"er9Pp89H6LTALsh'C(#@cg$l]+r_(V4A2HRnE%ggVI?]7L7(qQ=FF;Mu>Jdp14r_))T:#Jsa':Cenu[cR0Y((#_e^\(n@%`!CmKmW@,?1i>Lk)KPkN@ZSKgM[J]3<@=26t`K]U#P6l%_*^u*"W5/DjWR-e<ItR#$).A(Lf24=6d@2D0_1._+YS/f(<EKa(b]D\#Ngjl$ns\l=W[/%pX8bs/$g=HDq]i4E9SOo[Yl+So75oh%,$//[]!SJD:R0Ko,?#%I]1I'4pF]T)WsG:bdUf%2KH>kcV$$Ldd@@n`+)6ThQ%p?ta(rYJmV1djHreW^INN7D>W&'t08-4V+5^BA%\JkBD$P3']CN`MJaQUr^P0$'%3I5nO=Jf@>4nb5nP<^rS^+LI&0tL[4Ef_9iV/5AdODF9IieZ\>k<hfY[H&L'Dh,BHoU<%bi$'9[%IAukql0"J-;uZ;h?o;.!@BNLM%4[bcjB,d(m0s7Q?dg+#:1&o"1]74:U]mALL)!SN?Xi)p@:qGp\)\Z%$mkJo[I#,-LMfN%U1e+<%f\[Du9N4Wh5d0-S%QZr2Hm;oOkqA">=sA'6cpM-h!h+i(+WjlT?!]:3a:\5lq4O&B)t_qo^77A/7.3]B4AS6\/OIB/]UDRN4gN62%@\t)ia:WE=,Do9lLE+LtC;(rma#8>7]k`o=dKla[k;.2Mo>N$U1mu\jRZ;iAaSTuc./;mI^GHB\9'Q4b$b?Fi!`=a?J(d[-jTUg&%]Ef\P:EK)T4>Cpub"%JZk%bpa]8W$\dNYIc$fcsh!kX\EjITi;L9rf8QBEk$]?AjLdDI1j28NM;[#:GQbiFP$OWsl*C>mruMql4n%L<0$^)`*hFk0qtLQf<-M#GfH/RWSdA46_(oi[A[YL`4BY?_%&\?e<=7[!E1tp5lcIo#rUe)8EOC=Q)Xhnnb*dHi)h6q`Pq[GmuLr%C)"&Nq8UK$qmnN7hcdP2DoML;k41j]7=IH)UlFacV_S!Rm#U\n'68pt>,1ct&7sOq:3<T3QiL1]:<L#g@QS]0(IG`hhD:I^q#gtu%4QRd%qp'A>f$'eCO)Mg[l/D*j`*SKG==%H01KEZ^k6Z5Z'VB^Dd(s]JS"+8uR'3<Ue8gWq%/iIIcNLqi+f33`Z<&JG7R3oqfK[*E%_``_f1()+r!Kl!O+g9Wd?K42;"m$k&)O=7/K7":CK<^kQpOhL:NY*8lpS`%Bo_C$\!#0Sqq=qi__ZJ&_a(;*hA+K6,kRAVQg&Po<%!QCP#J,#I]A,W1l/hlT@#-juk*4KOI_Z&tjk&Q#P4Mj+=@"g,Si[=3)`\<l!b*s]<0BRA\km2bT;5<1lB-EES7`"u@09IloS`;uV%D3\[i&h/MEhF0m/i%/'LLVom4h23"Cml2!kXQ2ER'd`G`K<eC"a*UL]NL!4_Rt0"(HcPT+ioH/0k7.%lD&f$_(F'^0#aoo%1+1js%c0fR@#Q6D0+.T<=*JcmL.O>=c31sV+FNK>0,V5[s/-2H%Tt<(nBY\00UMmdm4uKA.?F3aCjXLg%O<5*_bD%Q4[;;G0W2NAF$ZCI*%@Q;KQjQ5'90XbbEGZ,C8_)YcSPU'DT2a/K=8XP`\I%:8=e0SGU)#(="1aG/I/`LegIbJVX2>eN/rNb,cojioC;jDog'@lZZg."+N%qg32C\7LF^iTV?N&dq_RI5ZF'lZS<c.0_lVm<rm[c9^@5EQ4&[U1ba!Sf/#XQ#g1D0$U"Wd/6Y,p*4c8aGA?p2bkXO(Q6F+HAtoG%jW*F`*6XM.p@j7ZcLJQ?oPaa3F8e@*[7U#V`3OOsOa?8]bfE'1g<O\AV19"eNi]f+&<PRWpThnI,i:Re+LfuYQ^PSX0dnUaX<p53%;0DtS.pI',UidZ/S4*l0K%BXTHU0"+>Kt6`ln\I=.R>MF+jY39QO'f1>`Du7"JlB:3=\fWeSH*C#gHl"8!:B%a%n"PKDI#UkT[],%a27P0B6@5%*V>?cfP/d]Y2a1Ii>Ng*gd.9S;3I%PQ:jd5Zp!Hog-tf9-Hn['J`cZbpZr+*3=e]=gDBOB)P6J8`BdAPoShrJrU&>q%Y48E\6D!_D,;89a(ubMU$!4QJS74",%P,jb8gmr`.KM]marYU=KnRN':?AI."2Dh*[#!Ed>HMop>u"ItUE4E5.'gFmCRjQ1mY\,1%aN(bKQ?>uGh9(7ib*m]##_7"o>'YCO991NH3%b[+Vf0=pdS\eP*^I[_8?LW"hY/X)i>-?XmAf+[000h-ddi:!:s=e:#E#@OVDbka%I-<Ptdsji#50r])^#Da:;2HFZ(!h2e=2rShXO!$!9TQOA[]HZ*oIM+Y"<bI($VB2A'B%--P!#peH&!ZCOZ<tGo%,\8"Co$^=0bNV%DK4sA'Y*aSMm)0^kFsX.7&EWZ+5[RP"h25&(`Bp_`?6Zb8t2r_1X).dlsZ2DgT0c6(Q>E_&Z^B^`LDj\b(g<pBPjq42='Dk/bFor%,B>dQ&KZ'A0Kku^il,P%gOA\c6@:CWiPOu+HPLu'4##*kd'=XGY:O]=&/"Ah9tpAG/&Y5\-r8T//[NO'$%Vla*94.6@<e=OI6)s-%Zps<>E6[B\-1EM3kC"IOAph9<N,J0^pE\_](,(Z^`e(42M^N@loGmXY-ZKWK9\#F&)&%<p;t?&cXGY&oES@8ok)BN'6cD5tr1"+M%<sR3S$//)'<]`3s\RqiZ'gR-c:%W@MGf<O(em0DYUft@U*!k?ZhXVVl`UB4nY+T%t)SPqCntB*)p$-GDplI=)]#A.kU_[S4*oj;3%kYZAU6]ec]HtEn7eOj7%XreY-V@-MWp&Ulr<-4&]q>L$kHoM;F;4poN-KsWL[@jItRT/'pBqJi="&CMNk:-Tmj8i7e-J$aG*0&FK%YTfG/'bPJYD=Z>F!**Z?(odGmY0O=>"OcXd+B,8PoU`<2"1)aPA6hA:@8J/kJc+LZl9r`V7DJV:?*#Ne!W@AkW5P#%q"DQaZ5P0(%gQl@)("5jc.8L\W((QU+=]fdGBN6b[Rs!TS-fB9oC0&bb>kc8`/C=Gri`*%fDE4p//9Ql%8<^NV7;'0naUU3F"tQE"a>5G9D0GG1%H,d1kU1Hn'(IcK(4-jC3PEI#o2\Z0?'O<28ELj*8<m_)'3?>3:;_pm^l*1,@=17!f/ku%B3DV)D1MQh96ma/[WId[2Z'l6O.:>n!%CA$]\n%^QA34fk>bh8k&!p5]l6mI$(hY,tYq=sKVdFA:[ZEs,3WQ/7E2%go2TutK"6hMlUjeS/+QVM$ubTKNZYLosN\\pF@(#dc2%<om/=k@GH#X!;paFp2)V\TogtDh-ok[</t9I3<isENIJb.K!RVJM`(FVJHiTGMuG^09-BW,\d)RJL2rq'fZcY1-`Jn=B.oSf82BU%$2JECcgi>n'>&[qA=fgS*i)QN$"n.Ai2ILb<fW8,oGTM:^7Gt<"9'lcO;r-%kM8_<$$El//s)P4iR&@1qEdNL5-\/em8O811!%lZ%Sk3:"o&3R0%?A-N3f,\THXdbDC46#oIDPu54rZpSYrKZ%EdfVn+>%$WB=75'5aljJ@76re_E`RPn&KZ2Xb.:++n$4:%g8#(23=e:%Z7D"K=n.f+JNX.>8K,1&G_n65Ca63=br=?PQ0Lm\`Wo'PfKFMedUE>b=iUfce%b_[<8#Y`INM]$3QdPC'1!tdTH&<_Y+55OdPR#>%hC9X!J"k,\]RZtBP98&Q/u#r3$#W(<MK@7A98O?)B%P!Xh;MjGM"HfQ[Ghq=/%=s)EM=57_+0l6>N^#'"_"]]]k.\cT!"uKKS+-:%WWYE[Br`eaLC*q-7B%uMiK+T/>#%bs=eCg3)'^>Hd!f`q+I=YK-$$E91o[ULlJ_'-/hLl,b,)V[A!XprdB<=_2M9U[R%e[CpB\ua%G.j.'DGcco<K`KgK5C?a7)=;%.LPae[g/AW<aQ*;FI&5`qi7a!G[-E<R#BMDA,S)e,n4q#Hs-nU%h):6KbHJcD%r0YZgiKX.,3qF%nOZ6d-+W;5pf'Udk=rLK-X>JFp3m*bT:QQO_uVI6g-()=1ULJ:6gmmm"]u,S5?$9T;6A+._<,CAb%lGjBcX0A)#f!,kL$WhT4r5d%3q-;[2+j)QQr=`0)ApaH?4VhVf7ieZnB>Pi!pq?.*7uV3+<-4%!(#rPd_t?'Ym8?$;G>@$@Fg_e^6$sal=VF-.&e]pF<K`=]J/o&%LnsL/e\h#4+c";,+]cfJ,cc^APn+?8>GQVtk0"</Z_(%Td.>Kq5XLpq+L-6[+f>+=9i_eFUojX?/._uL5P#CZK\uAMLP;,HK/j34%s))CGFNZk\O,5WmkCo;Ro>4JFn4$s_%U'Bm/ngiRol/%g4(;A(OM*4[W.uNmW5b_-E9q*LgJ=)*rXo$;PfK)VE_N(H:8[[aZ'Hb@%cO2G/kJ0dWiJ3:<JL05EZ)HQe*k&=X4f5o13*5.;p&)N[R)!uP&I?'a4huH0C^L]Y!85WhB?[`SHO&c,2m!=@Q<qpaOCK\sVm0r!%^p^YCZlU>R^.dj<+f=qF0Ufe-aRg1R*[$Ith6\63JVl_>H@T86*/#?>>a52BecX,9N8lA+!sG_2Lf,'S]H3$^;J]s8e''FeM4R(@%%hRSC%pfdNc!W92LR@i]-MHq5eJo_fHdDum3&\$3;_phg+nG\i;H=$6LQf,DrdGE*0JH7eYb,+M*.un]ZrlUNBg#Qd]!)@?LW`:%%-DpGUaJSXC0KG!ZV00"g!8*cU<Y#a5dI8-]M)gs`gqDnUmr&`;#Mlecd]=K"&p+'UWs8og+s!a+Y,JnRK./UD:=R'=-pcgcH%#m?%oHEn31UP7,WCJ2bjOYWW7jHq[1hQE"SAN'`WPG>D^hm*_O;:D4bj5(Q_oK.h$,"JtgUs*oAmS8E\Wpd]-6:U;gQ_)UboF*lqGmj)%#FH!bB1f7Y"g&#T`P`O:BKa.u_e[_IC+g*%9%<eQ0s0WS9^BO@/c4-k>!XB!qD_#/`2;@5=h?8(s':n?Z/oS=HMCFVOV?mL!7Rc#%1cum-N1&.9+Mm;f5tX>s9*ES.df[N#:n,o9XP+r!-.ZA[@oI\5g<8FiVY%*64B$j["!iXjRTV2'g3;^;&Z#`"/Pr>:<#.qB#H%f"%7tJ&YVs!e#L;h2Lo[>oW;0k.md!(lAIRP03?a5C$o@qml'.bEij:82cN.I"qhjb`%2R\neFUD6RfdF-rU"=78#,_^:"/TQ4V[(;?%<GSQkKn18?Sel""%U\9O&YpHp-;7j9dGBcJo8n:.8M5AaaQ_YmY7=SZVh]?,G(cn.2fk1/3<*f8OF"D:'Qn(e&,3[fVWRMi752^&%k4AXOReO>$Ec]>-C/3*YoCB`Z&B:r0e8o"`l8]uNHAF!,P=[o*RP1hX-t<^To6#bAEeWhtHlX>ASSV=;=1C)HrD^'4*NU=EQ'<:I%=?RS_2STL!#6<5]Dd!Z1VKaJXejCT*,ID/Jgs?Wg#Fj!>Cg,-mo6r<S`6>T[)YNt;=q;PuQ-?TV8o$<"Zl[MXfHm$<_[_Gq-`r/V%Z49nG!,IF\e\`V"$n8N/Qp(#G_b?I:H\=CAX<(b)4e5C%U`inPPC7INK@WDC7(FGQE*4_VUR?%/PMK8`XX5hO8aCXR9G&\&>H1!T%@B"h$NcWZq*pfTn*11G'9WKgZK5!J:RXGC;oakVN!Rl?s"JXWSi*O\7'\]o8VH%4(JVVhJ_F3_Kr)?U=7I/o+96UuDF_mW[Bg">r%7io#YSmF]IK(B&lCMO.NN>n#?i1]g?mM9F\bM67N<k7/]]FY[%?B>6GT'r'"F8Xa(p)Io^ZU]e'6e'3DiL+Jm@'%?<`*ke6lnh:9%[$YJ>D._*5,Jem`G0=X*I\K$iB(f'A.#s"hRuE?<9Vdp<#H_Lt+?<PPd)LC!4m]?\4ZY2T-t:Dff`T1dU!;r_;5>>0&cIW>,Ji^I%_J&k"f`TGff,iX41Z9gN4gfLan2m"#^ig!IZ3g7Hh?BsT\G9r%NgW%K/F0=ij5ap$d(PI!n6cbk8`;P0L?3c/+?32lR[D^EZ&B59%kp"s6Y7=kL(K>Mo3Jfnh]+onY>W#V[EiEnf%o70L9UOMN6eiPQ8F3$L?Hs*$2)fL"G.qNs&'s`9A4<s9:Zj]_c0XE"/k^ha4d=cB%oTRtG;c!kI]H53&Y;gec=WLrl,b>oc3=f:(%paINNi+Lu=+]'LWU,%A;^sN4i?EA[+8\@j3KQu%3Nu6EH!qul&=KsP8MS'G&\=NX%4Zq_-HC!@L)q'Vu;Y;[c^PF'k_s(#c$&%66V@g0VQ!,Up6':[BUfKp%Rb"6t@jo2m]^t;#19Ka6F%Ii_r6RgsH!rVE1S:r]?`*K=%TCOne.uL(On0i3Y%l,\?d58$3)4"iC$sjI+As9K64b.Vf2Qm@9RJu@A*6@:84BV*!J7t,LY6QXg.cH$3"&-#O]H216Gq.))Gm<Bh%oc2WHornpcY&WUsi*/8\V!b``7D4*%26Vdfk6N8udjk'O#H`d7WdFXBY^/:?1W\o>@CHm?goR(LfrUbIM`AF`SkSJ/YN9^9MUhlG%<3LK!-d]r-CXBVKI[KN1Bg'7PEAh@ZES;&V-bi.+)6$?r_-$!:*OHk7O:UBKdVSiiJ.J!^FPX6TeoP5geoTa(I$b)>#KVd10a5PA%+@pBR:L+P?)mgY/em'F-51ib!0K-&2Op`"K"^^l;KbAe[;OfkjVY(prBg"^lD[]e[I]qHrDcRBPc6AFfl9XSkk<MoAHVbcuapU#+%#B/a@<ep$s2e#j/jI;U][t][g_nhP!>c]!T.EB#nq<^Y[T>IZN%e+Rl"?8jN\A&X"pE5sVF("##BVH\WM^FIpJm#R.4i"/mS(@aq%2&J9W#DeD3LY)^1K^d?/`=T*VT:kS%6Z.@eD](KEMhp%L5dl9GJ;iA$0J3#Tb@f&8)ml'X&u%>_7C0MGn?FYf_(7Lk!uZ.WbjsiY%QHa5<h(94u3fCY/gVfepV";E';>ffEHX9TMFdk:@pM)7Oj!gNG5WGu(E_`Au0)mV@ciV*l2![N%+?'>BFFjO3ce0KQ7!"6l)p.&_%&fYi!K=m]:n9[@ORZ\6`g"ZV;]/`:Hls5Y\6Mm`'q#U2UqGocRch0gGYT),F6JIap(WbXCPC<d.IAsrrcMmU"jIeIEk5G;SG$lpV%nFadPs*>s$b?"Xn-sL!n032p$eI`YCbqn@XK0i$qFJ>k5p4K+$Wd[`QE^mjKR8Er(5USeuBgZ.QT:Dr*QMd@0RCNW`X)7'YOS.r7%`?)22cu=NVZ3;nJr!f$(GtPElS,nb]ch[dB4oB.ZV"C6]CbA=K,\3lTf84H]1gS*`KjSal7l8r(9L=n7%4"#H51@BL%GMOLX8?^1%&YLR'.Mr,BHWIgh,IO2(mAH2qj:O=&1*2ksT_D,-X\'nb/SXr=3-sAe,/dK\!?^+`?>*?l8j:#'SmsJ-$Tf-pJaj-M?nS'LD,47-%f%F+k/BOCZ/E7XDe\-nd4j1Bp>?icS12`5K.2J2&fXZqOBJ8&uHAI'%`L8AU[3IkB*sG7(kZKieXkKr_8="hnpkcQSZ)k5C!.'WG%IEQ@P"!BU&,1j[f%#cR>fB^G:om1"PYLW=jY1KMRV]Iicl?!CJFBg#04o1epPXt2i.;-J17&Q4^=s$O#E!4.grM:mn8M&I+fe9A=%1p]<D9kL9ZE#cQ<_/AUAL^.Nt,!V6Q(JXr^VtWg-6/7c1Lb3#AH\`dg1W;\nG0>eXXL\Y^ndr:<;G+G/SqVDSHdO-$U&G+OL$2]]%cf]?dLis0s+Xj+Vq7/o)2l8]Yk><^@kElE.Eq*p?lBZ:`Qoc!4r.$0#fAaeTWqG\;ahP`sqnb+%=ID6q]./WP9p[n@<UWg[GP%<i%UHjuj5F9'0(ks.E1@#d>?lA6S_;GbMHuoZh@b5uj'd^2XmB@s-[<Fhp0j@S-UA`1eabq!Nalg2ss+Esrg>:f9,K%l?@31e=QpB_:%%2NOrW8?jKR"YjJfSHD_le'lm7Bik'7adtQ@02VLA3[Eei=$>G&DNUH_?<1kZ<<Q;?I&B[/Beo>(?U19Ko%J]im#%H8WUd"F>qWC%:U;a+fQV7_,s&Y$_e*<Yb;,:MVgA+mbeaLgh-4<N*Bc`5K@.?p,ZpGS/8Z0bn$<l_9`0f/;4E8B;-MKYrNHEa0Q<D6$)$DdaC4f%%#MDMh!t-I<!L\fO6s%p3@^8kil4XhplUmD&F=a00):u7Ha%e8%WL0&13Bs.6QM9tDeB\D)Gds-V<b-VWeDa/aPtG<*"5$l&"#CaW%+%ji#5[#=mi5^b4M'hmd>c#t,G"mV6Z'up)%jp-=0C4.&4P(Z10or<k9[!Un9[!Sp'9`^jWklXOIBhGknh7_Zn,M;fIfGo;rS-5G%"ET"kRt(G)^=UqhikL\aQ?um\WXE@4L7NuS'qa@p_?KbfYhN#<BRpbI$L]oMepUZU5[@@ifdB"u+^4G'9sqe]mcF>'U4ZssH?KBA%^IB?n5&`j_2%'cR+r.$U'uUmpnRA^GKF#Ep7%iG4^Ygs>VcTX1Q2u(U;L5g@C`QW20%;gJ2d1V3R=q[U@IO[h1/W`8lPfai!%9ui%VOT8dB1rh;n+TVq('S7i!:Ao^4q%8tK^hrTi?F#pI[HOTMrj+(@Cls1_1/,)C<!r>!-H`@7!$/p`:^7BI86IFB^jVULF_DQHX3XM%f=3-B*6JN/_4$lifK2_"ClMYISY4,jB>c1=D(,;V9]o_fcU==cVj$Bs.LH(lMAK\Y)u0ZRhop3\9gDa^-"%I0*h:O!4dA_I[jY@<%3J%"?'*@CNZSU5'[msTi&AiRj(B(TP-`[7J=$$D:I8?aW"jgeT"b`=bJ9mW2l!Ak'!#'V;OtokBFLpB<?b3flBKipP<QkRE#!HK-%9E7;Ki="id;9UoAkJpR"$$op:Bg!T_r&?m$[DDMukmC\AqO,Plf!KnoRt`&CGc\c-WSMq@5h:J9ah52ibjIR"Me>i$mX>#4BmFWc%2UYQ7;rMAqV@7<W.-j!`]Xi(@EZ%1/VPo8E'K<B'>8GG&95I,r&1K$N[4L!m6%:aM3DsDg@O5=JHERT8K2/(rZZSUIgB/kh+;J3R%$Imef5`X#PeB4U0>.>b/-Q:XdZ/t#N,%/:$hCE&&Hhno*6&YO`ZsR(J^r2,K;6aeA2?44",CJ=,Q'g*DOdMfpVDeR38hr(sI1a<5%]m)]=Vt^"PRQbeRHN1]U)0KXFk&g&@Rd3gh):jte[&XJCL)mJF10>gs)[^jcVF@WE@8)Dc"LH;%ro:Itn8gZ@QE+HPi;uaQ4s;'c%:jb<s`68^i"cQZ)*^Xa1?\kMO<5]S'o4i,SUdAXqM-G=@]GdFsie&@:#g!u<X<:[U8@bli#t=;8O:1_[Tm[H:!kM((j>k^eGUB_O%;&J;mNV!mdKuE,">[C#6`RfMJXf876!2R574Kd6Wi-kut?q35K_1KuG_kZ&q1t*4F3i/4tn:%@Y#/MY(OLfE2kJ7N&s4s(Ph#/:b%G2ig"MBlI]3chTj>]Ygi-49gVI/Z$Q#VuM1m8Db#r-bVW)1UNG2$r&IVn,BS2f(=!5ee2f94H%n>8BGN-"GZ(XH,X^s+ue2*_HGV%k>?#@LA=C0F3o@:oYe_S@"tdu23W3eY3Z_d#!B.L^l8*Q.8*b!0B&]mn_9I3gi8bIY2QqB$fD$U,t"?RhOVZAE='WQZun#+ZmB-j%6<dST7$24oq9/u8"asXLO`b>8n=Z$D!'`.mC\2^2K<(G@'c%*DlB=,K=u51q(Z_<p`c&a/J5r+WSXI`tTCP:p"'6Rj0]^E.L;fXV%`s+JdrTd])C$E[JMeJru?X?T@Ia?e&PP\jJ$0K%;TJ]UcJ]`'.nE5X6EX[C<=K'k?7b)*VX;Z54o4,1fIbc)nO+naUQH0\fOb/[s%m3-m9OD18oa?Tg.@eQYh'YVQ^$7U[qhWo"uLu)X?`TntMVWO41fLj4X]B:^o]/]EXY%"L`Z0:"t2*U:M,_1$hG5ieAI]$V5TB>le%)Q'R7Nmj:J5ZGZ?P"SPQ?lT5UbZP)0)V,a*@06gkl8lm%TJBGk5D0t/^Or?5=()8@r7s`q(28&!h7+7$@9tp!-7H>@Dl043.b/Sh%4TUm./k5n`Pjh;(8cgBG/iojN%%G"R(2.tI3#qU4QR'X(e'T;-h]=q9d+*o<4=ZU=[1`C36s.:hJlec6.-!UqpIJ?J:&r<P8;['X%6%^tM+bE*scT]O2H&$cf\9$!lcPTEeSB%g86D+o<$5[!N'l4X.pI<VV13%oCF*KF*4M;#.!p$YA)1W)@c6jf>4>^9USt]_9hk[J1%Y<)>nHQI^"0$GY!DUK!u?!j$:)nm-a;AnC7a24HOWm&!kBJ[q[nJ[QUm:)j%gk)'";POQ3=SWdS"WEcI3B'U6Y0NtBqDgVVo1XQ1%6)HfFd6.daTKT5+%Lgb2"2dhK@@a#<`bJhYCQl_AiM<F#NRGR]Csu:5S1JP7cNd^4JZrU8Y,/'cQOm=U[==N9n0LX#m)pX?=[;Cl%)V+r=irL/CN[JR*0?CV!#VsQu^V]Iiq?PE^o'uNK4>=/CHOh".>EpU?=&GY/&;/aU("$G.%NgL_=p;e45Rg@iIVn:dN3R/GkSDY#%_i'tK&)p1-CVo!p>8""Jf&Wmja61t&JQ3hUX2OK7elmtIj>;7lANcWC\RYA6NdY,OZb9=OO/_Q$W'V'$T)37W<n"84:t^A*8oqY;%+am&Y"r-+N1P/u+QE0>^NA7eAbE1.u0A!Bl/E(Yq="Plb&GIM_793g'C<]DKS:k#9g+AjuM?kZIBE25!.d.&'Y*M`TFV3G[NAqrA%.P[]K"]!,k#)'I35)$<3;mXd]"<dFkdFN<BT7jQ"Rui>R;:LEl-<08nlSD\a"d@!qR0t8\S;%MS<hd9Y#837$I&k54>>9gPg=UR)%Qc4!FC*&NuW<a9WBV'8[&bo>_O4+o-qY.gU51SZ(1K8JtZToQg\&D1+N`9T5i\7V/$6mpMOJ\u:@3`9[-o]A$-.&1e^WqX-87GJU%q0W(g1!,e<[8Y-C,dY"e2tZn9:;?p$$'Yf=SOPH41d`?\Z(?seQ7q1o`K^R7;m)[f4%/'g]r,Vn?e8)lbOrmtQLHN*rVR%T79#Y0%Q-=Kr1%m%Ia6u9A#;V'@*4Y8\VgR[`\QZA"\=A)1:VegI7ATL:NR5;S:5U;(N,3!q>R6,I&t-^"2cO'*,\q>:q[8SUG`!5XXisiR%7>-/%.n#Xd05]RBVlioSq6X2O>f>1llTkECoHR45jo+aIqD5:=otWaebQk;T<iiSI(h5fh`k$hi[=F+."$gaX>0S*chba3>=3.5D%KY6kq^puX)KZB8`'lJsg@=Cdk)8t7o[o1Y)N2DM!hR;?r;LYVV#ZYJOf?cN*9Qk"(Z-%/S8^20fID(/:ht_hl$]C<Mh6eDVWW%^`%BMKo!>WY>D)(U`&hE"r.SFf;\AD]gR&J6228C`Na=QgV%.<F=E.QuE?_dspJJ&7cpB&uqViM8B<0J"W.Car+O/F.S(X*(I3%<%Q1%ikVq&d]"d8c/Ec:8)q[0nha?W&tF0I9IFV$A(6[nHhnSdj9l.W$<Gubpj7:cnh97USA4>5e0#6IFY\"g&=^)4=b[;HAm8i6g;t(^%X0:9QZ`rCO5]aksE=MBmG0Iq/47G'(?.\i:qqq=PDr#:a*:!9a]tXNMr0Q_rqYpNOaPZo:<]QqaKLWgH#:g2'fks?@+q(#oBKu]*%@N`lo"b_mu'hn3KCF\.pnn9:,&V3^t#jo\Pq-_l'\Zc/4,h=dt;9$?(U.Un6X7+T4Ql[/74d=K`:aop+X#5%KBI*@]A#"B^ak1CG%,DVu@d*8'IqQ=Rc6Vj]$kCZHj@t/lQ@Iu$bn@/a/h4$"3TJ]PbM[J[BSW/&(iZS>:KuWm&FhEI7hJ^?/[:[VF;dEuUI;*DkR*^H"%f<j;512ij`.U(&JD3VJ-eUUfVMjk,EWMun19lV'je'*mV!j&We4>KB>:8b/U@R_ffVB!Wk3;#6@bF5FNG,nA)8@R^ql]Q'P"3&?d%j!j&tAV[06g1!q@WV9N0_ZPkE-oR7mHn-fl<NRGmp-?VMIstk&-a:Ttl/?4#CSV[.(8-;R3b4"p&WHdK1q.0_!=S5$9:M1tD2n#(%)@mL__lsejA4WXI$(IS?q=K9#B`h1G/g&3RfA&Y?h#$tLa+=56/;(q]J?0%k!(HQSG`C]PFt=qVO&9G*Y-(:)7T<oY[9@:*/?C"_%Q)Y4JmXp=LKR*[<//<(e"Fi!PCNLBoiPM;b"q)'b&8MQ=/o[0l#YY,Lp"@/^Odj`9E)Ta8UG'0&cqgb/U0a,:R_#*%QRi2D4[)<.%EbY]bPb9ZL-9=qgq[9EfeA&$_9)%MBhVp]<`);4_W\UKS=&g%-"R`>IoLjeEE8=l8nl-XEKmh_RQ5aB'/3:)Fla:^q-\]<FaX>'o%@?=TNPhU`GG52@M8FVBJ!ZA.]+SXN?JN-;PYg58J%.:pHTLfd=b]P(fVBkRc=<35h?g*[*5ao'nVT_Rqp`=3Pn:&]Xhbf<=O[9CJ%q1BAUrl;JM91l#Pq8QCH[HrP0dSHnQ=gtI"@fS+JH23m:_Z5eAL2E*Fg#pe2R2brZ>d1E//&-gs['ZYQU]E=P-+;^%f)4MdKLpH`%=Um@u&Bhj0P+NiJXqRK=LpdJATua$<]J.pR-F15V,tU)o4`/'3I#K.^f,WKmbbu#))<Zgk+9lAPHltZ+a%L()IL:j8Z=@OQm7Y)8%,3!\k"smnjbd[X``+>:j^3`.]k#:SPnDrKS5t'<-"0&1'!-&!(8>`:AbH=!R.I9Ig,?kM3s)<fW`skMgKoVuF1/I',-2f8QO+PUU%4HHhU$r1'a&r-O?-EsOp=---'H:Tp:8t.9DNs'Ndi^%XWW`'\<g\-M6p!7K<!2B(aL:8>Wh20+^X&]9\L9HSYW=_7[&ei%,l6gRP%`><$rZ//X$[^s3g-d&UtduPof8j_:<E1.TK)/uRN4<@1#Ul>:<>QlEHdeP7C)f$;3TaK'j0/fd0N7m29pD$X=c)<382WSO@95S)W%*"oYQMbXG`(`B_RMU/h7!eUZUfTqr<'MRsde`WV<N2qon-^I_>f0Rp!D9SmOR/)j,dI`<=BbOcsk$[rI8EJAdHWXh!`VBaFUWuS7%QmPj)LgW)D;/ec?G8muQ_Va'<'er6rfGL"jg`r!]NN%Q_b];rmUSb'CXqCiZRr(=0-_4<rL=9//JnbcU6IuWY)=D;n%;mF25gX#t%M^i#cEpLEcBLOD'8KbOMP:HQ`4B]A6Lj^<]I\L3"!gKnf!IEW#^\Pe=o(Y"+qBn!L011u(/*kL(!m-\?QRu+rZG5IF<k'4`)6K$c%.J5X:H`l6><jcO(:CKidp;'V%G.(%\\rq7EbE)VK$.NEo5hltY,Irk]ki?l4cY:3MDHo4(j/rEepcK/T@icODL`#ZU+UrKW[1m5T%O)pt[@Mi<;IH`o7J?r)m:+W4uX=@?_eGe%r[kcW.PY+dWR00)`g.<8Wl7@"`fRoOb4P:iFFN(Ce`,)*%<d%jh&q27^:sb*n%CKWi%AT!PeB@@bdrIK&D*GU5nCU6uripLA^=gA>+4D_3!hM^m:;TT/0<-be$#BjA..=/4$k>Fb24RJ;Dp')9)2Gl?@Xn?^aj-ZJs'1ZGL%8kCLs)IB8R.-,mlAJ,,mogss"^3HKI23!jmY%n9-?(MQYF:c[L#7#fL1ghTflWXeEe^[$Z@]0s*&06:f\k@Gra13DF;5bKLTCe/:%S[A7Q&EtO<nA:uIdpcgK,:i?k_Lej@8>'C9+oaNjSKC)Y+;E+.k68`b@7U@ls5Md_pOE/%J+E(.j$3K$5Q9]Xq:gDr0E;"Np\fTS%U$MS?rb)9)5CWV;s5]fKlhcaXrV>p]p@&"J^\[pOrh"]9n,E"ST7?aArq/MRr]f16rD31fr]m]j+:'*#l=!drf$qnk_n)MlcU"cf%UniN,AV,%*+\QO@Jm_kdmL+C\'<D3gKiG:U$0VdW+UXTl:&Pk>?[N.1)[_0SJLQU)$.`q=VDjZG%>Z;XJisQn#t7Y*fngb`8Tk<U%)?;F&Alok8m@h9J(tQZkOb-ucnKdYH"D\!"s+;b(=nSfGK1h2:=:Y0:EQ8<tRZ53R2!EKR!3;eUoP2WNR[[X.?=+nZOrhed8\nZ.%8Y*c0<j8Y!E!HjHR*/T8a"3dCk;%k.If[NH-4ul3g!rk3bc^(2,JR?bX4].@1dS;,BYYK#4DB`jF7bt&#Phe0h\4"cQHpAqgO.Z(%!#XN-m-9J6]lj*+'SLuliqe74?!56-5O<+b$nZt]eUSM$(\DGB]NW@sCuD!gDs6crbus3a(OlJ)Mk8N61;3NuK'Cg#,^SqP;kn=&%6a(*7EH)A4[>(GoH8S2Dj^:`^o:8sYB2:dN/H#`[B&;9sal4@n2'<f?Jm_<8#;mt:f(H&#b'b,X'rA=CZ-9Gl0@<H0$u5hO)1NLS%JEEjBTc.3G39gf\AO8F$VUdK>\jk69?s"(EnI?Gf*,gYp?s)k8#m#<($Ic!#M*)oaJ=oj@"lpJP@8.$4dD<&!Mf8q+_jZ)n[:WOI%,>`N8@BCi\en/$*GVU-@6*]P`6CnA"RY/i2'N;(6n7M\sX8u>JOb.&%fjkq":oj[Od.#*E#N>+kCTJ&d;*Guc%;h+_&=O\!a1>SP%O8*[q\NCJV[Fs"DFa.o@4HL6X3X9j(+r20aatgX.iE5[SYsBNmei]?3jM*_+'T"e_K4@V)>,jTb>YUI(=ZfWGX:)$YU\mlKX>fX1%XIj-!ZGote8I1J:)^>tbOK9mIO^B@>eE@VnaTEfb*I:9-J/3NZ6*eKA9$o?7R\N!G?W&!nk(40Y@Td3LG^0R\25edDa=M*lN/S43%oq(g5(</!YCZ%$/4tQ"/"j=K?c8cr324LBS5JaW0`#.`H=ecoElO9(:J>sa4?s-ELkj)Y[F*qR]rq6=U,jWUqhiK65=^rY#KaEo"%VM\-(LLa+B!kbI>=\Iih42:#+!tWTOH,_sZl!Wme=]:#gj():kc(REZps[_i<uWLgpHjoX"(PKu,_BUPPlZ55r4:G_h_NAYdno=A%=[+_:bN/X+bF6TYjJ\[uG0(<gq8T@FDjE9$QmS\<=]7Hq++CPt92pW#/8L7_$%B^rQ@<.I/8OK61I!F+,3^4Q#B4X`cY#eR-3-9\%VHEH1,YU/9RW<#_$5F9@/KtZ/l(9\P>+C8==S$mtqe_5`Q7n_:%4(g+(DLXmQe8I<=RTT*MY/.:2T>Oc&F6qZV8s1)21I-PXXViN%5B/F1'Pi]F<Aqg"=+tfqXLYdugYP>4+>f@%KOW?3km,-%HkNNgQ:ZiZ_]"#'.GYEu6daR$CT_mBe_1^Q8uC)KMDYtlRG8KlDM-*<%`>!)3UE1+bD3Zum*u+%S4V$cLT/!844YWIIV:C?1c*^I'_m&8/f+PD-F2bL(Rpf%5e],G0hT3O;IQ^,SotF+:L:)]bojV%0$#mn$%L,J.]DWZ#"o90EsRMq"Mh(K2<[`u&='P<QAQ$<V1K<-^2_chi=l4:d9;t9@X?W2#R*8[k`8@(PMX"2*t#3auH(Q.bUi`B&feb.:i%Mb\o=l.$bg<PR5ZC2TX8OK3Y'+:I3V=*)8.#_%u<H+oqYRp<WaS5#hDFIj<2CZm,5rY<Fs%t=3A$T?50(%!,GZ`SM1h'[f^$khkK%=L3noD?tj%cIhh7=DRQ[_6E&%__UpP3"6,1)G2ZhP^T-jl-l,19a)L3FZ.4-f<DMd'PlNCc08j.agfW5MD`q2]AZ/_-:4%g:onfo%R;5a&2t0YF?dC,f-bi#KgTs6-P/AUpf"?SknLoK']iXRP+'.nR.+V3;fW0X6?!2>4Dh^-'1M1edX=:r?A5Ft],m#4=K42G>eRhpU%Z7?dCa&?SPF0b$g%u)sV/QuF6X<f=]_6?Bbalq@cCFUVrhN)K2<5?JC%#-XOP7E2PN$dj5=R2X'07l'B8488NK(X2b#/U-uH\5^S%4Cs+%^GO,"Ya/Ee`qgf[;gT\l+K3aO6?"nH5^I\')p=+bgAG^,>j<E#?d4d6q5H<f)M4*>WA_M[[fJo]Qs[OhK3s$hAUZMO7'hC4%X!uK#R$aro%?k-?'319TjZpIZJ,EaRrl2.]^[MGIn>eKkn>iB??[_OH3BF4KLL@6RZ^L[M\X1Og*e#uM1A#Dg^R?P'RP0+IcRhV#%"i$Mh'KhGG?bMSS?[Y%JIPln"P_3>f8aQ"P"MYilNUN?D9l!U4#Jk_Ib$P^]:OPIKe>GWS@Q^%gK(Uc6$.^'M"Dd\5*X$8=P;if`%Y\&YV!o)LEW<tYV#_kUE_MQD)(^t0ib!fX=3S'^A9lSt_?oqj.MDZ2:\m?(d.Aa@e7^]U$PC`s;eR<eQeqB^E#KL#=9*`M+aK.%T%[8p(=&'(+`8&eYMXGN07,]e%.M;aI+*:%)Aln^WOV%\bY0)JoO1DZ/o*,GKu3YWQL2&5-a*,Ffto#M'VRNhp"A94h4Sk-K)8_/7f%%\!'9cO--6$T$'(22.c-Es>Jm@ahFSPK<6tC"D(qVU#Fj>"p"Bc!#HL[teS?0%Tim=VE%K/nih)ZZOQq?dnQ255Zq"2>6E%h[JiN%q&:n*otJlRVsd1LGV>`i7>tZHB[$LERL.TaEd#2^^\r*.:oG4fD>r"ne1Pu[mfA+Qhtlj6*><tBc".=BILb7\>4HG<EJ+\LUPb.m%S=LdNA+/=#-s4_TXBD]L]n0b\G[is\9r3jHjbMH\GON8VCG"BbTfEPX8+3bW]RP-f^\^0<Qc]45;\G:hhJ/U_StE<76KQ"<8^I%t%hW&U6[K#mtrrDWtUD3b.IpV%4eNH[cLS=]k?P6c@Geu&V1:VnsCUcJVrR1GoI?8Q)_Rd"2#^5S)ps?,r96]/U[h0WOD;>HF``<_7%/%u[H+2>4WB[Hb$DY3C'qtTk,ggPH3ODZ"b4a4Eu"(PDY;DifA(EN^ZZ>tb</2('+hI"Ef]P%9$7\[p?Qb_7Eq0^54+28O]ZtFku%\,#ciZ+h0bR&[u40#jLg7OB]>\B*1?UA(TBB[1]of)sg17YM/Y%e_\,>Y-I!rldjka6qO\_ec%]_u:/.>Q!1LZ&M!U]1(%EdH^\(%hn"OP1XePeq-NVsiqY@#W:7f/[,hdVffd%j9XCr[Rp$;lVln^Sj4:n&@eLZdDa/n3qFL%;Vf,!`#0;A@#Qq$Lo_cI$SQN3)Aap[5%%ILbFG'dh&\<0u1];5UXCQ)[/j;@!<SPq#Y`%e+$!XJ3<7Qh6<J1,XR[W-:=/1&fPLrGdlYqPM`G&q.1_3V>uR;2[A_$<Q7J:NYE%_)F?70,2Pp%*jA!??%I]=<(N2P3qEs\T=`@D@FU"r*/H!r-c[0oAa$t(To8_njhTINfXtR;BQ<TTIoSVb1RVm0*QCqg;\;oi_*(:%J*e+o`rDA9bNlpV@JLF`'s.(3-r%OLW'/C!^->Dp.2q?,(b]O;j9%dfZF!R[>^(QLFn#dh%NdRL\]ddl>2%%0:NeFVCfJ>b8l64G%@K-AF"JU4'G'[3EL6>&)0?oUc*1`8M82>o!_-H5^?YW_,ln'$]!1n$Me9CP3V6MsJ546A+Dd?_u/IVM-ANe*FnWflJ\t<`['uI/<%gA'D>CWZS)pZOtcdbpJ8c(tT#"$O9g-5,Bi9LO>-PH"uI74"9q<@TMbJ4$LipB\ZB,#7=D8MoE-6YV25.FRPS,m=jd4<)J9B@RI=%HV@>\qXTgj062QK1UsKuO?*";)68duB2r"C=P30^,BRWc7$\W'#pl'rG*V-3(,)/r]n?0j=8R.=a\`INaQshXV-uY6]&(09eiTkO%+6Uij,cs#oJW9K`D&OQ?9XP5'Tc,+jc8TergHUj)%-kIU_`_Ie5S[iCR@)_2GWnuZoCW[4lhDK"ME<k31:#bHp3[Ug?g6?Ph7)&N%@EKS[q8`X@`e;39DbR#<(?HJ<BU@bH=4e*>:<oD^,t1l`XA'9O0O%.9'\\)9lS]hQn$SS@&(T)*)Im*S/,O!`UfRT/L7Y.4Sa33N%4d)RIa<o[`Qstk%j6AMa,\SZF!*9Pg\H=5,jf']s0uC"4!b=8WO.Nua]Egdm4.hqKBf\>Za]0Y<!OTK`8/"Gs/csal)5HF<Qc5-<%\X-W43d88,;9,ie/Hc3]&KCeqaakH%Zc9#44^TT!W!X_!02#9">;A8C&@uZ-L>dn)<C<ERM+VC9!3i=GA[+`/Ksp=/LL=dB!oj;-%ll;&C/SdM*hI?i/n^NA/_NulD>@(:eJE.a+R<5SH`K;l%PHM/i+q/+?:-eWG*5ZZ&Q$'D.WGDl''dq_SGGf7O*kF*d=ZKTB]P:f>%\,.U/,_<mC=hX%4i9=VM21KE3r+ue_Vb#)d_59[_M(sXeQS4s;+j*#`(tb/U@UI&uY!P9[Kc2)X-jG>b_Ga*"6k4ksPe1M.6&,)?%M_sdR\lO%,W;.hC\kO[Q)n:Y;'fA:kg=Y3_<2r`16+f0b-14+`otMfdJtmk'7>b@hc,p>q#(1/639V+m@`:-]&.USmCl5S0A7L04%LW0SEr@eV;++fh#C-0LTqDF[n(o0C.gVeI*&Eih&pMu,KZcA`]ZrPEnBD;MInQ<NHU5.;*ZU%Gs@Z<8T`#50+Fqr?F/W52,Tr**N%6H3%&1V4aAY;+`$`]emgdY`CBY\V@OOFpG'72@s%-5\'tii&d[I3u:.W-8X_7c3DKiUF\kT>5`P*]YG=W$"3L`[#Xd^f]=SR`Cm'%/st,Z$"lD>S&I2MV!&,9Euk6Q>bi4iMb$:JA`+:k-PEO,I.%i19@9Y.pWijsoL5]Ue&.(PP.DH4f2KRY)Fd^QF#?7$Y(7:tZac^u%Z_F$SI8%7/]rSI"3=Mk4fLgW&"8:.5in'Y/Be%SX#+8\;q!4LYhG80;k3J-00rJrXO;,5#S"08d("^C.6:eN-<OmPk6hE^UHp2%a%l&=71fa"dk"(QC[//sh@)1)Wl9I>;""QW7e:BMF<>O5:OlS$j7:C:d^;`+CROVKJ[/I*VaI%E[+-+/+C\4HeM)Jr?M0/7@0/(oe+%&=W=G9\_R5#_tq=D+spf7VAZDZrj,[%PH^!d;)^N$9]b2D1\7G6g#dC%oSFJp#OHo$"c$BBAlENk1a/6KI`R532#$#?T]2TmMI=%%_1p,7#kO6s"N.uR)#<h=FUsKD=DWh.fe3dc9ba2-9&WgiV+_ImbQ.a>onBV^^"tQ"=Arm<9VZ?l:3.q4>8pB`HPuYPbb.Os5kGfs%-'9mjfcNrt@@WQ*Mdou.8pSP?ZOr1.A]VjdPaI1"&ll=QM$rX%+l*PD;>_%;9@q88n"oq)Si[;XGR+bNeZ[@&V\&2I6sT[)H+\s\%D)>r"lph.WD<,AnVI7tQcDP8FZ)jse#EkgcbR:0LN0?9<e-.d^1ca^SkMPnNl)hqX]PIbkMF.lsEga_G)5gRjijmML`)EU"dCF9M%Ha5ZCe5qm$_,Ek<k7,P$Le2<FB??#(YeeEQ6/S+N<lfel0(i`uNsIZkBa?uND=1Y8g&eN=8aZ1M'!L]tdbVK^:&gf`U,_),e0N4:%+FWH&C#UMW:_(5V)"U/epEk67.CC8P.ER7:PM6hI&4=[*KSqHi)GW9mZ$NS$*^nJMLnEiZB+X$g9%-tSQBCD``9=M(G)@q,S2g`Y%lSZD<]uDsrQ!o9"#d0Yi#nDf[pQ5Ue9L6H;YL!"cD".(H'"`,["ib"FV)ZWe51i<aI3F5j\c]5q"NZ6:#m`!Npp<_.n.g+Y*[sc_%JCOq_)/j=^90e[r4H\"_$_p:uAHTL#@qeqFJG)nMBP(nWU.Tqa?43o$7:d0&NT8<R_%#dXO("Mo-\^oDAFYXd(b'ku-<Z>tW'E^_%fbnV[S7?/]0h2mIMPk33^`np-T-MZn,C3/#niV&omYef>ECIMk&(eIrE?#b*@GkhL+C$+jEtC)nrLtk;7PG8WENA^0PcbC]/<kY(%<)J)(5V5e/I"mj?B-9kkb@.(Ni'Cb<lS7eHP#;nNpYboR:e=r)TK+j\5h&J"LZ^)hSmkt-J5c`gTFE(qer&H9Z:!`3@p01hP6aE.%B7]8(<\Z_.8t'IA)B/>VgaZe)bQT8(,X2BnR$2n9qQ[(cLaVV*lhqM"cA6u[_6+4X>.S`J\6$@BMf=W<4/Wj%,\reYU'VAeqfup+%j3TB#V&qikE]&!Q[kVK4i`,L>%`2ArHn3&V:%8oSER_b>5m''7$a.iE2O/2dX^(fj4EK?IkpZgne"XXr9c@>q]&Xb0H>POIOdVt(%.4!<=V3GNG@'[0l`L:K*CuSfZnLdMu6^oUl#ukbK^UBB,Nr)#Dp3oPQp&*0G9CR#^hSIUZd^Em)g<2<!?13?Un,aGgVq6l%0uj%Z%d[J4PBVCSMc!bD83Mmf!7PZBY*-,fp@@A&dSVpN",FUWi\2^'8[?k5EGl_O^EeSLZPIKfgoc+f)B`PEqK63mZ7eQlk/77spn0!;4%T,W@$fAFlUrsBR0N!/?/MHpb@+Z>Y&4Au0QP<]/@&e6SuYJQb)oDKEL_WNl5Djc`#5PGP,,ElY;A;$Ut^-AtkM?iju:Ets">G11X%KQiT%b3,>Y3S8%2C]="I;%rrsm4J?[=22KP#\ePk0M&]\paRZs?Z)D?1_Cd^5JN%bE@$'hAGXUk)d$=](5PlbD:D7hmsK=,7eS,=%%Ao1<1ZGa^G?sl:L0_4=Zlf/q"q#t^076Rpq=?J`^d3rO9!)#o)4!DM>9d)4hOfj0L:@3\)FKfJgCR^0q<MEPpkt3H3gGgf^afTN%<4qR$N.2@E%6Mp-.IldlT9:3$RIudtkV%7T$V!b2<TI1G0=YY(C3?0S/6]_/_q4Bc7<LpZ3BB/(kZ.la)VsCMo_7bTZVmG(,hK"9%j=fH_AAWc/r:u+tf"FY[C&*Ih9.BZf$1(;%",B,cQfeSKlhGsOBZLg&PB9[!@Cfa`jiUV(kt9$;pb=oh`R,*X1m!c:,r[gj2KlR&%>V`BCD\g:]'V!(8R?SHs\0B(m`8422Aq(^YEFe@BU,48\+j6%@O9mD<2tU/L<,LgWK.geu.@@,l^NU,->0Zn))hgJk6q7(?DKr5A%Mk"'j.qiisQ[9JoqK]EVE7egV/&4j-4d<iZo)HCSjVZt;:d+$Hl;arkgAQSu<6@#=G8pCa0)dEW(Im6Elbp)6F$LRha'M[jlAfnH%qjPM^[%?A+l/%!X5S'-X!i&HH84/3d>RuFk8]ioqZ+CHaVUT]q"g1T)&C?u$dA#6pBjOqKg<'H"ORrNK.4cIne5RKQ>0^-$d+nLA%I9]K*p-m1U^<mh7UNmQ#QYG))4[*2k1W#$N.[HiQ>*NVP;0=0\Q9%4M!4qapG^Bj^'*CBNnrp$o,Fi#"pm_ReIU_>V[N7.71O9B4%cMPX(KZ,=hK4"C?F>2(jOAl6bdYW+>"(DpIeYf@h*lo'fLE?rQ%HX:T&!?*cMuO.!#*C!DJaK!).HbY4^(eZYHOgmog0]_ls4Y$`%.LkXWXb$<Fd"H)rPp`5F'E(%eY*cqMWPd$+qgMG+?lF$kBg^TLf-^2JAW_O<VQ["Zbf%4\C:cmT.'OB.W7josP2DM4**l%6;L\_X%Gfp)J..nD7@TY!'I[62+M_I!T_rsN.h)U7)G`Fpl]=f+SDir&cIU2aMIXI@T5/3^uN"0.:KA,TDiu6.7iu^ODTW3seS\pC**X_[n%bGP\G496VkKRVo5UWDQ&ns],B4Z'VnqqdAG^K,dp]U.k24W_`Q$PMi?aM,[4%O*Ffp5(d&EiJ/8h5,L`*7&'jScE;=Uu23*7)?Bp%h7%VafiSI"o:3K_oCQhOFr+&*-mQ'J"@TY4F2*aeF2^"B&=[>pnjuOf-C>P?[ChpcmGkn@R<.oa`.fInM-O1e'U+*q"[\t#j5OSf%UC1Vr-@]f4RSALIj4_Z*7TYuJ!qC*l[+nG#&Zor>N"%n\2]\@+2*JRcX^QX$e56#'(W',C6gsQ&AF@mt)rg53^X8r^:p`PtaL_^C%F6"0ZlS`#`qma@4en`M!$"Uu0LhMNkh*.En=bC)HZMW(Na.JjkRTsdQ"ZD5$p,Nh`pd4?4HXYuT1$=BF0&i(fQ)f/B8YVC[adN=#%AN2&3Dpa3R]uhc'5dU_`B%dbQa5f"eY%no<&kUi0NFdosQ40D:S<-r'$Xb:i!7iMo`RcW<gGqt4'!;0s8<:[CkWud8[![6_YU\Al%f,J3tFWr[&P3Z0Q/G"TE/_#HB,VHZa,s<N%#nOk#H]sh&4q)e>jq8WE.hO=pke@:i&\Y+;bO[/PO6K;?D.HOO+uZ`5:A2dVd6Mg@%=I3J'b\TP<aQ[;U5`jS9,>gtHcRIXX>tbndI4YE+3Wme%lHhbflFI.0nN#h-(7Qj:M)j0_YC[VQ+jjg)<%d,r5>N"-Jpu7/p5SpN%)(BW/Je;QBKAOpmpFL=QD<Q%.\ENH.pjCrRf[h4Zp;ufVs2)/^Q/%e7s&L>..cKQCjk1gu@*=mKqnW2=/\nFJMrBi:guUcrW[)Rl%qHSXU`91$iqAd+>lSeSC&te$HI2d+&Pl?-o!bRKsBJ5)BalLu*'%QcPpu\4G&?Rouh5tq8b#%kKBc\\hr?Jl^k'n'WA,kX%K8OWJ%[:DLqP4k(V1B;6mp8\&hZkMDMnfS?iVl0(#^`'0/T+<*S"8':ik5rJ8fh;<i.TnFZ+54O#COnWcM@Vl;rj?tM'fUsKp4h_uF,-]M%fV>X.I)Ws^qd<F*V->Q/8%+TW%p]?0V-fk%<5b05WI,.:(uPYVA%GjDPt2.3h,*\Oja%ND"hOW,l*lCkCN:RD+MRSKT0*$a9ldpW%KSbW^NT?\9\eKX->eXebC,3Tc@RpD.GT5&iF<t.FTXY!,aNic7!7jUhn#*5hB)+N<+5=:r]`+aM)R2<>Jar<Khp<O9'K4)g(Df-S%ZDNpu\U'Da2TIr/XpFLb<6ptq@jC8am;p"68h9-hS>`o-FNUJb<8t<gY\eQR.E,IL$Nn;(s#:SF5Wh17QM#=Tmbee9!aA_:3:2EG%(#(tW"02N]4.;T!DQAqiSGKa]m"IAlJ]34PAk*9-L8@M%3i8U)U#q%`6.=F)USeNVG!hT3!eBqIaDSbql'[[rS[oFM!c`a)f3ORr%g((n3b'Z)06S.l)0S#s)jPKQc8E046bo`:r@pa@!mg%:ZVu"bEqR%Xl_q,hpE[0uuXc17ZIVmHr3$UjiE>Gk;iXL`;/Eu>"@=_?)%l`Cc4-GJ71e.nV7fQJPLduTWM`2+XoCQh2T8@am&]m`7\GkZQ9/P-Rg4PdJ?,a2gjFiegVKdDnh]rjH0-H0C0'4,;oMH(,H#FCH5%d*GW`q<)sl#8#W$TJ<Y/pR%S+D*U:Mg99]6Qp1ZY.nFW2<A"cK?)([P=X)CY26a!M!,i/ch]A`[54eH!8E;,E7RT@)^&cW(%[<Hi%J);_pK-M66[j2Q!mR6,!bRmAKX@Bu='>G/GfFJR!XFQB@\e2VGL>qNuXd8Po6_miiYCkq%JD!/Y'm]plg?qb[!`!$u:1Si9j)JBB%jgGAn03`X6fjtDt[-^j@!M_J0U)@QlJCd_Y@&!S<eJ!bpiCRa=oj/(<!pR]=:W"M%jgOsOI.<c%/d.Z'7&?,nbAgZu\jOB1l6%<Z%XE$c`CW<l9'TUor&R8E&Ek6`)lmlpZ>sg+s;][->drK<9geICBaJIN,q[\hk(LX#7#sl[0U`'KH?+pI&mV&fD/?DASd$[:4gdp%j%RJVs,ObO:ORI<.k@7,?-V@i#=<]@N0WP`pm/AQU*7!N*]T*+?IL#"55kXc3aTNM(/!T9Ma#oK(8H.\tGQqOO@^$;%0e>+c*UT:un%h.IQjE4$h;P$1n=4TU"Jn:KW#D]i=n32a;U!'oep1In`\>Uk+CaYG"NJHI?r/-lWXAC+oHn7A#fJs-\s!YI,]/="X0&d*!'(emXT%S&(_"8.sfPb%qJOeNn/T6]M8WC,,bt(^o54k32i*Y!JrI@BrI7/qbD."\-D'TboT:28sNFAYclGJ2E]!Ns]AE7T(#Z`^FJ;Rpo"]%_'P"B;jA"Mja$7YnA7$.,HdnlM2CrBl0"FD.C#$9QJd.V(CL^X:.`FtL5JKW14W3<P'#Dr/4rBr!^g3f,I'CQ+gW@qA,[,oGGhR`%mpG>l[KUs@fS5S.1"0LF-&)<:i'QcjbRZTTo+l=5bI3A3b(S*VTU-l^5)a"HRs>/d#+0iA`u=5*If)Jg^dE8%+J-!iRg;ga7@$Ut%bX6<OZiR0A1`:C5Ff\B7WEAm&>?Flja=,):iA:[&ng[.JOp/g)&'58S70U"jcuIhQXMUeq.;4\<d+ZGFF$,^%X2?T!"1Of6UcOZ7%/A7Chgg_;-++Q'1Ra#BR^_8GhrkQ+HiBUl;\]OMY9LeKn3i^fQ>N88*eID^2iWucu#[.OEg.'RRZGhm&P5Mid39ml$0oO3X#JBeU%:L.HV62X<&P68VK,1t5+rde`I[oLKG.Cs%L8?hmi+[;0CAEfI7N=_#j@NI2s9-oEiKRpM%D.1ZmO!%,XBqdP+\N&9!"5SRb71:J'%O/Kck"@iY%:3dtlKbEm<"CFgBKp-Rse[5)_F>&Xk=R[9WH_f6,Srs?]!n,U,EW4E'`deMHWT[!^=R5]bILr^E2Vnu7!_.ic^!Spo%V>9Ah7d+"u`-P&nVNJppqj0q"D+'"J*WC=6RHXa?7>(RIYr7)>`RV:LS(ai1q?"F&Q2?>_[a-Y3UmM\6qjRc5mXsnEmVodHoA>Ae%:.)7X8h.uD&$Z3T?+5WhWBCJ[ma6IJE%bL]o[QG@&5#gl/pXQAgLqnO.k%mg>'c0>T!G=@!Eb`)T63=b7aLBVUmC5R7f4%NR&EGH%U1;%hKiUQ^GQDtd^G,0Fq<^M*kMe`@/mut=e5hOh*o54R(Z9lJUj$`q-MRn_o>]!,qk<)X@f4U<=sbdm_7B7$@8b4H8R^RQkQf=E%bA"hT*ltV!%ZKO)SfbLVbu<[#rOda8V(kJKMa;!5,[b_#TWKL(I8USa%-O7fU1QbOE>ggE%cubj'*Tg*^Iqi8LmM6X?i:5;5*Bh4%ZuHc]iOM=TRGNEh0t7a1l?3\+#H>VM!4\.iKQOlXA1!J21Y#%Qn>Q+WWhp6IpE&5tqo0^A*ia4A\t1VfL_qVp.WUSYU'1rWd&r8Y%C`qdV[T%Vq:1ZMKk/V#6)uChVCfu]S7`E[6A\g:hkbq*P&#:`B<jOQXqd$:^LV><TKA(/#KAMF(QdhnmWNN%ur"<o[eCW=#n!0T/%!kG(/OT^RB#S/#b*4L_;@>-kXB5C+"E\2%qL5uun'51Dul+9tXR7N&;Hrd"EFHpU-Rb8bXmaU^@Y":Y<*.a)MZ)g[a!NqIhVVtKU%'`R[C^9eS%oi,EQnek!868/RCObe%+!RjrN^Q)eo&o+m/P%.=oOQdMHCf?RD0RYkA61#;Cg-7subIt5Hrik-As6N_^cT)AH=2<(U%:g.[oCg>=*hTY$fEC6Yr\<o&2kPI&+.f(U;_t2)*K]nui)lA),OBY>.^$2V)K\erJOAIa&<GHDj.urUNhKb\[(j&KejmZbG)J&FC%`L:sX403+clcc-nCR=:=jZT>VmfC)V:fNS:%.el@)6@E)QLJIg*IR"J9D3T0fka22W>J:*Mg[=Tie)AgL0oUUn3ld^KOOHrVpK\L%E+iCNJ:UNu6sbNt>#o7Hl)sb+a,iEC"V`&seH#6u`Y(pC!eCq61[H&hS04]H:IAZU<LYmL*Mdoc1:;WUr2.RLJOsN"DC;SuYGZIj%>coBg^iS?:JOj;O@ic/h'75l%6@G%L^XPLIdmee6;[s,h/tSsRPGIF&K7C4JiN&58<,H"mb5+f^<3>U&=Gd5A0\b!3;#OiWI+GLk%"p?jZ;SFC"3OLG@C8,Y#V!t"]c7\scb(45"OO<gq&GaQJ&9Gd"'2WQ*n#LJFMj"Js1qK==9`^bLn6f!6G=>>GaMs5S;%HcJN$N>!%f&NcPg1I]'8i)A=<DBT/r1K=Z35BJ0!d]m,f:s^57K9@"-kKk'L?_A@dZXYZ:BT;Ip[@3:h>Y5Y",r#\<6hNobSRcsJ1--dFm3?4%gkbM>>]>ZC:G'+-J^>5>KUMF^>g@)Fr,&)QU/?jS!$\iOC]^X9H6Bm#lb/:?s3.\,kU'a$C/+qf4$Mmp1R]am!W8JQ'Q[MI5ZA3s%TB;OI5#ulJRO+gnYg--?aO6gA*O:X;O=8`N?mtqQoQA7`l@_kPAppu/ge.*X]Hh'#``a:%`Z>0>]pgh.p`Um)TgOn5nPl<99It+[%9QuJGg@`D'KAp271"F3c%XoP#S8fb&DZ/G3=B#V583E=)]=NH_CrRHd$,+BP7:M6fZA0__OQkhQglWOqd_=Sq%sdPaKmaQ$*c>$]%ig?[4(u?1SI_&5l8UB+Cm-Laj;gp-<NnL*N"UC03H"S6rOMeGi=97+TGk"MR"K[9?QY'X4Tp-W>0sqtJHSQ-p:HA0V>/6A0XOj+g%QPKrtZCbjH0!-H<k]'[3T_=3r4@8LRN)h%^"6Eo#`TM4CY9G6Y(@P+XOf$^:IBmHr\98%a*NDs:+]$/,!J.i;5$8acV5chBdhKl&%NkZg$e.hF=qiKKuVS"$:es1qCLWi4O/AgOqYg3uPELGkZnVdHKZ;W]&f1k@p?k[.]\@D6#JR(dFP(j)[QSoE*jE\<uK>Yl@iB[hH%e><G-`Pd;*.boZXTT?`>ja!S*9+mYm*J`&'71H!jEq[%Xo/m3Be<k<(;uWg5Z<<))d<i/>4\pd3NNXk;i_[o7[]*SqL?j6jmG\-P%r5P9F__[Mrp4U3ts&("GD5JcJ!mB_X.EfP_op)r36$)#/(+#WQU"<[d'hXZ@Q3Pt.kUJ5Z2Chk@FdAJ=#]cOk02rB\+(BcB$;RBW%;>GiE0BK8pJ;fsOlXciZ)Z$3*ed#.>1)!fN>\7>ZJt*@Nlq`aUO\'n5__&Z('0#A_G5aoIGCs,GCjitId@%`>)_ld8^q+<6+P_`1%)VjaQeU)DgF.d-&*.lBE.5=XUS@!?YLM%j;'?@LS"&.-'-VI#ZP7!4X6>>$U@S$ja>1ChCFq5BZ;C-ZM!+Q$Uk$7CF-1^U'.Z9JU%ma'DFq0?@E9p=nN]C+;nZ$?$7&)ZEN0LUdoAeifmAaH:*EiDObQa/><;-sZTA;WoQpgm`"\PAJpZF=@E:bib\\D3L]'(HMuRa/bs%Dh*o`R56ckV+$e.l)`pSG-9Ijg,-KPat-]Fo&94>fj7$*WF:/(lKqc1=W(X-j#Sm"$lqU_:6GciHC<q!ONPLO&P+Mh%2F(NNG=Cc%UuRW]!]1HP<S`<RFst'^LWZn5ktP<6JD]PPKBm!GkWJT0AJEC?<>IdrH:%u[1Eq[=UdT7gV>MDqPpjPno&:4F`0`(g!UV`&0GSFT%>f.8H)u7<-bkr[*;^itK`5\>8U86%)hD&0fSe?k0Jng<uZ8r:+l](MgW]M./`/P8Q)B))2q$Q/F@2=)2?#6_]k+/&S?(b)r9Z!rN%:8MI#3Y>OAh.Z!`VXXTblhZoI9:"Y]00&unP7,f(9n^90-ljQE*0:@;h6Z7,IAmum<f(%77/q](oe:TN4B]R,)%jou5L%H=fo"gZ%)7l=ZZcb&\)5AXUCAamNHRGL,,ki'Sj1J@pQY1Na9:HqiJ*o7T:L,0CE50dt(,:V1oH(Yrq]Y%4b(Lc&QL+/Og<-crJ[%&iZ;*)4%Ao*\_SID<?;iFmb^_/T=7e>Z-G"q7STB@_:1$]V<Tk%</\[6N>@mpG+hbL81M$N)[!bAtH-o#8AmQE,<F(o.IL%rrlSX1D4Z9*q1%Ml<pl?FDj$bdljHN)$>_TDDtF!Rn(2I<Atg34JYUlM3?u)L'6'bYkOl)8n#-Q9Ag>E<0Ud=Kp?(h,a>(QKdf)rcY>gEF(SYm`O)W%6<&$mapXt;oCu4'WQG,55bLhKm+/:*MX.*:\h%%,oukcc3/;S*7aPXG-3m)0%?\<C(fK@:iDo==PXW(0hS$1!]lgMCQnGL.[tu#b%1co(VE+=mn?C$*ipX\K$dPfI8fHU5>dq8_F3rZhbpr;"'?I@VKbOs&a^%;>X<c^danZJY\MB>oB0u6H#4bBNWBe$opF1E34(%%/*%,?dT;JHDFJoV&KoCQZ5Dg8TbRY9ZHmXMg7=g:EOH\87tHC+U6:+>S9[7_d4RS%u@=@6Sm\WWpJ,T&($KfWGk40_OP>OZJ&MghaS0%dUnujXQGUU,0CilX('XklS\LcH61b**RDPPmPZ[dQRKP6_IhgTO--\K-&GdMZ1;'t<$D$Og7Zui<+4iS]2_9TOXXQBe2W4(]B:o@%obNTDDW6@oL_P'!.nmt$41f_0S+AXCW"cjiO4el,=&3u=>FV]ISFK9ZSu8[<\D3R//JIGU!L(p$>fU_d!(e`(#D,@ppU:797/-WQ%`,mR3_Ab[.N`A_lK^eCL(7P^S.]0@Op[Q12eue?4Y@-lQ$9[s&5HI1fiPfjD5CpV7?-4XX4<)rFk#1JId^GMIW^q?*7!)U]5+?)0%<P*E>OFe5FrJ?YTMDc4(S<7jrKG7((6WkDlKpk1oO/[mcLM_u2_jGd!>f$k)lFqj%"@W1+W9oN;DI51J%uD$i5um9Wi>F4,OF+Me%2O6e#^t67fMBqV?N%<"sB.>=`\W2+7(@h:cf7q$BH(DQOD@S+.ecB'X7%:6i(NQ?[J'5gi?<U?/3\Ik$RS*;>mgg;hiEJd0MCsl^%lNH,RC(\G,h:nDMdZ3Mq&GkFsC(Y\SOBZ-b]k?\P\]Zj,fTP0oj54@1i\$u"jK[gcL:22)!>NOb\u,S8\J`!kQPp^OB#%q\U(`u-%O6Uhm^HHkB2O>5U("k.7^aqL;!``*Qch$mZ.tHViU"H9"Yhs`1>S?Fn@D&sDC;[$9KMXE,#eb4=OJi4cDH">RI_C@JIbS/S3p0&6%\.AU&"3KU!d!uH-5K$1'FR`0`D(9C(DP,N,/eP/%T!_/Ce1%R!"'M?.$QDsR+8`q*LbRA4IbR2_4hK7obXk+4*^U-"ZJ\!X]h?"N%9&):WkmA(OWg$_S'Tfo8b:@`YLf!8ZDdfL;n$,D7&;GY\J3n[u.`4WUm*Hj[Q?C%1dKD#"\ulD<O,\MrXap7ql8@\q'W[+qNr5\.%ArVt%S3@KnfAE&Q?3Y-J"/,kU!t"qM'4WmeR5gO^%8/bOmn((%W`#SJS*eeqdqol,20H=UWa?<uC`CaIHS+%HI)rXlWn&MZOo=Go%H&cd!As0^#M-ne1]S]TS!LjW>m\pN%F]Fp0&M1JEUt9?!6:U3cD)n0'2D+1r8\EJRo<5LKR$@^gij_J$5<MA;^9WVr@qLtiL:`+^%@=!r'Dn;&)F_AfB97HD!W(gr\CLFeunO#GG+e+@)G]Ii5V%LpRc`OTob@1Xe[7E$?Hkn?J0r8u^\o7NqO@nV%$Y_:;;j16,>o5i.%^"?>`;X`Gn($dSgN+]`pV8cmt"t!PCRE3!p0=ABrO!dC4Lt"#2[@F'`:EbRpAe"dSf<M8ES/@s9lI'0SOIj5U.T1-7q7hFLLe:n"%D+_[fZqA<<LU<=$A:4O':%sYj$nhORVl5"G`85OWJoJI8+#P^t`LEn5oJQ-lJec18BBHi=c![EfS.?npPYP:a04Y(IcS'4m&#[eF%`3UjjdGE+49&H6X)%A?$ZW>OO&fEhTUI[eB),tXH$kIK!@@HrU.@CoN!Ya*[Of:`5?>H"PeM5udRM9!Sp!WNlA\iUI#'^)unD<d0%mD)?<A/*KddZ9Ye#+DNoGLEEp`K^?E#.Kl8&%,',FFB(tmeO!G7Tgc*$4e%q-At8nb8o30A78bAcjmu.1u5JRAq:TUqGa"U;EKRO%6s@)p,oZFMRZr3)&)?`#AsA.=P.Hck-4L]&[dQnVG6V)U"7j#MCHO8)%'J4h*=]=sZONJ\N&:]_rM/g!FL,4i0,o3:aZPbC^;UU$%>!(V##&.sI]'=maUZ6">HM?GIhifkqMPL/O;!bg*)\[qr_juWREfkr^"_%%,20>D[#"ZNHH.WRX'[/T2R`mAh5)0KcncIZ#4dC.0%;O8d>\S&@Ne&J8-C9hD$?C8DiPQmPn;?jXl-gSRs=P%ujomgSp/%ef$R8KK@5It.kFS`q+htnb9<`6K@o^Ff+1bIZ<Wl5_M;Gp;1%jkiK4.i[`!gIK`%(aIE0U@no.F]Zhd,jQm.l/;0c]K8[U3`g\5j50>)`15W[mDQ;0G3GH4dQ+4H6.aV\Q$k1/Jh\3HVSlT)*HgSC%ji/#Ab7']&NG.mL4O/^om*JnL,5jiH&W;6l.rs+Z>P6/00ps93bGsjUF&!Ju_02TKZ\4<h.#@!C,H`Gf0':[bH!TGd_fkE@g0%_d%DO&HI18P'^16%aJ?Z+\>Eg$jVaYA^6hdd<8qGi]%)ceh-Vi2lo6$;YT_\d^E"bq;oN01d-p`UED-c1KE6P/BD&Ii$jrmlD<-D]2T%l""I+9a[5)*[)4<L']3H]X0,>N__o`Am<-#S52McU4Dhq2$X<T5#'VqM+9.fj;!G3rq@(Im>,[V9Q&(5PL/Hnb]b1ua,['Fja.^`%(QM>TXW@u<lgZd#,Sai!jj(h;d_*ekUmeP!/2p0PF-(EE8SuDFpq#W1R"DSO/kjU$iiCkeZZ=VoI0A*TDT'`I/)6392D,kBN^mN]%&t>+A54+8fmhH)ee=d,e#fcD2,)=_JF!WU7O#CQL)pgUmXC^:qUMW$5/1@*TXMsQA:AVHNF7G!J7mE>=<YhFRNeL>+>8t'O@Zj=+%'s1L_;.ATIV':<@2nkV%0Y<o+@`$o/Td;,jn^hH6d7W(Hq6\HX`Talog_#`?C]u9;QW'jMqq"\l`=Jb66.1lFMHH1L5WWshmnj_V%"l7ABh6TkmGtUaaZb#WG.R.=mJ+5P?ZjD')ZX4C5(:!7Rg`(7G4#!NZHmlQ^OffamO512>keKTmBL58CjiQ94L..P'<]?Yb&?nB-%.,tP=7GS9F=@P`?Bgr==qaL,\3"M#4@KUgl<VKB@=X/<8D-u7(J_uqYq]166<;8oE2b#Tt9:,L=K.`E`'^NMU%,Zr!?f@02D4hpG%FWmrW:F$EZ)_[e)]X$HX*897#T"lr<DRL=DccE0-m&f-L?V@/26lW6]SB"QO+=%+M[6].NFD30*P1>L\f))fSP)9_ja=YimqqH\4%NpF/%VMbara!Zr(oZ8jN9sS?-WV^Y\4mbG)=A6?Z@/h.RhF2JSC_*R#PIRMn`g[6afjk7aNfn$@Au@]SgZO2/Dmr/qp.9>Kjo>.8%3dd8bb\,e?4NlWSLa.]"Po:M<73Nde"fdXa@bccP!O6.H.u<h4>VcnA5uo`[ONVc@o*V]-=K:%od5EQ*N[p;"&bPPo+c/;GqeY2V%Md:6-\u_0SF@Kf<P/7ZP#6)350jS?u^Ja`D/5\RMS_G?EgWQq8,Q\_LD\%d:@J(9CJ%:QlcBWCr,W^Ij(]NWSZ(gR"J0@Q*l'?O(%lHn2n!XB:5.'eB)ql/3s&!&@;0;QB?8"1F-%i`&H2<DW:NR"sV"dr?s!&tZtQ;hL\!R<Y`SH2:D&SEUr`qUk()nbKGOu9OR3!\Z+%@Ln9$fi5(S4^Nab,,5fSL'f/J't=6Q-@sgE5>5?\iaJ##(3D,Fl:`?-jDsl'85[BZQ[N]tmk?dRq)B(dah\i^K'CN02borP4^&tI%&MF-f"^cC:1e\"1HGU409T!5AT(J:gK.I)-2WDNNMsPoW7XQ?QdP'?W;HY[r$u@JD'FN<F34I"%/3#N*'iJQVFbYWr5uN06p?+!f%/%^s!VY*Uj8k`)W+qTrsF%#\:',-"_7sYmC(qFJ%JL"ee^4.'CO"e.\Mp)^87uVG5m@2]`QrkS(G+#?>jAmomeb_=f0!>3NgW#tH%s0iY7b"JQJUkhau!c2\>]9&kOp"R(a'P1&aF(U@!2lK*pl39(/VN.d6<m!`_5Z)-i%JThG.[7`5?@49)#=.oK.bCC*2R4mP%9Y9=%h[sp<.Xd2#Qjh,Yd`1(k\5MU4lB`n$H"Rc_s.Qo^FJE_OhgVLa!?*m,9'>Ug4&d!`S.>1(9uaCrepLKu\[k^N;Z$$1[d<%8!kC7r%YGu'jhbU?Df(_t>']c/HiG;'<ea`:oK&@5e;o0Df*Ds_,oi&"7p$s_tDO#1,g5.d4_1g&7F2b6(=erRRZ/@.Hc+I1+S>GoQ,&HOB%9Wkh"`3$'6E\ABYCSH0G%jc9f-#Z7>X':f@(Zh7"N@Wg98Z.q*0P^>6SQq;]"4;HZmuF;:XOYp&=.a2LB.G\h,LXi8caX0okd5[Z%UmZZpLNA4FW21i*n"lcHl[5r.1e6J)q.BVG.kAkZFsbBc7")$Y-gN2i*>@A!E&OQ#dmZ?e8r;/H@e2D7bXLU]aLPfhjoaQKrq5Zo%S-?e`PnZf&9nVWeFUNLMgSlLN7-3?'aeD'<r9@WQY7A_K>r=AZ_"fY6`TV5O1HFi]j`!XFE8DHI?GU#Ji`Xm#<ZeqI4L9L<NZlsm%Qmr`M[&?5h,e0P)O/Eg>;rUrE%AnEX'@0c,)!d=K&ZhP:;O*brp-;1Ad;'+g<A8f*VX8>J0l0,7X1AeNhBQf=M.]CH!fQ6ea:5n4%4)otna7S4\Afs`-e(J4E8Q'(HZ:a[@XGJaY06,lWi`VE!G,gZA'igr%jfDM'@@cU5Q6XqB3)E:I%7Ggr5197k.Q#pX*uP_Zba#3#%jKdN$gT(0.7'aS1EeGfL;uMPI(\Dp'??P'hQ?nU>0q"3Ce=4],A7u_PC1W[0iF8Ddcs,"q4eE=+X]Z2G^l/skn(d,j*8,%;:&F)A%>\[_hXr%[T]u<$Zb5*So#!=nr>]0/7b1@#(]?>[kBkNbZi@TA)'ciU@-_%P=`+?`rLM8ojdtiL613b@Zk.;RVISXV4$C\D9/q`3m%??ToJ!6Am'>60^9H19!K?W(R5E1+he8`$+?"^L1S$gHr!V4=f#>L<A3Eos@/X=^9=Z$L\:>%`&1FW0VU[nFE!DQggV^U1LN;bFjh%Q.@l<0nKmjbecP=ChSlo5_0CO-Ciogr[kkG#\E%n6l9L*X]?maRKVrR<U$U1+Zo\u\LZd#(oso1ar,P$.>1GV4-1>Gire=MX;t$7%`%"MT2>3_LSeX<A9G'm08BEeN867F33jb\98&cEJJ[hH?WTktebW,3O]9<oRE(n"GjRA![pWH6er.Lc(qu-\@Z)C)X"OB2OX^3t5%H*q8()+G-#]Bl"6e#gC!V&?->AsS[;0;XFPj,>A2`>\A=_ANN$jkoQn$D`@dA87/f&=.:bHcCr+V19hWRUa>T/-WUiRk@R6^V$n@%W]A(g4KV[m]L"%,9Hqb4"c_q:rOJ^gk9@+Z-6CH!@kn;^Mj8os<Vu<;\1lup20lj5-X>I^%,"L#G^'=&e5_!Z9ZFIL:qp*MN_s^1%ST&kZdbNHq9WrDp,91<XLrhI_+Pm6,52e$TJL[9Pis^H$=IqcC(cu!DqbO(,-=B0^bi'6L*rb%-N9On4BXhb[Pi8NB]_h5_n*.$W%S8kGkITLH'U0NlMrq7\@mp_1E4fm5iK'Fl.H'#I?]j\%bA3rIYcB8<BjPh<nZUs(\Bh(RS77n?6]?n#GM0.rKRW?O#F+WIE&T&H/%BK1BEmoh;84E3.<2e&f)G_\*]S@;R]b&Puf^jcNcgiK3Y5>KC6cIe>dHAS[dRF013^q6J^1oZf_'.k9UbE+YOPKCgPnp^LN>i%JE%h;j'_muW`P?q(%im>6sg9-hW36?af.a>PoF";n7f@P#DP>tSCj+kRWD&%94bc25)b6$d:cp7-8bf2$L/*mJtQWRGSQQ7DVh=^4Z@%>GD%O7CKprFk56&I'_SejiO>(-n+mVRO&#2N;4CgOqW.i6:L-"k*oM,lO'Dc4,[hLAE(V'!F2cr\o.3,Ebt1i9!VMB]61-'LPrXs%<qT@/,!fZa[fYIoY1!N;ElS!-B^hI2*fd.73"E!*cG%b&c+G@21Z,Nn3/,<r9:po`Zh?pk?dObsb4<t&o9=#oH_2[$7(BK:WE'T+%r05&ZYTa21gPJqX)h9??JbD,`e/DK=9a.B-ni\us,M<LH])DCoejqs5/VM*3GBt<)]T4G[nl-\L+ftcT>1>P`,%@'"b1R\jF`8u`%*c54lFL9`;f>DRA,DW7&Ols;UHViC-(14Wjnl)h3-i=udR:`G@N?!-<JZ6lcqG:$$VW4j_X?j&#9gsns4=$@i#FXhC//0^Ubt2cd%9ac?>[eA3`mg"1g=enb=a2W.X9fr>^]"Gh"m(^M?:iSfUCF#k[^'1J[%P<e,Xe1LR5K'TQD'-X^4@,SWlkAanY%LE_Z_F7n.=k-^%7l!>7\OPk!h%!6&9T:+H0Tqnq#bQhTZcj]nQ%ffQ]1fNY#o,sd[oVK+pDp9)'rQ6(/>]d[npsBnrU#0@?U*DC'Bas>X07`SVSIGb%dkXpdRC]3c1<VM\(6ap*A#5Sn=`_PBF&F2LGOp[q6c+`92".aJBbG[-\B093/1HUY`):K^9?CpjIDrqVM_Nr7d)`I-2E'\737H/u%'WGP/EgkXN4&S=b)b5!Q)<doB?hXFQ3NmOb-tna59S\g.M7Q:S`88hX>u%L%)M,f(Z',)o!_,/eRMWc>$>:DT0rj\9Zg!HPBp-\o%n\-!dTX3Rs3r<4ErWKI=^V=Ug,_;8uL.IG<eo`P!_d6+J"kn%R@p<YN\g.]dC%q/94RMjVqH'oo0'H/mU=g1?hH`7!F?V^_>\ReA%5]OeD;tWqW*EVdd(ckCB3CNDfcR4q#Y3aRc%*T228=u9W1=JqUQE=T8h6&TYqs#b$2_7!]ViK1U9]Br"B3t/->nK@A;h[>uBLX?g%0I6cUd1"3EbV7s-7:m#4>`fom/Mg1l``T:;W-fj/TWf[Tc)MNZ6A/8b^.P!@'NISlCpU`bAXYb)At%[9n'kW#mt!Ide6TM4hI.9F%'d+;O?kk+gnVOdh4f`@9cRWn17DX3BYB!ZLknXQ2=d3Z%l\XDZ)0'&_H;(q(7Z,;ek^34jg6=\L%'>\R(7V/oV;##s;p@E88;'pk%`n/L?H#m%TZf]tOIIO;X]+C:0pr`$Sh)geEJ1N$u]M+rpn.Dp7A_u_qCci7@2B[Y-_?Ap?5,/[.D0D3gI1D(V<HRWKY<=r.#Yd55%%=fkj?S+U5MMqFg<rfFhY\$7gonA>E[jGkhD8b-sHI(4iXtUE4-HXqkM>q=@[V^%C\0caJ`.pjAk$,-+OZ4;a>un/IP(.t.@-gs;%Q/&_4rM4@G^F!T'W2m4Z0l.Ts?E(co!+-"k8gQG9d-+#'#s%!]\>t]ST7aJ$Ld9+G.M6=2?SZXlNqS#Mbu0O$%F0\lU^_pGN=e<r%gCg#aTqU:@?:?Y!JT*`ifoR_=`U.6-1.]>)#ZnL8KX/WsE&M71U=OM;d,TEQ;UPir##*Ddjt@rOXSG'qMg>g`-M<+n<'lC70,);1%(tV?*L=-953Q)`U&&8`'6*MeM#-/FLiIN&+?HXnWHp0ugjRPS>J7UUj,1\"EV#:Sd7_O`(1A$U#ab4-FrN+,YX0#@Ddu58GM,g:A%3tEM2l\?Cm18,FJ6OT.=>ies_'6O%_@Nas^ZCJO`&6++M8fI67^TqcJD3$&lU/b3m,/QDi;r?=$>>8Fq)If>fG7TE]>'hI;\UK#i%Yc\>'hbG^*;kqL&*+Q($4+1u.lD`1iGH_^U:m<RSO("2]gr@ushP)spI"m@\ls,UZ/bH#][pH?pJ5GkTkDk/hENLUoXm-R`!*D"S%@L''hTEq(N(6)S;!6X%?Ni>Uu<>t809O%bne'\PHq!fG3"\a&:a95#WOnUVc:TL'jXgO_Z_bY,j.fE2+n=rX3-c:efWrJdQ-&mU3%Kiq#P5i;"tH^-K5G2$6c*B5Yc(c"_N@c@V5Kh/<)S=WNu42MAoa)&`AO*5go)01?O]f/n%p!KB_S+Q]D5">!6^!9\Plm^g&kcuZI%,n\+IQr_TaMK.k>=N)R7Rn^f6#=;atnApd><`,YXn6Q7%p/B5-F>D4#--=*]RIXM?^$\cVCaLIM<oEjQe]S&GJU-.%Dg=`hM)k8O%]V^k^Fs.g:0I^T\s14E[.-RN6dum`b.a,:4oh0-X5G.M;d%&2(QPU$(/=1a;6)rH@4]5FPoRS9A_V[S=B@,#$Vs_6b-3cpX$4sP9%2[tTihE#Uh-<!?-*Si8$]FiN;$GGC+]3PsCgPI4^&ZFD15?3M#ZX#p>=,Y%;H<k.N^"Oi>53Xha@>81XD;/bJ)BtO.>YcpU6\L/4%[]>@"=\JsC0h;#'Mq#=>.@;_[d6d7\:cEKM671nkGIV4_eD,If(O=GgeAu+5hj9#f5i(-&,:W_iZ4ZbdglhQ6&lkRUZ<o,+L^%rr%#bG^r::,__:iOYh'Tn2`dF79+fk*BX?Iq2T,2.SO&IjgaU-V17h0CGs";))6%I87nk[(]5/Vn(*>l;Q/ZiaH!Zj4U\;3;uX\s>`@%I_5IYAKi$IqA4d?VA?Zdalk4M&!)?cVY@Sb5+ZLd6A]>2O:lCc'b/e>OHGF?IX)LNJD=#Ogf&b%)'sG'</R\"U7q[%WBFH'_G5*F%+%'Thg&j&EmD)Ca"1#FF+=?W^`;s[&)R'shC[pGfW$+Ql)*8t/;J%Bs]8gE`o-q81(DX&KdNn!/#8I]8N<3&+JB0Sf<3um>.b]HA%>JVu?2&oRP+H'LhYTqoU?-^2Wa>-8)dT!U"lN7q.8udcH[&@Y28p=.[.)j=l,cGAhn/_J'U+KO"77EuYi\[Kjf4#(Inj^*fBGBbP%olpb2OB`=47&+kcGZ6r+2M@GAAti.f;LrC8d2n+3BFg%q1k'h`?nP/eM1n\d"N3]l`b'6nW`Zj<FVc_Y'91mM<+I`2J4YbQQtR2R%/>h6bM=s3#rq4.P7,sWPF#+J(C7X1WXZ^7!W6T3/)V%\bprap=%[>aEMi'tmA]5eC;_B<)W+_\<\"bCLU/AsWqDq;")A1LHoJQ5k%R#:UUW6bks8pQVX-3`SnJrZS"&aM&28=,R<X'KA*7r%gA00jIO5i9ntL8VRq7&KiC2K*c]AZWh_<u=D31htT"pTDVO'KhC@*j8";%#`G9tNR5:tE1tot<%BOQT$I3Y2,+lO9mXE-S;Ac=`=_P0I#:S>,>;0%[:WX]bJZm1PV-RHOc@AW5TubmUHK1[d2prE\8<,^@&-Ah%[VI1VOiF@<*&'.rfI.W.VPFf$&^a$=j(aNdF%]PiPoWIh)E3rGJ@-h?lmGZD9M/g`Wq`FTAfR_[C3#K%`jHE(>*IAECm!.*IM"!)%X.*TFU8UXtCr:AQe>+p](#;q'Luh_jek?rbkl/DVPX[22[7Z"_"]%0MBa:q7Bb-.-]Jd7!NKa6%><lK>bt;J-V+KV',_&N%^iN#p%of<GT>JaON2:kdER0c/Oj+:9Bs2@V-Hk++Qr3[?/aM(ek:J@iH@&B9YQ<#-tEns"n^bJ/9):&;fdRqcr&AJD%1[>l2;At)"WdBYh%#&M:;`.jU^[dLr\G'P3BV&bq5PPA$kY'N:>nYYOH`C_A`I?cR!+cXpF%!ku:S&<PtV<P1+A\9SUnIfhGh`cR8"#VOpJV74s`_8u,%U.B-_dX[^=\O^GMmM'6ZGoGb7X2ZPJ]0I(n`C]*N]7["9GoEL'1*e:X8;hV);AubRjNU$apH*%\Sj,I[Bj@I@ca+&OY>A"?+,oj\%#IXqP^iXbt%,1olcembiWB!`M77q'.CS!(T)R*4YOrgJuX!_hIdXW`gD3NCuNGsj'RfjUQk<58u#)&9<2_"+p3>BROVlfp#8QR-[%5%B`*?r/L[)OJXLHam3m*-@H!2_,>n12S3B%E([K9hXLl.#qi#QrZQO-[9>*<nQ';1h)e_"O'L@VV`12(+uoIPuW*SHle`#%bTcd%/7.%]/RI-5PEmnam&W>_dtgtM;!c^5k.FA$dkEpZg,7t#865-1782`@B?&2F.`Ifg@N'_@<GsfN:#50#2fIDI4Yhh-g_CRh?c4d=%37XO#'%=A!)$L:Tg&j&am=CCeVCr[R[QLCr-X;[u%'.0VCX!&<NOsD)i,8:h]5;"\WCt4I`&.21oWbUf9gOYB]JOf/ncqi^.nd`0%-taNQ?pU3J`h=#d@m+rKlZT1Z'6b,=Lm8s7#7ZtLWX>5_`lSk[.>Nj=V4:GV5?:k^`h8%^j(o06)RcE+O_J:YJLt?bJXMm+W73RH%OT_.'OD6tbM.smr$&cuB)>c1b*sj4&I3thV@`=:YR.e<h9]M7B_bLh!NMEVKX>.u]OLV6\D(C3M@N#c`md@Q\?!JX6LhVRrYX937%'@XGpa$i<ACoq]`0f/2^%\*F4kZ9m\A89igpD,XRBU,Q23\%dHOIO7"\B(E.0e7>+:um&gRcA7"g9I"\2=67^(-B"YL#StL4U8k+%`]NPtASj#:)B3ggL=DYqktnq$BgB>HdWR+)d&uod_=L)WK?7gm9]HY,)NQ28Zrd1:(4ep%dg?aq9g'.Q%FEPNPO["CO`7j.C>6!A%dF/H.EPpa(H5[?Ko7P]uqfW,W9M^"Cjok5G$ik3l)@tZnT5bV)O<:M)]";KX;$4MN`,nPij>;$kF6ns]<?UkPCj)964L:#l7@$q4%Q.nuU)J>6b^Vrt.L94[hfkE;%Z4;<6<5gR::\Z-3nMk:?Jf)emGqR78aD!c7is[h+NTYR)_>:/mf9Ts)DS4W;VrjJZC"tC_PX+sl%C:Oe;c=dJQP)-)OfKiTo_bVlIPGr9OA[Np%2iUpZKkGGTNq;/hZj.dug&WdOg&prKj9X3iZH#F?TuJ=+)NVJ<BALUb`11%9lX.Kf%9h8at.4Yfn$BfZ=nVG&RY;C$7dr[9SR=jY!l1er.>9#\#eknhQg?6A1VACbU-IWCA9m^9.(_r;!]cH@(.JH.Kg,(aj'[*s*gpBs[%71aOh8o_h(78<rJS?-.:>!_\VaC?PUX__\fF41V0ERPEAe.[5b]:6?F5aH5F\S6b<7m?S,OG/-NRo'?[c&?OCgp@;SDAj),^<B<h%LO>VZRg-e6q8H'<hdr@)Uo(CceV-Xe9`q-Ul!gNpGA#F%)>q#kI]b?6#I9_2#A.T%*iEDCn^!&BZC#@AjKf;-)A&=%&Y')8db/*,%!LmOMR[R:"g0oF%Zbs`h=k#99QD-5o%K.fs?;T*7cep%&eOPl"0K&6KLmn#u=!JU7e2/;mqESSg^%ssr@#LEWbhR.ne&keDX/Teu%bSa^9ZnbOTSsc#O`.j/KBa:rBBa86b)SSD$+tOR@5U>0jQt^62LWmt!r&P'O**qBkZGV2'bfhnO@fHZh%Gt'R4d]qKPjGr[C$`PP%747"qAZI#YMpsR+/#m2r)R*Vgn=/cc3W%#o4-7ET4"rJ>1fdb7&.DS<2-lLa1C[HGj<7FMJ2fF<e2/<&'5`NK\;hP>Gim?XY(1#"%Rekh6W46O5W$i852"^7BO;6:A@0/7'e?_<Cf?e(+:/'&i(#=6\1KYKu"aa+BL]<qs1^WLYBpm*JPSL!3'nMU04i_lr?(0'Sap]/t%b%K;HGs2rjdKQAS4Eo@T20a)XVg5Hh6T68CNVBI5+Y0kOCD`=(RTVlq?QO!.p:@*mElSUS;9&]E7mNg@B$W&X079%0YJmb)oHSnQ%hlE&%],8lOf6f#1T:5BIV7mAap#inhYe*cgJIMHamYnh$iFR?HJ]3\D2AD5fl_I\[5U`r8rcV[D<QW"H=LB"O,g$hCp]D-TCZp4J%)eA<?Ad43ZDOL7<Ij>Z^^SYa-^q+u9[=-s0/sR^^=W^\@2P;'>TRpXs*#R5?qAEbEG@JDC$qCp7n2>@9J$0%1-0uQZ./+-N8*D\I%5u[+d4<Hg&R'nT_;&:1f#F+(DE;+Ac/J7B"mI:^HanshDH0i7.0ij)TEd=@@Y/CO$I;#H[rHU2O7r6UjTA&p`ESAGgF/;rG-?:)%%h:7#$gJ$?AA(LV0dW;r[M\gFhH=(+F==dQg:3Dtimr-(Kl"kD/Sr^.Zir_@inA7FaD;%R'UT6G/!45J@Q8JaqAuk*5NO]"W^GYlU%R(q0hbrpQWUR:4l]#4n9-LcS3^(uP?ru>1J[Fg\N^KqnJ?jij?>hY6?%:pgQ\4a=;V*g*\%'+CZ'']Df0\HMpG`5X2:a+6$N#c`q%R'I)]VX/kZb*L:A]olSW>lKR;?.FUnjIPqk:-<$^'E&Vl+q_NMN:,^T"o3BV]@?=#SFC=.AkOS:WcRFo>R>5J=23):A&9kbR#)3O%[NU1>,a6!>k=o/e;pdW,`,tS53((+P&Fdsp76;Odc*R)SouH,`3+n+"f5huSQtK^q`VQLRRYN=k_:I5%ZYXdmdbZ0L44A1njA/>u%fuN!mF$H'iH.<XJmdN=LcV2FC&.p#;<:0iKB&UU/`Q3\;+DRS`=d]jCE+`8]0ra!qYb6(cA%S:(WRr/OA-Q+M3I^B?kcq-NJ1qG2%d)^YTiMjE,<U,\^GWo]IPZP[>P9H^[SSp+?KLEWera$m!L+2]`1`Cjud;2u@imuBH?A.8H"^r7(`SX'##1+TOe:cf/7O6!@0FXaF%QT8<2+pTH9RkXcOH6703H>7>8,RMAb#6eTNL4Pc5Do+1>?h[835*/2M4tmY)Jc$))H6H$bgS(HFWuV!n@2OfQs/#kXpT^U`5o<'u%C#e#Fp$gH+.Lotm\*Sid\3M?/UrXB:L<>J6"'LTA:BMMo@Jkm)g7'hp3e+dcDtd%COcj=n0T]KZD8Pdn/Agnr2IZBr9Gdun30\i_%CfZ54`#%S&;RWb(_OO3W31(#2^;#;5*)8k[RR2Gm<*qboLtMG`127V4(g%1'9''K%LFTV*_?U^$i<(iBR,?<EA\KktIY\o"/ds"\%(*`4(pa&X9k!]@mqhhl(U-g+]a&DrHp>"`qXbFC^_?[OE_?X\e0TgHIiQA7*5A,n&/cYf.^\l@6Ied@NoBkQ[hL>:tJ$/hK+92+c%5(<H[^]".UJ+rZ[0E:n7++F*rhgbTcDnl8Mp4km4qHq!cq=Teur6o#%rQB-Zq>-^:J,&uO5QBh@^]4#hci<`8rse&^8j**r0E:f#%s7H$b!GM?Urr~>%AI9_PrivateDataEnd